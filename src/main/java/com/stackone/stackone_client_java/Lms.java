/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import static com.stackone.stackone_client_java.operations.Operations.RequestOperation;

import com.stackone.stackone_client_java.models.components.LmsBatchUpsertContentRequestDto;
import com.stackone.stackone_client_java.models.components.LmsCreateAssignmentRequestDto;
import com.stackone.stackone_client_java.models.components.LmsCreateCompletionRequestDto;
import com.stackone.stackone_client_java.models.components.LmsCreateContentRequestDto;
import com.stackone.stackone_client_java.models.components.LmsUpsertContentRequestDto;
import com.stackone.stackone_client_java.models.operations.LmsBatchUpsertContentRequest;
import com.stackone.stackone_client_java.models.operations.LmsBatchUpsertContentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsBatchUpsertContentResponse;
import com.stackone.stackone_client_java.models.operations.LmsCreateUserAssignmentRequest;
import com.stackone.stackone_client_java.models.operations.LmsCreateUserAssignmentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsCreateUserAssignmentResponse;
import com.stackone.stackone_client_java.models.operations.LmsCreateUserCompletionRequest;
import com.stackone.stackone_client_java.models.operations.LmsCreateUserCompletionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsCreateUserCompletionResponse;
import com.stackone.stackone_client_java.models.operations.LmsDeleteUserCompletionRequest;
import com.stackone.stackone_client_java.models.operations.LmsDeleteUserCompletionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsDeleteUserCompletionResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetAssignmentRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetAssignmentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetAssignmentResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetCategoryRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetCategoryRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetCategoryResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetCompletionRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetCompletionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetCompletionResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetContentRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetContentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetContentResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetCourseRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetCourseRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetCourseResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetSkillRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetSkillRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetSkillResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetUserAssignmentRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetUserAssignmentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetUserAssignmentResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetUserCompletionRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetUserCompletionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetUserCompletionResponse;
import com.stackone.stackone_client_java.models.operations.LmsGetUserRequest;
import com.stackone.stackone_client_java.models.operations.LmsGetUserRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsGetUserResponse;
import com.stackone.stackone_client_java.models.operations.LmsListAssignmentsRequest;
import com.stackone.stackone_client_java.models.operations.LmsListAssignmentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListAssignmentsResponse;
import com.stackone.stackone_client_java.models.operations.LmsListCategoriesRequest;
import com.stackone.stackone_client_java.models.operations.LmsListCategoriesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListCategoriesResponse;
import com.stackone.stackone_client_java.models.operations.LmsListCompletionsRequest;
import com.stackone.stackone_client_java.models.operations.LmsListCompletionsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListCompletionsResponse;
import com.stackone.stackone_client_java.models.operations.LmsListContentRequest;
import com.stackone.stackone_client_java.models.operations.LmsListContentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListContentResponse;
import com.stackone.stackone_client_java.models.operations.LmsListCoursesRequest;
import com.stackone.stackone_client_java.models.operations.LmsListCoursesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListCoursesResponse;
import com.stackone.stackone_client_java.models.operations.LmsListSkillsRequest;
import com.stackone.stackone_client_java.models.operations.LmsListSkillsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListSkillsResponse;
import com.stackone.stackone_client_java.models.operations.LmsListUserAssignmentsRequest;
import com.stackone.stackone_client_java.models.operations.LmsListUserAssignmentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListUserAssignmentsResponse;
import com.stackone.stackone_client_java.models.operations.LmsListUserCompletionsRequest;
import com.stackone.stackone_client_java.models.operations.LmsListUserCompletionsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListUserCompletionsResponse;
import com.stackone.stackone_client_java.models.operations.LmsListUsersRequest;
import com.stackone.stackone_client_java.models.operations.LmsListUsersRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsListUsersResponse;
import com.stackone.stackone_client_java.models.operations.LmsUpdateContentRequest;
import com.stackone.stackone_client_java.models.operations.LmsUpdateContentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsUpdateContentResponse;
import com.stackone.stackone_client_java.models.operations.LmsUpsertContentRequest;
import com.stackone.stackone_client_java.models.operations.LmsUpsertContentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.LmsUpsertContentResponse;
import com.stackone.stackone_client_java.operations.LmsBatchUpsertContentOperation;
import com.stackone.stackone_client_java.operations.LmsCreateUserAssignmentOperation;
import com.stackone.stackone_client_java.operations.LmsCreateUserCompletionOperation;
import com.stackone.stackone_client_java.operations.LmsDeleteUserCompletionOperation;
import com.stackone.stackone_client_java.operations.LmsGetAssignmentOperation;
import com.stackone.stackone_client_java.operations.LmsGetCategoryOperation;
import com.stackone.stackone_client_java.operations.LmsGetCompletionOperation;
import com.stackone.stackone_client_java.operations.LmsGetContentOperation;
import com.stackone.stackone_client_java.operations.LmsGetCourseOperation;
import com.stackone.stackone_client_java.operations.LmsGetSkillOperation;
import com.stackone.stackone_client_java.operations.LmsGetUserAssignmentOperation;
import com.stackone.stackone_client_java.operations.LmsGetUserCompletionOperation;
import com.stackone.stackone_client_java.operations.LmsGetUserOperation;
import com.stackone.stackone_client_java.operations.LmsListAssignmentsOperation;
import com.stackone.stackone_client_java.operations.LmsListCategoriesOperation;
import com.stackone.stackone_client_java.operations.LmsListCompletionsOperation;
import com.stackone.stackone_client_java.operations.LmsListContentOperation;
import com.stackone.stackone_client_java.operations.LmsListCoursesOperation;
import com.stackone.stackone_client_java.operations.LmsListSkillsOperation;
import com.stackone.stackone_client_java.operations.LmsListUserAssignmentsOperation;
import com.stackone.stackone_client_java.operations.LmsListUserCompletionsOperation;
import com.stackone.stackone_client_java.operations.LmsListUsersOperation;
import com.stackone.stackone_client_java.operations.LmsUpdateContentOperation;
import com.stackone.stackone_client_java.operations.LmsUpsertContentOperation;
import com.stackone.stackone_client_java.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Lms {
    private final SDKConfiguration sdkConfiguration;

    Lms(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Courses
     * 
     * @return The call builder
     */
    public LmsListCoursesRequestBuilder listCourses() {
        return new LmsListCoursesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Courses
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListCoursesResponse listCourses(LmsListCoursesRequest request) throws Exception {
        return listCourses(request, Optional.empty());
    }

    /**
     * List Courses
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListCoursesResponse listCourses(LmsListCoursesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListCoursesRequest, LmsListCoursesResponse> operation
              = new LmsListCoursesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Course
     * 
     * @return The call builder
     */
    public LmsGetCourseRequestBuilder getCourse() {
        return new LmsGetCourseRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Course
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetCourseResponse getCourse(LmsGetCourseRequest request) throws Exception {
        return getCourse(request, Optional.empty());
    }

    /**
     * Get Course
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetCourseResponse getCourse(LmsGetCourseRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetCourseRequest, LmsGetCourseResponse> operation
              = new LmsGetCourseOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List User Assignments
     * 
     * @return The call builder
     */
    public LmsListUserAssignmentsRequestBuilder listUserAssignments() {
        return new LmsListUserAssignmentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List User Assignments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListUserAssignmentsResponse listUserAssignments(LmsListUserAssignmentsRequest request) throws Exception {
        return listUserAssignments(request, Optional.empty());
    }

    /**
     * List User Assignments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListUserAssignmentsResponse listUserAssignments(LmsListUserAssignmentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListUserAssignmentsRequest, LmsListUserAssignmentsResponse> operation
              = new LmsListUserAssignmentsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create User Assignment
     * 
     * @return The call builder
     */
    public LmsCreateUserAssignmentRequestBuilder createUserAssignment() {
        return new LmsCreateUserAssignmentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create User Assignment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param lmsCreateAssignmentRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsCreateUserAssignmentResponse createUserAssignment(
            String xAccountId, String id,
            LmsCreateAssignmentRequestDto lmsCreateAssignmentRequestDto) throws Exception {
        return createUserAssignment(xAccountId, id, lmsCreateAssignmentRequestDto,
            Optional.empty());
    }

    /**
     * Create User Assignment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param lmsCreateAssignmentRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsCreateUserAssignmentResponse createUserAssignment(
            String xAccountId, String id,
            LmsCreateAssignmentRequestDto lmsCreateAssignmentRequestDto, Optional<Options> options) throws Exception {
        LmsCreateUserAssignmentRequest request =
            LmsCreateUserAssignmentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .lmsCreateAssignmentRequestDto(lmsCreateAssignmentRequestDto)
                .build();
        RequestOperation<LmsCreateUserAssignmentRequest, LmsCreateUserAssignmentResponse> operation
              = new LmsCreateUserAssignmentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get User Assignment
     * 
     * @return The call builder
     */
    public LmsGetUserAssignmentRequestBuilder getUserAssignment() {
        return new LmsGetUserAssignmentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get User Assignment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetUserAssignmentResponse getUserAssignment(LmsGetUserAssignmentRequest request) throws Exception {
        return getUserAssignment(request, Optional.empty());
    }

    /**
     * Get User Assignment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetUserAssignmentResponse getUserAssignment(LmsGetUserAssignmentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetUserAssignmentRequest, LmsGetUserAssignmentResponse> operation
              = new LmsGetUserAssignmentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Batch Upsert Content
     * 
     * @return The call builder
     */
    public LmsBatchUpsertContentRequestBuilder batchUpsertContent() {
        return new LmsBatchUpsertContentRequestBuilder(sdkConfiguration);
    }

    /**
     * Batch Upsert Content
     * 
     * @param xAccountId The account identifier
     * @param lmsBatchUpsertContentRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsBatchUpsertContentResponse batchUpsertContent(String xAccountId, LmsBatchUpsertContentRequestDto lmsBatchUpsertContentRequestDto) throws Exception {
        return batchUpsertContent(xAccountId, lmsBatchUpsertContentRequestDto, Optional.empty());
    }

    /**
     * Batch Upsert Content
     * 
     * @param xAccountId The account identifier
     * @param lmsBatchUpsertContentRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsBatchUpsertContentResponse batchUpsertContent(
            String xAccountId, LmsBatchUpsertContentRequestDto lmsBatchUpsertContentRequestDto,
            Optional<Options> options) throws Exception {
        LmsBatchUpsertContentRequest request =
            LmsBatchUpsertContentRequest
                .builder()
                .xAccountId(xAccountId)
                .lmsBatchUpsertContentRequestDto(lmsBatchUpsertContentRequestDto)
                .build();
        RequestOperation<LmsBatchUpsertContentRequest, LmsBatchUpsertContentResponse> operation
              = new LmsBatchUpsertContentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Content
     * 
     * @return The call builder
     */
    public LmsListContentRequestBuilder listContent() {
        return new LmsListContentRequestBuilder(sdkConfiguration);
    }

    /**
     * List Content
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListContentResponse listContent(LmsListContentRequest request) throws Exception {
        return listContent(request, Optional.empty());
    }

    /**
     * List Content
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListContentResponse listContent(LmsListContentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListContentRequest, LmsListContentResponse> operation
              = new LmsListContentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Upsert Content
     * 
     * @return The call builder
     */
    public LmsUpsertContentRequestBuilder upsertContent() {
        return new LmsUpsertContentRequestBuilder(sdkConfiguration);
    }

    /**
     * Upsert Content
     * 
     * @param xAccountId The account identifier
     * @param lmsUpsertContentRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsUpsertContentResponse upsertContent(String xAccountId, LmsUpsertContentRequestDto lmsUpsertContentRequestDto) throws Exception {
        return upsertContent(xAccountId, lmsUpsertContentRequestDto, Optional.empty());
    }

    /**
     * Upsert Content
     * 
     * @param xAccountId The account identifier
     * @param lmsUpsertContentRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsUpsertContentResponse upsertContent(
            String xAccountId, LmsUpsertContentRequestDto lmsUpsertContentRequestDto,
            Optional<Options> options) throws Exception {
        LmsUpsertContentRequest request =
            LmsUpsertContentRequest
                .builder()
                .xAccountId(xAccountId)
                .lmsUpsertContentRequestDto(lmsUpsertContentRequestDto)
                .build();
        RequestOperation<LmsUpsertContentRequest, LmsUpsertContentResponse> operation
              = new LmsUpsertContentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Content
     * 
     * @return The call builder
     */
    public LmsGetContentRequestBuilder getContent() {
        return new LmsGetContentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Content
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetContentResponse getContent(LmsGetContentRequest request) throws Exception {
        return getContent(request, Optional.empty());
    }

    /**
     * Get Content
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetContentResponse getContent(LmsGetContentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetContentRequest, LmsGetContentResponse> operation
              = new LmsGetContentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Content
     * 
     * @return The call builder
     */
    public LmsUpdateContentRequestBuilder updateContent() {
        return new LmsUpdateContentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Content
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param lmsCreateContentRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsUpdateContentResponse updateContent(
            String xAccountId, String id,
            LmsCreateContentRequestDto lmsCreateContentRequestDto) throws Exception {
        return updateContent(xAccountId, id, lmsCreateContentRequestDto,
            Optional.empty());
    }

    /**
     * Update Content
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param lmsCreateContentRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsUpdateContentResponse updateContent(
            String xAccountId, String id,
            LmsCreateContentRequestDto lmsCreateContentRequestDto, Optional<Options> options) throws Exception {
        LmsUpdateContentRequest request =
            LmsUpdateContentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .lmsCreateContentRequestDto(lmsCreateContentRequestDto)
                .build();
        RequestOperation<LmsUpdateContentRequest, LmsUpdateContentResponse> operation
              = new LmsUpdateContentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List User Completions
     * 
     * @return The call builder
     */
    public LmsListUserCompletionsRequestBuilder listUserCompletions() {
        return new LmsListUserCompletionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List User Completions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListUserCompletionsResponse listUserCompletions(LmsListUserCompletionsRequest request) throws Exception {
        return listUserCompletions(request, Optional.empty());
    }

    /**
     * List User Completions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListUserCompletionsResponse listUserCompletions(LmsListUserCompletionsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListUserCompletionsRequest, LmsListUserCompletionsResponse> operation
              = new LmsListUserCompletionsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create User Completion
     * 
     * @return The call builder
     */
    public LmsCreateUserCompletionRequestBuilder createUserCompletion() {
        return new LmsCreateUserCompletionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create User Completion
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param lmsCreateCompletionRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsCreateUserCompletionResponse createUserCompletion(
            String xAccountId, String id,
            LmsCreateCompletionRequestDto lmsCreateCompletionRequestDto) throws Exception {
        return createUserCompletion(xAccountId, id, lmsCreateCompletionRequestDto,
            Optional.empty());
    }

    /**
     * Create User Completion
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param lmsCreateCompletionRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsCreateUserCompletionResponse createUserCompletion(
            String xAccountId, String id,
            LmsCreateCompletionRequestDto lmsCreateCompletionRequestDto, Optional<Options> options) throws Exception {
        LmsCreateUserCompletionRequest request =
            LmsCreateUserCompletionRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .lmsCreateCompletionRequestDto(lmsCreateCompletionRequestDto)
                .build();
        RequestOperation<LmsCreateUserCompletionRequest, LmsCreateUserCompletionResponse> operation
              = new LmsCreateUserCompletionOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get User Completion
     * 
     * @return The call builder
     */
    public LmsGetUserCompletionRequestBuilder getUserCompletion() {
        return new LmsGetUserCompletionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get User Completion
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetUserCompletionResponse getUserCompletion(LmsGetUserCompletionRequest request) throws Exception {
        return getUserCompletion(request, Optional.empty());
    }

    /**
     * Get User Completion
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetUserCompletionResponse getUserCompletion(LmsGetUserCompletionRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetUserCompletionRequest, LmsGetUserCompletionResponse> operation
              = new LmsGetUserCompletionOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete User Completion
     * 
     * @return The call builder
     */
    public LmsDeleteUserCompletionRequestBuilder deleteUserCompletion() {
        return new LmsDeleteUserCompletionRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete User Completion
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsDeleteUserCompletionResponse deleteUserCompletion(
            String xAccountId, String id,
            String subResourceId) throws Exception {
        return deleteUserCompletion(xAccountId, id, subResourceId,
            Optional.empty());
    }

    /**
     * Delete User Completion
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsDeleteUserCompletionResponse deleteUserCompletion(
            String xAccountId, String id,
            String subResourceId, Optional<Options> options) throws Exception {
        LmsDeleteUserCompletionRequest request =
            LmsDeleteUserCompletionRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .build();
        RequestOperation<LmsDeleteUserCompletionRequest, LmsDeleteUserCompletionResponse> operation
              = new LmsDeleteUserCompletionOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Completions
     * 
     * @return The call builder
     */
    public LmsListCompletionsRequestBuilder listCompletions() {
        return new LmsListCompletionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Completions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListCompletionsResponse listCompletions(LmsListCompletionsRequest request) throws Exception {
        return listCompletions(request, Optional.empty());
    }

    /**
     * List Completions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListCompletionsResponse listCompletions(LmsListCompletionsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListCompletionsRequest, LmsListCompletionsResponse> operation
              = new LmsListCompletionsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Completion
     * 
     * @return The call builder
     */
    public LmsGetCompletionRequestBuilder getCompletion() {
        return new LmsGetCompletionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Completion
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetCompletionResponse getCompletion(LmsGetCompletionRequest request) throws Exception {
        return getCompletion(request, Optional.empty());
    }

    /**
     * Get Completion
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetCompletionResponse getCompletion(LmsGetCompletionRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetCompletionRequest, LmsGetCompletionResponse> operation
              = new LmsGetCompletionOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Category
     * 
     * @return The call builder
     */
    public LmsGetCategoryRequestBuilder getCategory() {
        return new LmsGetCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetCategoryResponse getCategory(LmsGetCategoryRequest request) throws Exception {
        return getCategory(request, Optional.empty());
    }

    /**
     * Get Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetCategoryResponse getCategory(LmsGetCategoryRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetCategoryRequest, LmsGetCategoryResponse> operation
              = new LmsGetCategoryOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Categories
     * 
     * @return The call builder
     */
    public LmsListCategoriesRequestBuilder listCategories() {
        return new LmsListCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListCategoriesResponse listCategories(LmsListCategoriesRequest request) throws Exception {
        return listCategories(request, Optional.empty());
    }

    /**
     * List Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListCategoriesResponse listCategories(LmsListCategoriesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListCategoriesRequest, LmsListCategoriesResponse> operation
              = new LmsListCategoriesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Users
     * 
     * @return The call builder
     */
    public LmsListUsersRequestBuilder listUsers() {
        return new LmsListUsersRequestBuilder(sdkConfiguration);
    }

    /**
     * List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListUsersResponse listUsers(LmsListUsersRequest request) throws Exception {
        return listUsers(request, Optional.empty());
    }

    /**
     * List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListUsersResponse listUsers(LmsListUsersRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListUsersRequest, LmsListUsersResponse> operation
              = new LmsListUsersOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get User
     * 
     * @return The call builder
     */
    public LmsGetUserRequestBuilder getUser() {
        return new LmsGetUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Get User
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetUserResponse getUser(LmsGetUserRequest request) throws Exception {
        return getUser(request, Optional.empty());
    }

    /**
     * Get User
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetUserResponse getUser(LmsGetUserRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetUserRequest, LmsGetUserResponse> operation
              = new LmsGetUserOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Skill
     * 
     * @return The call builder
     */
    public LmsGetSkillRequestBuilder getSkill() {
        return new LmsGetSkillRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Skill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetSkillResponse getSkill(LmsGetSkillRequest request) throws Exception {
        return getSkill(request, Optional.empty());
    }

    /**
     * Get Skill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetSkillResponse getSkill(LmsGetSkillRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetSkillRequest, LmsGetSkillResponse> operation
              = new LmsGetSkillOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Skills
     * 
     * @return The call builder
     */
    public LmsListSkillsRequestBuilder listSkills() {
        return new LmsListSkillsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Skills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListSkillsResponse listSkills(LmsListSkillsRequest request) throws Exception {
        return listSkills(request, Optional.empty());
    }

    /**
     * List Skills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListSkillsResponse listSkills(LmsListSkillsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListSkillsRequest, LmsListSkillsResponse> operation
              = new LmsListSkillsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Assignments
     * 
     * @return The call builder
     */
    public LmsListAssignmentsRequestBuilder listAssignments() {
        return new LmsListAssignmentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Assignments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListAssignmentsResponse listAssignments(LmsListAssignmentsRequest request) throws Exception {
        return listAssignments(request, Optional.empty());
    }

    /**
     * List Assignments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsListAssignmentsResponse listAssignments(LmsListAssignmentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsListAssignmentsRequest, LmsListAssignmentsResponse> operation
              = new LmsListAssignmentsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Assignment
     * 
     * @return The call builder
     */
    public LmsGetAssignmentRequestBuilder getAssignment() {
        return new LmsGetAssignmentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Assignment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetAssignmentResponse getAssignment(LmsGetAssignmentRequest request) throws Exception {
        return getAssignment(request, Optional.empty());
    }

    /**
     * Get Assignment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LmsGetAssignmentResponse getAssignment(LmsGetAssignmentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<LmsGetAssignmentRequest, LmsGetAssignmentResponse> operation
              = new LmsGetAssignmentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
