/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import com.stackone.stackone_client_java.utils.Headers;

/**
 * Accounting: The documentation for the StackOne Unified API - ACCOUNTING
 */
public class AsyncStackOne {
    private static final Headers _headers = Headers.EMPTY;
    /**
     * Generate connection session tokens or auth URLs to allow your customers to connect their accounts.
     */
    private final AsyncConnectSessions connectSessions;
    /**
     * Chart of accounts.
     */
    private final AsyncAccounts accounts;
    /**
     * API requests and response logs.
     */
    private final AsyncRequestLogs requestLogs;
    /**
     * Retrieve metadata for connectors.
     */
    private final AsyncConnectors connectors;
    /**
     * Model Context Protocol endpoint.
     */
    private final AsyncMcp mcp;
    /**
     * Routing API requests through StackOne directly to the underlying provider.
     */
    private final AsyncProxy proxy;
    /**
     * Retrieve Actions metadata and definitions.
     */
    private final AsyncActions actions;

    private final AsyncHris hris;

    private final AsyncAts ats;

    private final AsyncCrm crm;

    private final AsyncIam iam;

    private final AsyncMarketing marketing;

    private final AsyncLms lms;

    private final AsyncTicketing ticketing;

    private final AsyncDocuments documents;

    private final AsyncScreening screening;

    private final AsyncMessaging messaging;

    private final AsyncAccounting accounting;
    /**
     * Generate connection session tokens or auth URLs to allow your customers to connect their accounts.
     */
    public AsyncConnectSessions connectSessions() {
        return connectSessions;
    }
    /**
     * Chart of accounts.
     */
    public AsyncAccounts accounts() {
        return accounts;
    }
    /**
     * API requests and response logs.
     */
    public AsyncRequestLogs requestLogs() {
        return requestLogs;
    }
    /**
     * Retrieve metadata for connectors.
     */
    public AsyncConnectors connectors() {
        return connectors;
    }
    /**
     * Model Context Protocol endpoint.
     */
    public AsyncMcp mcp() {
        return mcp;
    }
    /**
     * Routing API requests through StackOne directly to the underlying provider.
     */
    public AsyncProxy proxy() {
        return proxy;
    }
    /**
     * Retrieve Actions metadata and definitions.
     */
    public AsyncActions actions() {
        return actions;
    }

    public AsyncHris hris() {
        return hris;
    }

    public AsyncAts ats() {
        return ats;
    }

    public AsyncCrm crm() {
        return crm;
    }

    public AsyncIam iam() {
        return iam;
    }

    public AsyncMarketing marketing() {
        return marketing;
    }

    public AsyncLms lms() {
        return lms;
    }

    public AsyncTicketing ticketing() {
        return ticketing;
    }

    public AsyncDocuments documents() {
        return documents;
    }

    public AsyncScreening screening() {
        return screening;
    }

    public AsyncMessaging messaging() {
        return messaging;
    }

    public AsyncAccounting accounting() {
        return accounting;
    }

    private final SDKConfiguration sdkConfiguration;
    private final StackOne syncSDK;

    AsyncStackOne(StackOne syncSDK, SDKConfiguration sdkConfiguration) {
        this.syncSDK = syncSDK;
        this.sdkConfiguration = sdkConfiguration;
        this.connectSessions = new AsyncConnectSessions(syncSDK.connectSessions(), sdkConfiguration);
        this.accounts = new AsyncAccounts(syncSDK.accounts(), sdkConfiguration);
        this.requestLogs = new AsyncRequestLogs(syncSDK.requestLogs(), sdkConfiguration);
        this.connectors = new AsyncConnectors(syncSDK.connectors(), sdkConfiguration);
        this.mcp = new AsyncMcp(syncSDK.mcp(), sdkConfiguration);
        this.proxy = new AsyncProxy(syncSDK.proxy(), sdkConfiguration);
        this.actions = new AsyncActions(syncSDK.actions(), sdkConfiguration);
        this.hris = new AsyncHris(syncSDK.hris(), sdkConfiguration);
        this.ats = new AsyncAts(syncSDK.ats(), sdkConfiguration);
        this.crm = new AsyncCrm(syncSDK.crm(), sdkConfiguration);
        this.iam = new AsyncIam(syncSDK.iam(), sdkConfiguration);
        this.marketing = new AsyncMarketing(syncSDK.marketing(), sdkConfiguration);
        this.lms = new AsyncLms(syncSDK.lms(), sdkConfiguration);
        this.ticketing = new AsyncTicketing(syncSDK.ticketing(), sdkConfiguration);
        this.documents = new AsyncDocuments(syncSDK.documents(), sdkConfiguration);
        this.screening = new AsyncScreening(syncSDK.screening(), sdkConfiguration);
        this.messaging = new AsyncMessaging(syncSDK.messaging(), sdkConfiguration);
        this.accounting = new AsyncAccounting(syncSDK.accounting(), sdkConfiguration);
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public StackOne sync() {
        return syncSDK;
    }
}
