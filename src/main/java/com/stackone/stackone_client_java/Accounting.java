/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import static com.stackone.stackone_client_java.operations.Operations.RequestOperation;

import com.stackone.stackone_client_java.models.components.AccountingJournalBatchCreateRequestDto;
import com.stackone.stackone_client_java.models.components.AccountingJournalCreateRequestDto;
import com.stackone.stackone_client_java.models.operations.AccountingBatchCreateCompanyJournalsRequest;
import com.stackone.stackone_client_java.models.operations.AccountingBatchCreateCompanyJournalsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingBatchCreateCompanyJournalsResponse;
import com.stackone.stackone_client_java.models.operations.AccountingCreateCompanyJournalRequest;
import com.stackone.stackone_client_java.models.operations.AccountingCreateCompanyJournalRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingCreateCompanyJournalResponse;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyAccountRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyAccountRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyAccountResponse;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyJournalRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyJournalRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyJournalResponse;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyResponse;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyTaxRateRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyTaxRateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyTaxRateResponse;
import com.stackone.stackone_client_java.models.operations.AccountingListCompaniesRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompaniesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingListCompaniesResponse;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyAccountsRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyAccountsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyAccountsResponse;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyJournalsRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyJournalsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyJournalsResponse;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyTaxRatesRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyTaxRatesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyTaxRatesResponse;
import com.stackone.stackone_client_java.operations.AccountingBatchCreateCompanyJournals;
import com.stackone.stackone_client_java.operations.AccountingCreateCompanyJournal;
import com.stackone.stackone_client_java.operations.AccountingGetCompany;
import com.stackone.stackone_client_java.operations.AccountingGetCompanyAccount;
import com.stackone.stackone_client_java.operations.AccountingGetCompanyJournal;
import com.stackone.stackone_client_java.operations.AccountingGetCompanyTaxRate;
import com.stackone.stackone_client_java.operations.AccountingListCompanies;
import com.stackone.stackone_client_java.operations.AccountingListCompanyAccounts;
import com.stackone.stackone_client_java.operations.AccountingListCompanyJournals;
import com.stackone.stackone_client_java.operations.AccountingListCompanyTaxRates;
import com.stackone.stackone_client_java.utils.Headers;
import com.stackone.stackone_client_java.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Accounting {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncAccounting asyncSDK;

    Accounting(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncAccounting(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncAccounting async() {
        return asyncSDK;
    }

    /**
     * List Companies
     * 
     * @return The call builder
     */
    public AccountingListCompaniesRequestBuilder listCompanies() {
        return new AccountingListCompaniesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompaniesResponse listCompanies(AccountingListCompaniesRequest request) throws Exception {
        return listCompanies(request, Optional.empty());
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompaniesResponse listCompanies(AccountingListCompaniesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingListCompaniesRequest, AccountingListCompaniesResponse> operation
              = new AccountingListCompanies.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Company
     * 
     * @return The call builder
     */
    public AccountingGetCompanyRequestBuilder getCompany() {
        return new AccountingGetCompanyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyResponse getCompany(AccountingGetCompanyRequest request) throws Exception {
        return getCompany(request, Optional.empty());
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyResponse getCompany(AccountingGetCompanyRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingGetCompanyRequest, AccountingGetCompanyResponse> operation
              = new AccountingGetCompany.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Accounts
     * 
     * @return The call builder
     */
    public AccountingListCompanyAccountsRequestBuilder listCompanyAccounts() {
        return new AccountingListCompanyAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompanyAccountsResponse listCompanyAccounts(AccountingListCompanyAccountsRequest request) throws Exception {
        return listCompanyAccounts(request, Optional.empty());
    }

    /**
     * List Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompanyAccountsResponse listCompanyAccounts(AccountingListCompanyAccountsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingListCompanyAccountsRequest, AccountingListCompanyAccountsResponse> operation
              = new AccountingListCompanyAccounts.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Account
     * 
     * @return The call builder
     */
    public AccountingGetCompanyAccountRequestBuilder getCompanyAccount() {
        return new AccountingGetCompanyAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyAccountResponse getCompanyAccount(AccountingGetCompanyAccountRequest request) throws Exception {
        return getCompanyAccount(request, Optional.empty());
    }

    /**
     * Get Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyAccountResponse getCompanyAccount(AccountingGetCompanyAccountRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingGetCompanyAccountRequest, AccountingGetCompanyAccountResponse> operation
              = new AccountingGetCompanyAccount.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Tax Rates
     * 
     * @return The call builder
     */
    public AccountingListCompanyTaxRatesRequestBuilder listCompanyTaxRates() {
        return new AccountingListCompanyTaxRatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tax Rates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompanyTaxRatesResponse listCompanyTaxRates(AccountingListCompanyTaxRatesRequest request) throws Exception {
        return listCompanyTaxRates(request, Optional.empty());
    }

    /**
     * List Tax Rates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompanyTaxRatesResponse listCompanyTaxRates(AccountingListCompanyTaxRatesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingListCompanyTaxRatesRequest, AccountingListCompanyTaxRatesResponse> operation
              = new AccountingListCompanyTaxRates.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Tax Rate
     * 
     * @return The call builder
     */
    public AccountingGetCompanyTaxRateRequestBuilder getCompanyTaxRate() {
        return new AccountingGetCompanyTaxRateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyTaxRateResponse getCompanyTaxRate(AccountingGetCompanyTaxRateRequest request) throws Exception {
        return getCompanyTaxRate(request, Optional.empty());
    }

    /**
     * Get Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyTaxRateResponse getCompanyTaxRate(AccountingGetCompanyTaxRateRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingGetCompanyTaxRateRequest, AccountingGetCompanyTaxRateResponse> operation
              = new AccountingGetCompanyTaxRate.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Batch Create Journals
     * 
     * @return The call builder
     */
    public AccountingBatchCreateCompanyJournalsRequestBuilder batchCreateCompanyJournals() {
        return new AccountingBatchCreateCompanyJournalsRequestBuilder(sdkConfiguration);
    }

    /**
     * Batch Create Journals
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalBatchCreateRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBatchCreateCompanyJournalsResponse batchCreateCompanyJournals(
            String xAccountId, String id,
            AccountingJournalBatchCreateRequestDto accountingJournalBatchCreateRequestDto) throws Exception {
        return batchCreateCompanyJournals(xAccountId, id, accountingJournalBatchCreateRequestDto,
            Optional.empty());
    }

    /**
     * Batch Create Journals
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalBatchCreateRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingBatchCreateCompanyJournalsResponse batchCreateCompanyJournals(
            String xAccountId, String id,
            AccountingJournalBatchCreateRequestDto accountingJournalBatchCreateRequestDto, Optional<Options> options) throws Exception {
        AccountingBatchCreateCompanyJournalsRequest request =
            AccountingBatchCreateCompanyJournalsRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .accountingJournalBatchCreateRequestDto(accountingJournalBatchCreateRequestDto)
                .build();
        RequestOperation<AccountingBatchCreateCompanyJournalsRequest, AccountingBatchCreateCompanyJournalsResponse> operation
              = new AccountingBatchCreateCompanyJournals.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Journals
     * 
     * @return The call builder
     */
    public AccountingListCompanyJournalsRequestBuilder listCompanyJournals() {
        return new AccountingListCompanyJournalsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Journals
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompanyJournalsResponse listCompanyJournals(AccountingListCompanyJournalsRequest request) throws Exception {
        return listCompanyJournals(request, Optional.empty());
    }

    /**
     * List Journals
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingListCompanyJournalsResponse listCompanyJournals(AccountingListCompanyJournalsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingListCompanyJournalsRequest, AccountingListCompanyJournalsResponse> operation
              = new AccountingListCompanyJournals.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Journal
     * 
     * @return The call builder
     */
    public AccountingCreateCompanyJournalRequestBuilder createCompanyJournal() {
        return new AccountingCreateCompanyJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Journal
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalCreateRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCreateCompanyJournalResponse createCompanyJournal(
            String xAccountId, String id,
            AccountingJournalCreateRequestDto accountingJournalCreateRequestDto) throws Exception {
        return createCompanyJournal(xAccountId, id, accountingJournalCreateRequestDto,
            Optional.empty());
    }

    /**
     * Create Journal
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalCreateRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingCreateCompanyJournalResponse createCompanyJournal(
            String xAccountId, String id,
            AccountingJournalCreateRequestDto accountingJournalCreateRequestDto, Optional<Options> options) throws Exception {
        AccountingCreateCompanyJournalRequest request =
            AccountingCreateCompanyJournalRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .accountingJournalCreateRequestDto(accountingJournalCreateRequestDto)
                .build();
        RequestOperation<AccountingCreateCompanyJournalRequest, AccountingCreateCompanyJournalResponse> operation
              = new AccountingCreateCompanyJournal.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Journal
     * 
     * @return The call builder
     */
    public AccountingGetCompanyJournalRequestBuilder getCompanyJournal() {
        return new AccountingGetCompanyJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyJournalResponse getCompanyJournal(AccountingGetCompanyJournalRequest request) throws Exception {
        return getCompanyJournal(request, Optional.empty());
    }

    /**
     * Get Journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AccountingGetCompanyJournalResponse getCompanyJournal(AccountingGetCompanyJournalRequest request, Optional<Options> options) throws Exception {
        RequestOperation<AccountingGetCompanyJournalRequest, AccountingGetCompanyJournalResponse> operation
              = new AccountingGetCompanyJournal.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
