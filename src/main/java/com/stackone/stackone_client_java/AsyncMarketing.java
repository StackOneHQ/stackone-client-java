/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import static com.stackone.stackone_client_java.operations.Operations.AsyncRequestOperation;

import com.stackone.stackone_client_java.models.components.MarketingCreateContentBlocksRequestDto;
import com.stackone.stackone_client_java.models.components.MarketingCreateEmailTemplateRequestDto;
import com.stackone.stackone_client_java.models.components.MarketingCreateInAppTemplateRequestDto;
import com.stackone.stackone_client_java.models.components.MarketingCreatePushTemplateRequestDto;
import com.stackone.stackone_client_java.models.components.MarketingCreateSmsTemplateRequestDto;
import com.stackone.stackone_client_java.models.components.MarketingCreateTemplateRequestDto;
import com.stackone.stackone_client_java.models.operations.MarketingCreateContentBlockRequest;
import com.stackone.stackone_client_java.models.operations.MarketingCreateEmailTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingCreateInAppTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingCreateOmniChannelTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingCreatePushTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingCreateSmsTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingGetCampaignRequest;
import com.stackone.stackone_client_java.models.operations.MarketingGetContentBlockRequest;
import com.stackone.stackone_client_java.models.operations.MarketingGetEmailTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingGetInAppTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingGetOmniChannelTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingGetPushTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingGetSmsTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingListCampaignsRequest;
import com.stackone.stackone_client_java.models.operations.MarketingListContentBlocksRequest;
import com.stackone.stackone_client_java.models.operations.MarketingListEmailTemplatesRequest;
import com.stackone.stackone_client_java.models.operations.MarketingListInAppTemplatesRequest;
import com.stackone.stackone_client_java.models.operations.MarketingListOmniChannelTemplatesRequest;
import com.stackone.stackone_client_java.models.operations.MarketingListPushTemplatesRequest;
import com.stackone.stackone_client_java.models.operations.MarketingListSmsTemplatesRequest;
import com.stackone.stackone_client_java.models.operations.MarketingUpdateContentBlockRequest;
import com.stackone.stackone_client_java.models.operations.MarketingUpdateEmailTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingUpdateInAppTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingUpdateOmniChannelTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingUpdatePushTemplateRequest;
import com.stackone.stackone_client_java.models.operations.MarketingUpdateSmsTemplateRequest;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateContentBlockRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateContentBlockResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateEmailTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateEmailTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateInAppTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateInAppTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateOmniChannelTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateOmniChannelTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreatePushTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreatePushTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateSmsTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingCreateSmsTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetCampaignRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetCampaignResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetContentBlockRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetContentBlockResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetEmailTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetEmailTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetInAppTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetInAppTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetOmniChannelTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetOmniChannelTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetPushTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetPushTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetSmsTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingGetSmsTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingListCampaignsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingListCampaignsResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingListContentBlocksRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingListContentBlocksResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingListEmailTemplatesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingListEmailTemplatesResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingListInAppTemplatesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingListInAppTemplatesResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingListOmniChannelTemplatesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingListOmniChannelTemplatesResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingListPushTemplatesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingListPushTemplatesResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingListSmsTemplatesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingListSmsTemplatesResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateContentBlockRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateContentBlockResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateEmailTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateEmailTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateInAppTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateInAppTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateOmniChannelTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateOmniChannelTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdatePushTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdatePushTemplateResponse;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateSmsTemplateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.MarketingUpdateSmsTemplateResponse;
import com.stackone.stackone_client_java.operations.MarketingCreateContentBlock;
import com.stackone.stackone_client_java.operations.MarketingCreateEmailTemplate;
import com.stackone.stackone_client_java.operations.MarketingCreateInAppTemplate;
import com.stackone.stackone_client_java.operations.MarketingCreateOmniChannelTemplate;
import com.stackone.stackone_client_java.operations.MarketingCreatePushTemplate;
import com.stackone.stackone_client_java.operations.MarketingCreateSmsTemplate;
import com.stackone.stackone_client_java.operations.MarketingGetCampaign;
import com.stackone.stackone_client_java.operations.MarketingGetContentBlock;
import com.stackone.stackone_client_java.operations.MarketingGetEmailTemplate;
import com.stackone.stackone_client_java.operations.MarketingGetInAppTemplate;
import com.stackone.stackone_client_java.operations.MarketingGetOmniChannelTemplate;
import com.stackone.stackone_client_java.operations.MarketingGetPushTemplate;
import com.stackone.stackone_client_java.operations.MarketingGetSmsTemplate;
import com.stackone.stackone_client_java.operations.MarketingListCampaigns;
import com.stackone.stackone_client_java.operations.MarketingListContentBlocks;
import com.stackone.stackone_client_java.operations.MarketingListEmailTemplates;
import com.stackone.stackone_client_java.operations.MarketingListInAppTemplates;
import com.stackone.stackone_client_java.operations.MarketingListOmniChannelTemplates;
import com.stackone.stackone_client_java.operations.MarketingListPushTemplates;
import com.stackone.stackone_client_java.operations.MarketingListSmsTemplates;
import com.stackone.stackone_client_java.operations.MarketingUpdateContentBlock;
import com.stackone.stackone_client_java.operations.MarketingUpdateEmailTemplate;
import com.stackone.stackone_client_java.operations.MarketingUpdateInAppTemplate;
import com.stackone.stackone_client_java.operations.MarketingUpdateOmniChannelTemplate;
import com.stackone.stackone_client_java.operations.MarketingUpdatePushTemplate;
import com.stackone.stackone_client_java.operations.MarketingUpdateSmsTemplate;
import com.stackone.stackone_client_java.utils.Headers;
import com.stackone.stackone_client_java.utils.Options;
import java.lang.Deprecated;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncMarketing {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Marketing syncSDK;

    AsyncMarketing(Marketing syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Marketing sync() {
        return syncSDK;
    }


    /**
     * List Email Templates
     * 
     * @return The async call builder
     */
    public MarketingListEmailTemplatesRequestBuilder listEmailTemplates() {
        return new MarketingListEmailTemplatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Email Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingListEmailTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListEmailTemplatesResponse> listEmailTemplates(MarketingListEmailTemplatesRequest request) {
        return listEmailTemplates(request, Optional.empty());
    }

    /**
     * List Email Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingListEmailTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListEmailTemplatesResponse> listEmailTemplates(MarketingListEmailTemplatesRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingListEmailTemplatesRequest, MarketingListEmailTemplatesResponse> operation
              = new MarketingListEmailTemplates.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Email Templates
     * 
     * @return The async call builder
     */
    public MarketingCreateEmailTemplateRequestBuilder createEmailTemplate() {
        return new MarketingCreateEmailTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Email Templates
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateEmailTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingCreateEmailTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateEmailTemplateResponse> createEmailTemplate(String xAccountId, MarketingCreateEmailTemplateRequestDto marketingCreateEmailTemplateRequestDto) {
        return createEmailTemplate(xAccountId, marketingCreateEmailTemplateRequestDto, Optional.empty());
    }

    /**
     * Create Email Templates
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateEmailTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingCreateEmailTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateEmailTemplateResponse> createEmailTemplate(
            String xAccountId, MarketingCreateEmailTemplateRequestDto marketingCreateEmailTemplateRequestDto,
            Optional<Options> options) {
        MarketingCreateEmailTemplateRequest request =
            MarketingCreateEmailTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .marketingCreateEmailTemplateRequestDto(marketingCreateEmailTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingCreateEmailTemplateRequest, MarketingCreateEmailTemplateResponse> operation
              = new MarketingCreateEmailTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Email Templates
     * 
     * @return The async call builder
     */
    public MarketingGetEmailTemplateRequestBuilder getEmailTemplate() {
        return new MarketingGetEmailTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Email Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingGetEmailTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetEmailTemplateResponse> getEmailTemplate(MarketingGetEmailTemplateRequest request) {
        return getEmailTemplate(request, Optional.empty());
    }

    /**
     * Get Email Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingGetEmailTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetEmailTemplateResponse> getEmailTemplate(MarketingGetEmailTemplateRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingGetEmailTemplateRequest, MarketingGetEmailTemplateResponse> operation
              = new MarketingGetEmailTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Email Templates
     * 
     * @return The async call builder
     */
    public MarketingUpdateEmailTemplateRequestBuilder updateEmailTemplate() {
        return new MarketingUpdateEmailTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Email Templates
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateEmailTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingUpdateEmailTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateEmailTemplateResponse> updateEmailTemplate(
            String xAccountId, String id,
            MarketingCreateEmailTemplateRequestDto marketingCreateEmailTemplateRequestDto) {
        return updateEmailTemplate(
                xAccountId, id, marketingCreateEmailTemplateRequestDto,
                Optional.empty());
    }

    /**
     * Update Email Templates
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateEmailTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingUpdateEmailTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateEmailTemplateResponse> updateEmailTemplate(
            String xAccountId, String id,
            MarketingCreateEmailTemplateRequestDto marketingCreateEmailTemplateRequestDto, Optional<Options> options) {
        MarketingUpdateEmailTemplateRequest request =
            MarketingUpdateEmailTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .marketingCreateEmailTemplateRequestDto(marketingCreateEmailTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingUpdateEmailTemplateRequest, MarketingUpdateEmailTemplateResponse> operation
              = new MarketingUpdateEmailTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List In-App Templates
     * 
     * @return The async call builder
     */
    public MarketingListInAppTemplatesRequestBuilder listInAppTemplates() {
        return new MarketingListInAppTemplatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List In-App Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingListInAppTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListInAppTemplatesResponse> listInAppTemplates(MarketingListInAppTemplatesRequest request) {
        return listInAppTemplates(request, Optional.empty());
    }

    /**
     * List In-App Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingListInAppTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListInAppTemplatesResponse> listInAppTemplates(MarketingListInAppTemplatesRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingListInAppTemplatesRequest, MarketingListInAppTemplatesResponse> operation
              = new MarketingListInAppTemplates.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create In-App Template
     * 
     * @return The async call builder
     */
    public MarketingCreateInAppTemplateRequestBuilder createInAppTemplate() {
        return new MarketingCreateInAppTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create In-App Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateInAppTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingCreateInAppTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateInAppTemplateResponse> createInAppTemplate(String xAccountId, MarketingCreateInAppTemplateRequestDto marketingCreateInAppTemplateRequestDto) {
        return createInAppTemplate(xAccountId, marketingCreateInAppTemplateRequestDto, Optional.empty());
    }

    /**
     * Create In-App Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateInAppTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingCreateInAppTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateInAppTemplateResponse> createInAppTemplate(
            String xAccountId, MarketingCreateInAppTemplateRequestDto marketingCreateInAppTemplateRequestDto,
            Optional<Options> options) {
        MarketingCreateInAppTemplateRequest request =
            MarketingCreateInAppTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .marketingCreateInAppTemplateRequestDto(marketingCreateInAppTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingCreateInAppTemplateRequest, MarketingCreateInAppTemplateResponse> operation
              = new MarketingCreateInAppTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get In-App Template
     * 
     * @return The async call builder
     */
    public MarketingGetInAppTemplateRequestBuilder getInAppTemplate() {
        return new MarketingGetInAppTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get In-App Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingGetInAppTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetInAppTemplateResponse> getInAppTemplate(MarketingGetInAppTemplateRequest request) {
        return getInAppTemplate(request, Optional.empty());
    }

    /**
     * Get In-App Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingGetInAppTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetInAppTemplateResponse> getInAppTemplate(MarketingGetInAppTemplateRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingGetInAppTemplateRequest, MarketingGetInAppTemplateResponse> operation
              = new MarketingGetInAppTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update In-App Template
     * 
     * @return The async call builder
     */
    public MarketingUpdateInAppTemplateRequestBuilder updateInAppTemplate() {
        return new MarketingUpdateInAppTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update In-App Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateInAppTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingUpdateInAppTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateInAppTemplateResponse> updateInAppTemplate(
            String xAccountId, String id,
            MarketingCreateInAppTemplateRequestDto marketingCreateInAppTemplateRequestDto) {
        return updateInAppTemplate(
                xAccountId, id, marketingCreateInAppTemplateRequestDto,
                Optional.empty());
    }

    /**
     * Update In-App Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateInAppTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingUpdateInAppTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateInAppTemplateResponse> updateInAppTemplate(
            String xAccountId, String id,
            MarketingCreateInAppTemplateRequestDto marketingCreateInAppTemplateRequestDto, Optional<Options> options) {
        MarketingUpdateInAppTemplateRequest request =
            MarketingUpdateInAppTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .marketingCreateInAppTemplateRequestDto(marketingCreateInAppTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingUpdateInAppTemplateRequest, MarketingUpdateInAppTemplateResponse> operation
              = new MarketingUpdateInAppTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List SMS Templates
     * 
     * @return The async call builder
     */
    public MarketingListSmsTemplatesRequestBuilder listSmsTemplates() {
        return new MarketingListSmsTemplatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List SMS Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingListSmsTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListSmsTemplatesResponse> listSmsTemplates(MarketingListSmsTemplatesRequest request) {
        return listSmsTemplates(request, Optional.empty());
    }

    /**
     * List SMS Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingListSmsTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListSmsTemplatesResponse> listSmsTemplates(MarketingListSmsTemplatesRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingListSmsTemplatesRequest, MarketingListSmsTemplatesResponse> operation
              = new MarketingListSmsTemplates.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create SMS Template
     * 
     * @return The async call builder
     */
    public MarketingCreateSmsTemplateRequestBuilder createSmsTemplate() {
        return new MarketingCreateSmsTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create SMS Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateSmsTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingCreateSmsTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateSmsTemplateResponse> createSmsTemplate(String xAccountId, MarketingCreateSmsTemplateRequestDto marketingCreateSmsTemplateRequestDto) {
        return createSmsTemplate(xAccountId, marketingCreateSmsTemplateRequestDto, Optional.empty());
    }

    /**
     * Create SMS Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateSmsTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingCreateSmsTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateSmsTemplateResponse> createSmsTemplate(
            String xAccountId, MarketingCreateSmsTemplateRequestDto marketingCreateSmsTemplateRequestDto,
            Optional<Options> options) {
        MarketingCreateSmsTemplateRequest request =
            MarketingCreateSmsTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .marketingCreateSmsTemplateRequestDto(marketingCreateSmsTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingCreateSmsTemplateRequest, MarketingCreateSmsTemplateResponse> operation
              = new MarketingCreateSmsTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get SMS Template
     * 
     * @return The async call builder
     */
    public MarketingGetSmsTemplateRequestBuilder getSmsTemplate() {
        return new MarketingGetSmsTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get SMS Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingGetSmsTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetSmsTemplateResponse> getSmsTemplate(MarketingGetSmsTemplateRequest request) {
        return getSmsTemplate(request, Optional.empty());
    }

    /**
     * Get SMS Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingGetSmsTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetSmsTemplateResponse> getSmsTemplate(MarketingGetSmsTemplateRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingGetSmsTemplateRequest, MarketingGetSmsTemplateResponse> operation
              = new MarketingGetSmsTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update SMS Template
     * 
     * @return The async call builder
     */
    public MarketingUpdateSmsTemplateRequestBuilder updateSmsTemplate() {
        return new MarketingUpdateSmsTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update SMS Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateSmsTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingUpdateSmsTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateSmsTemplateResponse> updateSmsTemplate(
            String xAccountId, String id,
            MarketingCreateSmsTemplateRequestDto marketingCreateSmsTemplateRequestDto) {
        return updateSmsTemplate(
                xAccountId, id, marketingCreateSmsTemplateRequestDto,
                Optional.empty());
    }

    /**
     * Update SMS Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateSmsTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingUpdateSmsTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateSmsTemplateResponse> updateSmsTemplate(
            String xAccountId, String id,
            MarketingCreateSmsTemplateRequestDto marketingCreateSmsTemplateRequestDto, Optional<Options> options) {
        MarketingUpdateSmsTemplateRequest request =
            MarketingUpdateSmsTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .marketingCreateSmsTemplateRequestDto(marketingCreateSmsTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingUpdateSmsTemplateRequest, MarketingUpdateSmsTemplateResponse> operation
              = new MarketingUpdateSmsTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Omni-Channel Templates
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public MarketingListOmniChannelTemplatesRequestBuilder listOmniChannelTemplates() {
        return new MarketingListOmniChannelTemplatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Omni-Channel Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingListOmniChannelTemplatesResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingListOmniChannelTemplatesResponse> listOmniChannelTemplates(MarketingListOmniChannelTemplatesRequest request) {
        return listOmniChannelTemplates(request, Optional.empty());
    }

    /**
     * List Omni-Channel Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingListOmniChannelTemplatesResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingListOmniChannelTemplatesResponse> listOmniChannelTemplates(MarketingListOmniChannelTemplatesRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingListOmniChannelTemplatesRequest, MarketingListOmniChannelTemplatesResponse> operation
              = new MarketingListOmniChannelTemplates.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Omni-Channel Template
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public MarketingCreateOmniChannelTemplateRequestBuilder createOmniChannelTemplate() {
        return new MarketingCreateOmniChannelTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Omni-Channel Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingCreateOmniChannelTemplateResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingCreateOmniChannelTemplateResponse> createOmniChannelTemplate(String xAccountId, MarketingCreateTemplateRequestDto marketingCreateTemplateRequestDto) {
        return createOmniChannelTemplate(xAccountId, marketingCreateTemplateRequestDto, Optional.empty());
    }

    /**
     * Create Omni-Channel Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingCreateOmniChannelTemplateResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingCreateOmniChannelTemplateResponse> createOmniChannelTemplate(
            String xAccountId, MarketingCreateTemplateRequestDto marketingCreateTemplateRequestDto,
            Optional<Options> options) {
        MarketingCreateOmniChannelTemplateRequest request =
            MarketingCreateOmniChannelTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .marketingCreateTemplateRequestDto(marketingCreateTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingCreateOmniChannelTemplateRequest, MarketingCreateOmniChannelTemplateResponse> operation
              = new MarketingCreateOmniChannelTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Omni-Channel Template
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public MarketingGetOmniChannelTemplateRequestBuilder getOmniChannelTemplate() {
        return new MarketingGetOmniChannelTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Omni-Channel Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingGetOmniChannelTemplateResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingGetOmniChannelTemplateResponse> getOmniChannelTemplate(MarketingGetOmniChannelTemplateRequest request) {
        return getOmniChannelTemplate(request, Optional.empty());
    }

    /**
     * Get Omni-Channel Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingGetOmniChannelTemplateResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingGetOmniChannelTemplateResponse> getOmniChannelTemplate(MarketingGetOmniChannelTemplateRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingGetOmniChannelTemplateRequest, MarketingGetOmniChannelTemplateResponse> operation
              = new MarketingGetOmniChannelTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Omni-Channel Template
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public MarketingUpdateOmniChannelTemplateRequestBuilder updateOmniChannelTemplate() {
        return new MarketingUpdateOmniChannelTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Omni-Channel Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingUpdateOmniChannelTemplateResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingUpdateOmniChannelTemplateResponse> updateOmniChannelTemplate(
            String xAccountId, String id,
            MarketingCreateTemplateRequestDto marketingCreateTemplateRequestDto) {
        return updateOmniChannelTemplate(
                xAccountId, id, marketingCreateTemplateRequestDto,
                Optional.empty());
    }

    /**
     * Update Omni-Channel Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingUpdateOmniChannelTemplateResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<MarketingUpdateOmniChannelTemplateResponse> updateOmniChannelTemplate(
            String xAccountId, String id,
            MarketingCreateTemplateRequestDto marketingCreateTemplateRequestDto, Optional<Options> options) {
        MarketingUpdateOmniChannelTemplateRequest request =
            MarketingUpdateOmniChannelTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .marketingCreateTemplateRequestDto(marketingCreateTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingUpdateOmniChannelTemplateRequest, MarketingUpdateOmniChannelTemplateResponse> operation
              = new MarketingUpdateOmniChannelTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Push Templates
     * 
     * @return The async call builder
     */
    public MarketingListPushTemplatesRequestBuilder listPushTemplates() {
        return new MarketingListPushTemplatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Push Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingListPushTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListPushTemplatesResponse> listPushTemplates(MarketingListPushTemplatesRequest request) {
        return listPushTemplates(request, Optional.empty());
    }

    /**
     * List Push Templates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingListPushTemplatesResponse>} - The async response
     */
    public CompletableFuture<MarketingListPushTemplatesResponse> listPushTemplates(MarketingListPushTemplatesRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingListPushTemplatesRequest, MarketingListPushTemplatesResponse> operation
              = new MarketingListPushTemplates.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Push Template
     * 
     * @return The async call builder
     */
    public MarketingCreatePushTemplateRequestBuilder createPushTemplate() {
        return new MarketingCreatePushTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Push Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreatePushTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingCreatePushTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreatePushTemplateResponse> createPushTemplate(String xAccountId, MarketingCreatePushTemplateRequestDto marketingCreatePushTemplateRequestDto) {
        return createPushTemplate(xAccountId, marketingCreatePushTemplateRequestDto, Optional.empty());
    }

    /**
     * Create Push Template
     * 
     * @param xAccountId The account identifier
     * @param marketingCreatePushTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingCreatePushTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingCreatePushTemplateResponse> createPushTemplate(
            String xAccountId, MarketingCreatePushTemplateRequestDto marketingCreatePushTemplateRequestDto,
            Optional<Options> options) {
        MarketingCreatePushTemplateRequest request =
            MarketingCreatePushTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .marketingCreatePushTemplateRequestDto(marketingCreatePushTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingCreatePushTemplateRequest, MarketingCreatePushTemplateResponse> operation
              = new MarketingCreatePushTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Push Template
     * 
     * @return The async call builder
     */
    public MarketingGetPushTemplateRequestBuilder getPushTemplate() {
        return new MarketingGetPushTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Push Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingGetPushTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetPushTemplateResponse> getPushTemplate(MarketingGetPushTemplateRequest request) {
        return getPushTemplate(request, Optional.empty());
    }

    /**
     * Get Push Template
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingGetPushTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingGetPushTemplateResponse> getPushTemplate(MarketingGetPushTemplateRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingGetPushTemplateRequest, MarketingGetPushTemplateResponse> operation
              = new MarketingGetPushTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Push Template
     * 
     * @return The async call builder
     */
    public MarketingUpdatePushTemplateRequestBuilder updatePushTemplate() {
        return new MarketingUpdatePushTemplateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Push Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreatePushTemplateRequestDto 
     * @return {@code CompletableFuture<MarketingUpdatePushTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdatePushTemplateResponse> updatePushTemplate(
            String xAccountId, String id,
            MarketingCreatePushTemplateRequestDto marketingCreatePushTemplateRequestDto) {
        return updatePushTemplate(
                xAccountId, id, marketingCreatePushTemplateRequestDto,
                Optional.empty());
    }

    /**
     * Update Push Template
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreatePushTemplateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingUpdatePushTemplateResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdatePushTemplateResponse> updatePushTemplate(
            String xAccountId, String id,
            MarketingCreatePushTemplateRequestDto marketingCreatePushTemplateRequestDto, Optional<Options> options) {
        MarketingUpdatePushTemplateRequest request =
            MarketingUpdatePushTemplateRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .marketingCreatePushTemplateRequestDto(marketingCreatePushTemplateRequestDto)
                .build();
        AsyncRequestOperation<MarketingUpdatePushTemplateRequest, MarketingUpdatePushTemplateResponse> operation
              = new MarketingUpdatePushTemplate.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List campaigns
     * 
     * @return The async call builder
     */
    public MarketingListCampaignsRequestBuilder listCampaigns() {
        return new MarketingListCampaignsRequestBuilder(sdkConfiguration);
    }

    /**
     * List campaigns
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingListCampaignsResponse>} - The async response
     */
    public CompletableFuture<MarketingListCampaignsResponse> listCampaigns(MarketingListCampaignsRequest request) {
        return listCampaigns(request, Optional.empty());
    }

    /**
     * List campaigns
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingListCampaignsResponse>} - The async response
     */
    public CompletableFuture<MarketingListCampaignsResponse> listCampaigns(MarketingListCampaignsRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingListCampaignsRequest, MarketingListCampaignsResponse> operation
              = new MarketingListCampaigns.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get campaign
     * 
     * @return The async call builder
     */
    public MarketingGetCampaignRequestBuilder getCampaign() {
        return new MarketingGetCampaignRequestBuilder(sdkConfiguration);
    }

    /**
     * Get campaign
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingGetCampaignResponse>} - The async response
     */
    public CompletableFuture<MarketingGetCampaignResponse> getCampaign(MarketingGetCampaignRequest request) {
        return getCampaign(request, Optional.empty());
    }

    /**
     * Get campaign
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingGetCampaignResponse>} - The async response
     */
    public CompletableFuture<MarketingGetCampaignResponse> getCampaign(MarketingGetCampaignRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingGetCampaignRequest, MarketingGetCampaignResponse> operation
              = new MarketingGetCampaign.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Content Blocks
     * 
     * @return The async call builder
     */
    public MarketingListContentBlocksRequestBuilder listContentBlocks() {
        return new MarketingListContentBlocksRequestBuilder(sdkConfiguration);
    }

    /**
     * List Content Blocks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingListContentBlocksResponse>} - The async response
     */
    public CompletableFuture<MarketingListContentBlocksResponse> listContentBlocks(MarketingListContentBlocksRequest request) {
        return listContentBlocks(request, Optional.empty());
    }

    /**
     * List Content Blocks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingListContentBlocksResponse>} - The async response
     */
    public CompletableFuture<MarketingListContentBlocksResponse> listContentBlocks(MarketingListContentBlocksRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingListContentBlocksRequest, MarketingListContentBlocksResponse> operation
              = new MarketingListContentBlocks.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Content Block
     * 
     * @return The async call builder
     */
    public MarketingCreateContentBlockRequestBuilder createContentBlock() {
        return new MarketingCreateContentBlockRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Content Block
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateContentBlocksRequestDto 
     * @return {@code CompletableFuture<MarketingCreateContentBlockResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateContentBlockResponse> createContentBlock(String xAccountId, MarketingCreateContentBlocksRequestDto marketingCreateContentBlocksRequestDto) {
        return createContentBlock(xAccountId, marketingCreateContentBlocksRequestDto, Optional.empty());
    }

    /**
     * Create Content Block
     * 
     * @param xAccountId The account identifier
     * @param marketingCreateContentBlocksRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingCreateContentBlockResponse>} - The async response
     */
    public CompletableFuture<MarketingCreateContentBlockResponse> createContentBlock(
            String xAccountId, MarketingCreateContentBlocksRequestDto marketingCreateContentBlocksRequestDto,
            Optional<Options> options) {
        MarketingCreateContentBlockRequest request =
            MarketingCreateContentBlockRequest
                .builder()
                .xAccountId(xAccountId)
                .marketingCreateContentBlocksRequestDto(marketingCreateContentBlocksRequestDto)
                .build();
        AsyncRequestOperation<MarketingCreateContentBlockRequest, MarketingCreateContentBlockResponse> operation
              = new MarketingCreateContentBlock.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Content Blocks
     * 
     * @return The async call builder
     */
    public MarketingGetContentBlockRequestBuilder getContentBlock() {
        return new MarketingGetContentBlockRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Content Blocks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<MarketingGetContentBlockResponse>} - The async response
     */
    public CompletableFuture<MarketingGetContentBlockResponse> getContentBlock(MarketingGetContentBlockRequest request) {
        return getContentBlock(request, Optional.empty());
    }

    /**
     * Get Content Blocks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<MarketingGetContentBlockResponse>} - The async response
     */
    public CompletableFuture<MarketingGetContentBlockResponse> getContentBlock(MarketingGetContentBlockRequest request, Optional<Options> options) {
        AsyncRequestOperation<MarketingGetContentBlockRequest, MarketingGetContentBlockResponse> operation
              = new MarketingGetContentBlock.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Content Block
     * 
     * @return The async call builder
     */
    public MarketingUpdateContentBlockRequestBuilder updateContentBlock() {
        return new MarketingUpdateContentBlockRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Content Block
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateContentBlocksRequestDto 
     * @return {@code CompletableFuture<MarketingUpdateContentBlockResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateContentBlockResponse> updateContentBlock(
            String xAccountId, String id,
            MarketingCreateContentBlocksRequestDto marketingCreateContentBlocksRequestDto) {
        return updateContentBlock(
                xAccountId, id, marketingCreateContentBlocksRequestDto,
                Optional.empty());
    }

    /**
     * Update Content Block
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param marketingCreateContentBlocksRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<MarketingUpdateContentBlockResponse>} - The async response
     */
    public CompletableFuture<MarketingUpdateContentBlockResponse> updateContentBlock(
            String xAccountId, String id,
            MarketingCreateContentBlocksRequestDto marketingCreateContentBlocksRequestDto, Optional<Options> options) {
        MarketingUpdateContentBlockRequest request =
            MarketingUpdateContentBlockRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .marketingCreateContentBlocksRequestDto(marketingCreateContentBlocksRequestDto)
                .build();
        AsyncRequestOperation<MarketingUpdateContentBlockRequest, MarketingUpdateContentBlockResponse> operation
              = new MarketingUpdateContentBlock.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
