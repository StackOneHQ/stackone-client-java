/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class HrisCreateEmployeeRequestDto {

    /**
     * The employee first name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The employee last name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The employee name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The employee display name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The employee avatar Url
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_url")
    private JsonNullable<String> avatarUrl;

    /**
     * The employee personal email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_email")
    private JsonNullable<String> personalEmail;

    /**
     * The employee personal phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_phone_number")
    private JsonNullable<String> personalPhoneNumber;

    /**
     * The employee work email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_email")
    private JsonNullable<String> workEmail;

    /**
     * The employee work phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_phone_number")
    private JsonNullable<String> workPhoneNumber;

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    @Deprecated
    private JsonNullable<String> jobId;

    /**
     * If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_title")
    private JsonNullable<String> jobTitle;

    /**
     * The employee department id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The employee team id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team_id")
    private JsonNullable<String> teamId;

    /**
     * The employee department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private JsonNullable<String> department;

    /**
     * The employee manager ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager_id")
    private JsonNullable<String> managerId;

    /**
     * The employee gender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoGender> gender;

    /**
     * The employee preferred language
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_language")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoPreferredLanguage> preferredLanguage;

    /**
     * The employee ethnicity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ethnicity")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoEthnicity> ethnicity;

    /**
     * The employee date_of_birth
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_of_birth")
    private JsonNullable<OffsetDateTime> dateOfBirth;

    /**
     * The employee birthday
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<OffsetDateTime> birthday;

    /**
     * The employee marital status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marital_status")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoMaritalStatus> maritalStatus;

    /**
     * The employee avatar
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoAvatar> avatar;

    /**
     * The employee hire date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hire_date")
    private JsonNullable<OffsetDateTime> hireDate;

    /**
     * The employee start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<OffsetDateTime> startDate;

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_type")
    @Deprecated
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentType> employmentType;

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_contract_type")
    @Deprecated
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentContractType> employmentContractType;

    /**
     * The employee employment status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentStatus> employmentStatus;

    /**
     * The employee termination date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination_date")
    private JsonNullable<OffsetDateTime> terminationDate;

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    @Deprecated
    private JsonNullable<String> companyName;

    /**
     * The employee company id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The citizenships of the Employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("citizenships")
    private JsonNullable<? extends List<CountryCodeEnum>> citizenships;

    /**
     * The employee employments
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employments")
    @Deprecated
    private JsonNullable<? extends List<CreateEmploymentApiModel>> employments;

    /**
     * The employee employment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmployment> employment;

    /**
     * The employee custom fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<? extends List<CustomFields>> customFields;

    /**
     * Current benefits of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefits")
    private JsonNullable<? extends List<CreateHRISBenefit>> benefits;

    /**
     * The assigned employee number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    private JsonNullable<String> employeeNumber;

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_identity_number")
    @Deprecated
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber;

    /**
     * The national identity numbers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_identity_numbers")
    private JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers;

    /**
     * The employee home location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("home_location")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoHomeLocation> homeLocation;

    /**
     * The employee work location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_location")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkLocation> workLocation;

    /**
     * The employee cost centers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_centers")
    private JsonNullable<? extends List<CreateCostCenterApiModel>> costCenters;

    /**
     * Value to pass through to the provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passthrough")
    private JsonNullable<? extends Map<String, Object>> passthrough;

    @JsonCreator
    public HrisCreateEmployeeRequestDto(
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("avatar_url") JsonNullable<String> avatarUrl,
            @JsonProperty("personal_email") JsonNullable<String> personalEmail,
            @JsonProperty("personal_phone_number") JsonNullable<String> personalPhoneNumber,
            @JsonProperty("work_email") JsonNullable<String> workEmail,
            @JsonProperty("work_phone_number") JsonNullable<String> workPhoneNumber,
            @JsonProperty("job_id") JsonNullable<String> jobId,
            @JsonProperty("job_title") JsonNullable<String> jobTitle,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("team_id") JsonNullable<String> teamId,
            @JsonProperty("department") JsonNullable<String> department,
            @JsonProperty("manager_id") JsonNullable<String> managerId,
            @JsonProperty("gender") JsonNullable<? extends HrisCreateEmployeeRequestDtoGender> gender,
            @JsonProperty("preferred_language") JsonNullable<? extends HrisCreateEmployeeRequestDtoPreferredLanguage> preferredLanguage,
            @JsonProperty("ethnicity") JsonNullable<? extends HrisCreateEmployeeRequestDtoEthnicity> ethnicity,
            @JsonProperty("date_of_birth") JsonNullable<OffsetDateTime> dateOfBirth,
            @JsonProperty("birthday") JsonNullable<OffsetDateTime> birthday,
            @JsonProperty("marital_status") JsonNullable<? extends HrisCreateEmployeeRequestDtoMaritalStatus> maritalStatus,
            @JsonProperty("avatar") JsonNullable<? extends HrisCreateEmployeeRequestDtoAvatar> avatar,
            @JsonProperty("hire_date") JsonNullable<OffsetDateTime> hireDate,
            @JsonProperty("start_date") JsonNullable<OffsetDateTime> startDate,
            @JsonProperty("employment_type") JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentType> employmentType,
            @JsonProperty("employment_contract_type") JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentContractType> employmentContractType,
            @JsonProperty("employment_status") JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentStatus> employmentStatus,
            @JsonProperty("termination_date") JsonNullable<OffsetDateTime> terminationDate,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("citizenships") JsonNullable<? extends List<CountryCodeEnum>> citizenships,
            @JsonProperty("employments") JsonNullable<? extends List<CreateEmploymentApiModel>> employments,
            @JsonProperty("employment") JsonNullable<? extends HrisCreateEmployeeRequestDtoEmployment> employment,
            @JsonProperty("custom_fields") JsonNullable<? extends List<CustomFields>> customFields,
            @JsonProperty("benefits") JsonNullable<? extends List<CreateHRISBenefit>> benefits,
            @JsonProperty("employee_number") JsonNullable<String> employeeNumber,
            @JsonProperty("national_identity_number") JsonNullable<? extends HrisCreateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber,
            @JsonProperty("national_identity_numbers") JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers,
            @JsonProperty("home_location") JsonNullable<? extends HrisCreateEmployeeRequestDtoHomeLocation> homeLocation,
            @JsonProperty("work_location") JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkLocation> workLocation,
            @JsonProperty("cost_centers") JsonNullable<? extends List<CreateCostCenterApiModel>> costCenters,
            @JsonProperty("passthrough") JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        Utils.checkNotNull(personalEmail, "personalEmail");
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        Utils.checkNotNull(workEmail, "workEmail");
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(jobTitle, "jobTitle");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(teamId, "teamId");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(managerId, "managerId");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        Utils.checkNotNull(ethnicity, "ethnicity");
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        Utils.checkNotNull(avatar, "avatar");
        Utils.checkNotNull(hireDate, "hireDate");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(employmentType, "employmentType");
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        Utils.checkNotNull(terminationDate, "terminationDate");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(citizenships, "citizenships");
        Utils.checkNotNull(employments, "employments");
        Utils.checkNotNull(employment, "employment");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(benefits, "benefits");
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        Utils.checkNotNull(homeLocation, "homeLocation");
        Utils.checkNotNull(workLocation, "workLocation");
        Utils.checkNotNull(costCenters, "costCenters");
        Utils.checkNotNull(passthrough, "passthrough");
        this.firstName = firstName;
        this.lastName = lastName;
        this.name = name;
        this.displayName = displayName;
        this.avatarUrl = avatarUrl;
        this.personalEmail = personalEmail;
        this.personalPhoneNumber = personalPhoneNumber;
        this.workEmail = workEmail;
        this.workPhoneNumber = workPhoneNumber;
        this.jobId = jobId;
        this.jobTitle = jobTitle;
        this.departmentId = departmentId;
        this.teamId = teamId;
        this.department = department;
        this.managerId = managerId;
        this.gender = gender;
        this.preferredLanguage = preferredLanguage;
        this.ethnicity = ethnicity;
        this.dateOfBirth = dateOfBirth;
        this.birthday = birthday;
        this.maritalStatus = maritalStatus;
        this.avatar = avatar;
        this.hireDate = hireDate;
        this.startDate = startDate;
        this.employmentType = employmentType;
        this.employmentContractType = employmentContractType;
        this.employmentStatus = employmentStatus;
        this.terminationDate = terminationDate;
        this.companyName = companyName;
        this.companyId = companyId;
        this.citizenships = citizenships;
        this.employments = employments;
        this.employment = employment;
        this.customFields = customFields;
        this.benefits = benefits;
        this.employeeNumber = employeeNumber;
        this.nationalIdentityNumber = nationalIdentityNumber;
        this.nationalIdentityNumbers = nationalIdentityNumbers;
        this.homeLocation = homeLocation;
        this.workLocation = workLocation;
        this.costCenters = costCenters;
        this.passthrough = passthrough;
    }
    
    public HrisCreateEmployeeRequestDto() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The employee first name
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The employee last name
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The employee name
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The employee display name
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The employee avatar Url
     */
    @JsonIgnore
    public JsonNullable<String> avatarUrl() {
        return avatarUrl;
    }

    /**
     * The employee personal email
     */
    @JsonIgnore
    public JsonNullable<String> personalEmail() {
        return personalEmail;
    }

    /**
     * The employee personal phone number
     */
    @JsonIgnore
    public JsonNullable<String> personalPhoneNumber() {
        return personalPhoneNumber;
    }

    /**
     * The employee work email
     */
    @JsonIgnore
    public JsonNullable<String> workEmail() {
        return workEmail;
    }

    /**
     * The employee work phone number
     */
    @JsonIgnore
    public JsonNullable<String> workPhoneNumber() {
        return workPhoneNumber;
    }

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> jobId() {
        return jobId;
    }

    /**
     * If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written
     */
    @JsonIgnore
    public JsonNullable<String> jobTitle() {
        return jobTitle;
    }

    /**
     * The employee department id
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * The employee team id
     */
    @JsonIgnore
    public JsonNullable<String> teamId() {
        return teamId;
    }

    /**
     * The employee department
     */
    @JsonIgnore
    public JsonNullable<String> department() {
        return department;
    }

    /**
     * The employee manager ID
     */
    @JsonIgnore
    public JsonNullable<String> managerId() {
        return managerId;
    }

    /**
     * The employee gender
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoGender> gender() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoGender>) gender;
    }

    /**
     * The employee preferred language
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoPreferredLanguage> preferredLanguage() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoPreferredLanguage>) preferredLanguage;
    }

    /**
     * The employee ethnicity
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoEthnicity> ethnicity() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoEthnicity>) ethnicity;
    }

    /**
     * The employee date_of_birth
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> dateOfBirth() {
        return dateOfBirth;
    }

    /**
     * The employee birthday
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> birthday() {
        return birthday;
    }

    /**
     * The employee marital status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoMaritalStatus> maritalStatus() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoMaritalStatus>) maritalStatus;
    }

    /**
     * The employee avatar
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoAvatar> avatar() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoAvatar>) avatar;
    }

    /**
     * The employee hire date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> hireDate() {
        return hireDate;
    }

    /**
     * The employee start date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoEmploymentType> employmentType() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoEmploymentType>) employmentType;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoEmploymentContractType> employmentContractType() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoEmploymentContractType>) employmentContractType;
    }

    /**
     * The employee employment status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoEmploymentStatus> employmentStatus() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoEmploymentStatus>) employmentStatus;
    }

    /**
     * The employee termination date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> terminationDate() {
        return terminationDate;
    }

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The employee company id
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The citizenships of the Employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CountryCodeEnum>> citizenships() {
        return (JsonNullable<List<CountryCodeEnum>>) citizenships;
    }

    /**
     * The employee employments
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateEmploymentApiModel>> employments() {
        return (JsonNullable<List<CreateEmploymentApiModel>>) employments;
    }

    /**
     * The employee employment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoEmployment> employment() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoEmployment>) employment;
    }

    /**
     * The employee custom fields
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CustomFields>> customFields() {
        return (JsonNullable<List<CustomFields>>) customFields;
    }

    /**
     * Current benefits of the employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateHRISBenefit>> benefits() {
        return (JsonNullable<List<CreateHRISBenefit>>) benefits;
    }

    /**
     * The assigned employee number
     */
    @JsonIgnore
    public JsonNullable<String> employeeNumber() {
        return employeeNumber;
    }

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoNationalIdentityNumber>) nationalIdentityNumber;
    }

    /**
     * The national identity numbers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<NationalIdentityNumberApiModel>> nationalIdentityNumbers() {
        return (JsonNullable<List<NationalIdentityNumberApiModel>>) nationalIdentityNumbers;
    }

    /**
     * The employee home location
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoHomeLocation> homeLocation() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoHomeLocation>) homeLocation;
    }

    /**
     * The employee work location
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoWorkLocation> workLocation() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoWorkLocation>) workLocation;
    }

    /**
     * The employee cost centers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateCostCenterApiModel>> costCenters() {
        return (JsonNullable<List<CreateCostCenterApiModel>>) costCenters;
    }

    /**
     * Value to pass through to the provider
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> passthrough() {
        return (JsonNullable<Map<String, Object>>) passthrough;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The employee first name
     */
    public HrisCreateEmployeeRequestDto withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The employee first name
     */
    public HrisCreateEmployeeRequestDto withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The employee last name
     */
    public HrisCreateEmployeeRequestDto withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The employee last name
     */
    public HrisCreateEmployeeRequestDto withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The employee name
     */
    public HrisCreateEmployeeRequestDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The employee name
     */
    public HrisCreateEmployeeRequestDto withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The employee display name
     */
    public HrisCreateEmployeeRequestDto withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The employee display name
     */
    public HrisCreateEmployeeRequestDto withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The employee avatar Url
     */
    public HrisCreateEmployeeRequestDto withAvatarUrl(String avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = JsonNullable.of(avatarUrl);
        return this;
    }

    /**
     * The employee avatar Url
     */
    public HrisCreateEmployeeRequestDto withAvatarUrl(JsonNullable<String> avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = avatarUrl;
        return this;
    }

    /**
     * The employee personal email
     */
    public HrisCreateEmployeeRequestDto withPersonalEmail(String personalEmail) {
        Utils.checkNotNull(personalEmail, "personalEmail");
        this.personalEmail = JsonNullable.of(personalEmail);
        return this;
    }

    /**
     * The employee personal email
     */
    public HrisCreateEmployeeRequestDto withPersonalEmail(JsonNullable<String> personalEmail) {
        Utils.checkNotNull(personalEmail, "personalEmail");
        this.personalEmail = personalEmail;
        return this;
    }

    /**
     * The employee personal phone number
     */
    public HrisCreateEmployeeRequestDto withPersonalPhoneNumber(String personalPhoneNumber) {
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        this.personalPhoneNumber = JsonNullable.of(personalPhoneNumber);
        return this;
    }

    /**
     * The employee personal phone number
     */
    public HrisCreateEmployeeRequestDto withPersonalPhoneNumber(JsonNullable<String> personalPhoneNumber) {
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        this.personalPhoneNumber = personalPhoneNumber;
        return this;
    }

    /**
     * The employee work email
     */
    public HrisCreateEmployeeRequestDto withWorkEmail(String workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = JsonNullable.of(workEmail);
        return this;
    }

    /**
     * The employee work email
     */
    public HrisCreateEmployeeRequestDto withWorkEmail(JsonNullable<String> workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = workEmail;
        return this;
    }

    /**
     * The employee work phone number
     */
    public HrisCreateEmployeeRequestDto withWorkPhoneNumber(String workPhoneNumber) {
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        this.workPhoneNumber = JsonNullable.of(workPhoneNumber);
        return this;
    }

    /**
     * The employee work phone number
     */
    public HrisCreateEmployeeRequestDto withWorkPhoneNumber(JsonNullable<String> workPhoneNumber) {
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        this.workPhoneNumber = workPhoneNumber;
        return this;
    }

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = JsonNullable.of(jobId);
        return this;
    }

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withJobId(JsonNullable<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    /**
     * If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written
     */
    public HrisCreateEmployeeRequestDto withJobTitle(String jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = JsonNullable.of(jobTitle);
        return this;
    }

    /**
     * If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written
     */
    public HrisCreateEmployeeRequestDto withJobTitle(JsonNullable<String> jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = jobTitle;
        return this;
    }

    /**
     * The employee department id
     */
    public HrisCreateEmployeeRequestDto withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The employee department id
     */
    public HrisCreateEmployeeRequestDto withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * The employee team id
     */
    public HrisCreateEmployeeRequestDto withTeamId(String teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = JsonNullable.of(teamId);
        return this;
    }

    /**
     * The employee team id
     */
    public HrisCreateEmployeeRequestDto withTeamId(JsonNullable<String> teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = teamId;
        return this;
    }

    /**
     * The employee department
     */
    public HrisCreateEmployeeRequestDto withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * The employee department
     */
    public HrisCreateEmployeeRequestDto withDepartment(JsonNullable<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * The employee manager ID
     */
    public HrisCreateEmployeeRequestDto withManagerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = JsonNullable.of(managerId);
        return this;
    }

    /**
     * The employee manager ID
     */
    public HrisCreateEmployeeRequestDto withManagerId(JsonNullable<String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }

    /**
     * The employee gender
     */
    public HrisCreateEmployeeRequestDto withGender(HrisCreateEmployeeRequestDtoGender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = JsonNullable.of(gender);
        return this;
    }

    /**
     * The employee gender
     */
    public HrisCreateEmployeeRequestDto withGender(JsonNullable<? extends HrisCreateEmployeeRequestDtoGender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    /**
     * The employee preferred language
     */
    public HrisCreateEmployeeRequestDto withPreferredLanguage(HrisCreateEmployeeRequestDtoPreferredLanguage preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = JsonNullable.of(preferredLanguage);
        return this;
    }

    /**
     * The employee preferred language
     */
    public HrisCreateEmployeeRequestDto withPreferredLanguage(JsonNullable<? extends HrisCreateEmployeeRequestDtoPreferredLanguage> preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = preferredLanguage;
        return this;
    }

    /**
     * The employee ethnicity
     */
    public HrisCreateEmployeeRequestDto withEthnicity(HrisCreateEmployeeRequestDtoEthnicity ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = JsonNullable.of(ethnicity);
        return this;
    }

    /**
     * The employee ethnicity
     */
    public HrisCreateEmployeeRequestDto withEthnicity(JsonNullable<? extends HrisCreateEmployeeRequestDtoEthnicity> ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = ethnicity;
        return this;
    }

    /**
     * The employee date_of_birth
     */
    public HrisCreateEmployeeRequestDto withDateOfBirth(OffsetDateTime dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = JsonNullable.of(dateOfBirth);
        return this;
    }

    /**
     * The employee date_of_birth
     */
    public HrisCreateEmployeeRequestDto withDateOfBirth(JsonNullable<OffsetDateTime> dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = dateOfBirth;
        return this;
    }

    /**
     * The employee birthday
     */
    public HrisCreateEmployeeRequestDto withBirthday(OffsetDateTime birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The employee birthday
     */
    public HrisCreateEmployeeRequestDto withBirthday(JsonNullable<OffsetDateTime> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * The employee marital status
     */
    public HrisCreateEmployeeRequestDto withMaritalStatus(HrisCreateEmployeeRequestDtoMaritalStatus maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = JsonNullable.of(maritalStatus);
        return this;
    }

    /**
     * The employee marital status
     */
    public HrisCreateEmployeeRequestDto withMaritalStatus(JsonNullable<? extends HrisCreateEmployeeRequestDtoMaritalStatus> maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = maritalStatus;
        return this;
    }

    /**
     * The employee avatar
     */
    public HrisCreateEmployeeRequestDto withAvatar(HrisCreateEmployeeRequestDtoAvatar avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = JsonNullable.of(avatar);
        return this;
    }

    /**
     * The employee avatar
     */
    public HrisCreateEmployeeRequestDto withAvatar(JsonNullable<? extends HrisCreateEmployeeRequestDtoAvatar> avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = avatar;
        return this;
    }

    /**
     * The employee hire date
     */
    public HrisCreateEmployeeRequestDto withHireDate(OffsetDateTime hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = JsonNullable.of(hireDate);
        return this;
    }

    /**
     * The employee hire date
     */
    public HrisCreateEmployeeRequestDto withHireDate(JsonNullable<OffsetDateTime> hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = hireDate;
        return this;
    }

    /**
     * The employee start date
     */
    public HrisCreateEmployeeRequestDto withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * The employee start date
     */
    public HrisCreateEmployeeRequestDto withStartDate(JsonNullable<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withEmploymentType(HrisCreateEmployeeRequestDtoEmploymentType employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = JsonNullable.of(employmentType);
        return this;
    }

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withEmploymentType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentType> employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = employmentType;
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withEmploymentContractType(HrisCreateEmployeeRequestDtoEmploymentContractType employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = JsonNullable.of(employmentContractType);
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withEmploymentContractType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentContractType> employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = employmentContractType;
        return this;
    }

    /**
     * The employee employment status
     */
    public HrisCreateEmployeeRequestDto withEmploymentStatus(HrisCreateEmployeeRequestDtoEmploymentStatus employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = JsonNullable.of(employmentStatus);
        return this;
    }

    /**
     * The employee employment status
     */
    public HrisCreateEmployeeRequestDto withEmploymentStatus(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentStatus> employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = employmentStatus;
        return this;
    }

    /**
     * The employee termination date
     */
    public HrisCreateEmployeeRequestDto withTerminationDate(OffsetDateTime terminationDate) {
        Utils.checkNotNull(terminationDate, "terminationDate");
        this.terminationDate = JsonNullable.of(terminationDate);
        return this;
    }

    /**
     * The employee termination date
     */
    public HrisCreateEmployeeRequestDto withTerminationDate(JsonNullable<OffsetDateTime> terminationDate) {
        Utils.checkNotNull(terminationDate, "terminationDate");
        this.terminationDate = terminationDate;
        return this;
    }

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The employee company id
     */
    public HrisCreateEmployeeRequestDto withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The employee company id
     */
    public HrisCreateEmployeeRequestDto withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The citizenships of the Employee
     */
    public HrisCreateEmployeeRequestDto withCitizenships(List<CountryCodeEnum> citizenships) {
        Utils.checkNotNull(citizenships, "citizenships");
        this.citizenships = JsonNullable.of(citizenships);
        return this;
    }

    /**
     * The citizenships of the Employee
     */
    public HrisCreateEmployeeRequestDto withCitizenships(JsonNullable<? extends List<CountryCodeEnum>> citizenships) {
        Utils.checkNotNull(citizenships, "citizenships");
        this.citizenships = citizenships;
        return this;
    }

    /**
     * The employee employments
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withEmployments(List<CreateEmploymentApiModel> employments) {
        Utils.checkNotNull(employments, "employments");
        this.employments = JsonNullable.of(employments);
        return this;
    }

    /**
     * The employee employments
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withEmployments(JsonNullable<? extends List<CreateEmploymentApiModel>> employments) {
        Utils.checkNotNull(employments, "employments");
        this.employments = employments;
        return this;
    }

    /**
     * The employee employment
     */
    public HrisCreateEmployeeRequestDto withEmployment(HrisCreateEmployeeRequestDtoEmployment employment) {
        Utils.checkNotNull(employment, "employment");
        this.employment = JsonNullable.of(employment);
        return this;
    }

    /**
     * The employee employment
     */
    public HrisCreateEmployeeRequestDto withEmployment(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmployment> employment) {
        Utils.checkNotNull(employment, "employment");
        this.employment = employment;
        return this;
    }

    /**
     * The employee custom fields
     */
    public HrisCreateEmployeeRequestDto withCustomFields(List<CustomFields> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = JsonNullable.of(customFields);
        return this;
    }

    /**
     * The employee custom fields
     */
    public HrisCreateEmployeeRequestDto withCustomFields(JsonNullable<? extends List<CustomFields>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * Current benefits of the employee
     */
    public HrisCreateEmployeeRequestDto withBenefits(List<CreateHRISBenefit> benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = JsonNullable.of(benefits);
        return this;
    }

    /**
     * Current benefits of the employee
     */
    public HrisCreateEmployeeRequestDto withBenefits(JsonNullable<? extends List<CreateHRISBenefit>> benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = benefits;
        return this;
    }

    /**
     * The assigned employee number
     */
    public HrisCreateEmployeeRequestDto withEmployeeNumber(String employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = JsonNullable.of(employeeNumber);
        return this;
    }

    /**
     * The assigned employee number
     */
    public HrisCreateEmployeeRequestDto withEmployeeNumber(JsonNullable<String> employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = employeeNumber;
        return this;
    }

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withNationalIdentityNumber(HrisCreateEmployeeRequestDtoNationalIdentityNumber nationalIdentityNumber) {
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        this.nationalIdentityNumber = JsonNullable.of(nationalIdentityNumber);
        return this;
    }

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDto withNationalIdentityNumber(JsonNullable<? extends HrisCreateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber) {
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        this.nationalIdentityNumber = nationalIdentityNumber;
        return this;
    }

    /**
     * The national identity numbers
     */
    public HrisCreateEmployeeRequestDto withNationalIdentityNumbers(List<NationalIdentityNumberApiModel> nationalIdentityNumbers) {
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        this.nationalIdentityNumbers = JsonNullable.of(nationalIdentityNumbers);
        return this;
    }

    /**
     * The national identity numbers
     */
    public HrisCreateEmployeeRequestDto withNationalIdentityNumbers(JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers) {
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        this.nationalIdentityNumbers = nationalIdentityNumbers;
        return this;
    }

    /**
     * The employee home location
     */
    public HrisCreateEmployeeRequestDto withHomeLocation(HrisCreateEmployeeRequestDtoHomeLocation homeLocation) {
        Utils.checkNotNull(homeLocation, "homeLocation");
        this.homeLocation = JsonNullable.of(homeLocation);
        return this;
    }

    /**
     * The employee home location
     */
    public HrisCreateEmployeeRequestDto withHomeLocation(JsonNullable<? extends HrisCreateEmployeeRequestDtoHomeLocation> homeLocation) {
        Utils.checkNotNull(homeLocation, "homeLocation");
        this.homeLocation = homeLocation;
        return this;
    }

    /**
     * The employee work location
     */
    public HrisCreateEmployeeRequestDto withWorkLocation(HrisCreateEmployeeRequestDtoWorkLocation workLocation) {
        Utils.checkNotNull(workLocation, "workLocation");
        this.workLocation = JsonNullable.of(workLocation);
        return this;
    }

    /**
     * The employee work location
     */
    public HrisCreateEmployeeRequestDto withWorkLocation(JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkLocation> workLocation) {
        Utils.checkNotNull(workLocation, "workLocation");
        this.workLocation = workLocation;
        return this;
    }

    /**
     * The employee cost centers
     */
    public HrisCreateEmployeeRequestDto withCostCenters(List<CreateCostCenterApiModel> costCenters) {
        Utils.checkNotNull(costCenters, "costCenters");
        this.costCenters = JsonNullable.of(costCenters);
        return this;
    }

    /**
     * The employee cost centers
     */
    public HrisCreateEmployeeRequestDto withCostCenters(JsonNullable<? extends List<CreateCostCenterApiModel>> costCenters) {
        Utils.checkNotNull(costCenters, "costCenters");
        this.costCenters = costCenters;
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisCreateEmployeeRequestDto withPassthrough(Map<String, Object> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = JsonNullable.of(passthrough);
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisCreateEmployeeRequestDto withPassthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = passthrough;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisCreateEmployeeRequestDto other = (HrisCreateEmployeeRequestDto) o;
        return 
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.avatarUrl, other.avatarUrl) &&
            Objects.deepEquals(this.personalEmail, other.personalEmail) &&
            Objects.deepEquals(this.personalPhoneNumber, other.personalPhoneNumber) &&
            Objects.deepEquals(this.workEmail, other.workEmail) &&
            Objects.deepEquals(this.workPhoneNumber, other.workPhoneNumber) &&
            Objects.deepEquals(this.jobId, other.jobId) &&
            Objects.deepEquals(this.jobTitle, other.jobTitle) &&
            Objects.deepEquals(this.departmentId, other.departmentId) &&
            Objects.deepEquals(this.teamId, other.teamId) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.managerId, other.managerId) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.preferredLanguage, other.preferredLanguage) &&
            Objects.deepEquals(this.ethnicity, other.ethnicity) &&
            Objects.deepEquals(this.dateOfBirth, other.dateOfBirth) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.maritalStatus, other.maritalStatus) &&
            Objects.deepEquals(this.avatar, other.avatar) &&
            Objects.deepEquals(this.hireDate, other.hireDate) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.employmentType, other.employmentType) &&
            Objects.deepEquals(this.employmentContractType, other.employmentContractType) &&
            Objects.deepEquals(this.employmentStatus, other.employmentStatus) &&
            Objects.deepEquals(this.terminationDate, other.terminationDate) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.citizenships, other.citizenships) &&
            Objects.deepEquals(this.employments, other.employments) &&
            Objects.deepEquals(this.employment, other.employment) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.benefits, other.benefits) &&
            Objects.deepEquals(this.employeeNumber, other.employeeNumber) &&
            Objects.deepEquals(this.nationalIdentityNumber, other.nationalIdentityNumber) &&
            Objects.deepEquals(this.nationalIdentityNumbers, other.nationalIdentityNumbers) &&
            Objects.deepEquals(this.homeLocation, other.homeLocation) &&
            Objects.deepEquals(this.workLocation, other.workLocation) &&
            Objects.deepEquals(this.costCenters, other.costCenters) &&
            Objects.deepEquals(this.passthrough, other.passthrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            firstName,
            lastName,
            name,
            displayName,
            avatarUrl,
            personalEmail,
            personalPhoneNumber,
            workEmail,
            workPhoneNumber,
            jobId,
            jobTitle,
            departmentId,
            teamId,
            department,
            managerId,
            gender,
            preferredLanguage,
            ethnicity,
            dateOfBirth,
            birthday,
            maritalStatus,
            avatar,
            hireDate,
            startDate,
            employmentType,
            employmentContractType,
            employmentStatus,
            terminationDate,
            companyName,
            companyId,
            citizenships,
            employments,
            employment,
            customFields,
            benefits,
            employeeNumber,
            nationalIdentityNumber,
            nationalIdentityNumbers,
            homeLocation,
            workLocation,
            costCenters,
            passthrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisCreateEmployeeRequestDto.class,
                "firstName", firstName,
                "lastName", lastName,
                "name", name,
                "displayName", displayName,
                "avatarUrl", avatarUrl,
                "personalEmail", personalEmail,
                "personalPhoneNumber", personalPhoneNumber,
                "workEmail", workEmail,
                "workPhoneNumber", workPhoneNumber,
                "jobId", jobId,
                "jobTitle", jobTitle,
                "departmentId", departmentId,
                "teamId", teamId,
                "department", department,
                "managerId", managerId,
                "gender", gender,
                "preferredLanguage", preferredLanguage,
                "ethnicity", ethnicity,
                "dateOfBirth", dateOfBirth,
                "birthday", birthday,
                "maritalStatus", maritalStatus,
                "avatar", avatar,
                "hireDate", hireDate,
                "startDate", startDate,
                "employmentType", employmentType,
                "employmentContractType", employmentContractType,
                "employmentStatus", employmentStatus,
                "terminationDate", terminationDate,
                "companyName", companyName,
                "companyId", companyId,
                "citizenships", citizenships,
                "employments", employments,
                "employment", employment,
                "customFields", customFields,
                "benefits", benefits,
                "employeeNumber", employeeNumber,
                "nationalIdentityNumber", nationalIdentityNumber,
                "nationalIdentityNumbers", nationalIdentityNumbers,
                "homeLocation", homeLocation,
                "workLocation", workLocation,
                "costCenters", costCenters,
                "passthrough", passthrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> displayName = JsonNullable.undefined();
 
        private JsonNullable<String> avatarUrl = JsonNullable.undefined();
 
        private JsonNullable<String> personalEmail = JsonNullable.undefined();
 
        private JsonNullable<String> personalPhoneNumber = JsonNullable.undefined();
 
        private JsonNullable<String> workEmail = JsonNullable.undefined();
 
        private JsonNullable<String> workPhoneNumber = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> jobId = JsonNullable.undefined();
 
        private JsonNullable<String> jobTitle = JsonNullable.undefined();
 
        private JsonNullable<String> departmentId = JsonNullable.undefined();
 
        private JsonNullable<String> teamId = JsonNullable.undefined();
 
        private JsonNullable<String> department = JsonNullable.undefined();
 
        private JsonNullable<String> managerId = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoGender> gender = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoPreferredLanguage> preferredLanguage = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoEthnicity> ethnicity = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> dateOfBirth = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> birthday = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoMaritalStatus> maritalStatus = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoAvatar> avatar = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> hireDate = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> startDate = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentType> employmentType = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentContractType> employmentContractType = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentStatus> employmentStatus = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> terminationDate = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CountryCodeEnum>> citizenships = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends List<CreateEmploymentApiModel>> employments = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmployment> employment = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CustomFields>> customFields = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CreateHRISBenefit>> benefits = JsonNullable.undefined();
 
        private JsonNullable<String> employeeNumber = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoHomeLocation> homeLocation = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkLocation> workLocation = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CreateCostCenterApiModel>> costCenters = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> passthrough = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The employee first name
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The employee first name
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The employee last name
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The employee last name
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The employee name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The employee name
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The employee display name
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The employee display name
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The employee avatar Url
         */
        public Builder avatarUrl(String avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = JsonNullable.of(avatarUrl);
            return this;
        }

        /**
         * The employee avatar Url
         */
        public Builder avatarUrl(JsonNullable<String> avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * The employee personal email
         */
        public Builder personalEmail(String personalEmail) {
            Utils.checkNotNull(personalEmail, "personalEmail");
            this.personalEmail = JsonNullable.of(personalEmail);
            return this;
        }

        /**
         * The employee personal email
         */
        public Builder personalEmail(JsonNullable<String> personalEmail) {
            Utils.checkNotNull(personalEmail, "personalEmail");
            this.personalEmail = personalEmail;
            return this;
        }

        /**
         * The employee personal phone number
         */
        public Builder personalPhoneNumber(String personalPhoneNumber) {
            Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
            this.personalPhoneNumber = JsonNullable.of(personalPhoneNumber);
            return this;
        }

        /**
         * The employee personal phone number
         */
        public Builder personalPhoneNumber(JsonNullable<String> personalPhoneNumber) {
            Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
            this.personalPhoneNumber = personalPhoneNumber;
            return this;
        }

        /**
         * The employee work email
         */
        public Builder workEmail(String workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = JsonNullable.of(workEmail);
            return this;
        }

        /**
         * The employee work email
         */
        public Builder workEmail(JsonNullable<String> workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = workEmail;
            return this;
        }

        /**
         * The employee work phone number
         */
        public Builder workPhoneNumber(String workPhoneNumber) {
            Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
            this.workPhoneNumber = JsonNullable.of(workPhoneNumber);
            return this;
        }

        /**
         * The employee work phone number
         */
        public Builder workPhoneNumber(JsonNullable<String> workPhoneNumber) {
            Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
            this.workPhoneNumber = workPhoneNumber;
            return this;
        }

        /**
         * The employee job id
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = JsonNullable.of(jobId);
            return this;
        }

        /**
         * The employee job id
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobId(JsonNullable<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        /**
         * If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written
         */
        public Builder jobTitle(String jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = JsonNullable.of(jobTitle);
            return this;
        }

        /**
         * If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written
         */
        public Builder jobTitle(JsonNullable<String> jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = jobTitle;
            return this;
        }

        /**
         * The employee department id
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The employee department id
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }

        /**
         * The employee team id
         */
        public Builder teamId(String teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = JsonNullable.of(teamId);
            return this;
        }

        /**
         * The employee team id
         */
        public Builder teamId(JsonNullable<String> teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = teamId;
            return this;
        }

        /**
         * The employee department
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The employee department
         */
        public Builder department(JsonNullable<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * The employee manager ID
         */
        public Builder managerId(String managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = JsonNullable.of(managerId);
            return this;
        }

        /**
         * The employee manager ID
         */
        public Builder managerId(JsonNullable<String> managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = managerId;
            return this;
        }

        /**
         * The employee gender
         */
        public Builder gender(HrisCreateEmployeeRequestDtoGender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The employee gender
         */
        public Builder gender(JsonNullable<? extends HrisCreateEmployeeRequestDtoGender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        /**
         * The employee preferred language
         */
        public Builder preferredLanguage(HrisCreateEmployeeRequestDtoPreferredLanguage preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = JsonNullable.of(preferredLanguage);
            return this;
        }

        /**
         * The employee preferred language
         */
        public Builder preferredLanguage(JsonNullable<? extends HrisCreateEmployeeRequestDtoPreferredLanguage> preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = preferredLanguage;
            return this;
        }

        /**
         * The employee ethnicity
         */
        public Builder ethnicity(HrisCreateEmployeeRequestDtoEthnicity ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = JsonNullable.of(ethnicity);
            return this;
        }

        /**
         * The employee ethnicity
         */
        public Builder ethnicity(JsonNullable<? extends HrisCreateEmployeeRequestDtoEthnicity> ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = ethnicity;
            return this;
        }

        /**
         * The employee date_of_birth
         */
        public Builder dateOfBirth(OffsetDateTime dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = JsonNullable.of(dateOfBirth);
            return this;
        }

        /**
         * The employee date_of_birth
         */
        public Builder dateOfBirth(JsonNullable<OffsetDateTime> dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        /**
         * The employee birthday
         */
        public Builder birthday(OffsetDateTime birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The employee birthday
         */
        public Builder birthday(JsonNullable<OffsetDateTime> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        /**
         * The employee marital status
         */
        public Builder maritalStatus(HrisCreateEmployeeRequestDtoMaritalStatus maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = JsonNullable.of(maritalStatus);
            return this;
        }

        /**
         * The employee marital status
         */
        public Builder maritalStatus(JsonNullable<? extends HrisCreateEmployeeRequestDtoMaritalStatus> maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = maritalStatus;
            return this;
        }

        /**
         * The employee avatar
         */
        public Builder avatar(HrisCreateEmployeeRequestDtoAvatar avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = JsonNullable.of(avatar);
            return this;
        }

        /**
         * The employee avatar
         */
        public Builder avatar(JsonNullable<? extends HrisCreateEmployeeRequestDtoAvatar> avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = avatar;
            return this;
        }

        /**
         * The employee hire date
         */
        public Builder hireDate(OffsetDateTime hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = JsonNullable.of(hireDate);
            return this;
        }

        /**
         * The employee hire date
         */
        public Builder hireDate(JsonNullable<OffsetDateTime> hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = hireDate;
            return this;
        }

        /**
         * The employee start date
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The employee start date
         */
        public Builder startDate(JsonNullable<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The employee employment type
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(HrisCreateEmployeeRequestDtoEmploymentType employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = JsonNullable.of(employmentType);
            return this;
        }

        /**
         * The employee employment type
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentType> employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = employmentType;
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(HrisCreateEmployeeRequestDtoEmploymentContractType employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = JsonNullable.of(employmentContractType);
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentContractType> employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = employmentContractType;
            return this;
        }

        /**
         * The employee employment status
         */
        public Builder employmentStatus(HrisCreateEmployeeRequestDtoEmploymentStatus employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = JsonNullable.of(employmentStatus);
            return this;
        }

        /**
         * The employee employment status
         */
        public Builder employmentStatus(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentStatus> employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = employmentStatus;
            return this;
        }

        /**
         * The employee termination date
         */
        public Builder terminationDate(OffsetDateTime terminationDate) {
            Utils.checkNotNull(terminationDate, "terminationDate");
            this.terminationDate = JsonNullable.of(terminationDate);
            return this;
        }

        /**
         * The employee termination date
         */
        public Builder terminationDate(JsonNullable<OffsetDateTime> terminationDate) {
            Utils.checkNotNull(terminationDate, "terminationDate");
            this.terminationDate = terminationDate;
            return this;
        }

        /**
         * The employee company name
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The employee company name
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * The employee company id
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The employee company id
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * The citizenships of the Employee
         */
        public Builder citizenships(List<CountryCodeEnum> citizenships) {
            Utils.checkNotNull(citizenships, "citizenships");
            this.citizenships = JsonNullable.of(citizenships);
            return this;
        }

        /**
         * The citizenships of the Employee
         */
        public Builder citizenships(JsonNullable<? extends List<CountryCodeEnum>> citizenships) {
            Utils.checkNotNull(citizenships, "citizenships");
            this.citizenships = citizenships;
            return this;
        }

        /**
         * The employee employments
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employments(List<CreateEmploymentApiModel> employments) {
            Utils.checkNotNull(employments, "employments");
            this.employments = JsonNullable.of(employments);
            return this;
        }

        /**
         * The employee employments
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employments(JsonNullable<? extends List<CreateEmploymentApiModel>> employments) {
            Utils.checkNotNull(employments, "employments");
            this.employments = employments;
            return this;
        }

        /**
         * The employee employment
         */
        public Builder employment(HrisCreateEmployeeRequestDtoEmployment employment) {
            Utils.checkNotNull(employment, "employment");
            this.employment = JsonNullable.of(employment);
            return this;
        }

        /**
         * The employee employment
         */
        public Builder employment(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmployment> employment) {
            Utils.checkNotNull(employment, "employment");
            this.employment = employment;
            return this;
        }

        /**
         * The employee custom fields
         */
        public Builder customFields(List<CustomFields> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        /**
         * The employee custom fields
         */
        public Builder customFields(JsonNullable<? extends List<CustomFields>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * Current benefits of the employee
         */
        public Builder benefits(List<CreateHRISBenefit> benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = JsonNullable.of(benefits);
            return this;
        }

        /**
         * Current benefits of the employee
         */
        public Builder benefits(JsonNullable<? extends List<CreateHRISBenefit>> benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = benefits;
            return this;
        }

        /**
         * The assigned employee number
         */
        public Builder employeeNumber(String employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = JsonNullable.of(employeeNumber);
            return this;
        }

        /**
         * The assigned employee number
         */
        public Builder employeeNumber(JsonNullable<String> employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = employeeNumber;
            return this;
        }

        /**
         * The national identity number
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nationalIdentityNumber(HrisCreateEmployeeRequestDtoNationalIdentityNumber nationalIdentityNumber) {
            Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
            this.nationalIdentityNumber = JsonNullable.of(nationalIdentityNumber);
            return this;
        }

        /**
         * The national identity number
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nationalIdentityNumber(JsonNullable<? extends HrisCreateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber) {
            Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
            this.nationalIdentityNumber = nationalIdentityNumber;
            return this;
        }

        /**
         * The national identity numbers
         */
        public Builder nationalIdentityNumbers(List<NationalIdentityNumberApiModel> nationalIdentityNumbers) {
            Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
            this.nationalIdentityNumbers = JsonNullable.of(nationalIdentityNumbers);
            return this;
        }

        /**
         * The national identity numbers
         */
        public Builder nationalIdentityNumbers(JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers) {
            Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
            this.nationalIdentityNumbers = nationalIdentityNumbers;
            return this;
        }

        /**
         * The employee home location
         */
        public Builder homeLocation(HrisCreateEmployeeRequestDtoHomeLocation homeLocation) {
            Utils.checkNotNull(homeLocation, "homeLocation");
            this.homeLocation = JsonNullable.of(homeLocation);
            return this;
        }

        /**
         * The employee home location
         */
        public Builder homeLocation(JsonNullable<? extends HrisCreateEmployeeRequestDtoHomeLocation> homeLocation) {
            Utils.checkNotNull(homeLocation, "homeLocation");
            this.homeLocation = homeLocation;
            return this;
        }

        /**
         * The employee work location
         */
        public Builder workLocation(HrisCreateEmployeeRequestDtoWorkLocation workLocation) {
            Utils.checkNotNull(workLocation, "workLocation");
            this.workLocation = JsonNullable.of(workLocation);
            return this;
        }

        /**
         * The employee work location
         */
        public Builder workLocation(JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkLocation> workLocation) {
            Utils.checkNotNull(workLocation, "workLocation");
            this.workLocation = workLocation;
            return this;
        }

        /**
         * The employee cost centers
         */
        public Builder costCenters(List<CreateCostCenterApiModel> costCenters) {
            Utils.checkNotNull(costCenters, "costCenters");
            this.costCenters = JsonNullable.of(costCenters);
            return this;
        }

        /**
         * The employee cost centers
         */
        public Builder costCenters(JsonNullable<? extends List<CreateCostCenterApiModel>> costCenters) {
            Utils.checkNotNull(costCenters, "costCenters");
            this.costCenters = costCenters;
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(Map<String, Object> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = JsonNullable.of(passthrough);
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = passthrough;
            return this;
        }
        
        public HrisCreateEmployeeRequestDto build() {
            return new HrisCreateEmployeeRequestDto(
                firstName,
                lastName,
                name,
                displayName,
                avatarUrl,
                personalEmail,
                personalPhoneNumber,
                workEmail,
                workPhoneNumber,
                jobId,
                jobTitle,
                departmentId,
                teamId,
                department,
                managerId,
                gender,
                preferredLanguage,
                ethnicity,
                dateOfBirth,
                birthday,
                maritalStatus,
                avatar,
                hireDate,
                startDate,
                employmentType,
                employmentContractType,
                employmentStatus,
                terminationDate,
                companyName,
                companyId,
                citizenships,
                employments,
                employment,
                customFields,
                benefits,
                employeeNumber,
                nationalIdentityNumber,
                nationalIdentityNumbers,
                homeLocation,
                workLocation,
                costCenters,
                passthrough);
        }
    }
}
