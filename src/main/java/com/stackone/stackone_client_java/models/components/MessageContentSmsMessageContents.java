/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;

public class MessageContentSmsMessageContents {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private JsonNullable<String> body;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private JsonNullable<String> from;

    @JsonCreator
    public MessageContentSmsMessageContents(
            @JsonProperty("body") JsonNullable<String> body,
            @JsonProperty("from") JsonNullable<String> from) {
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(from, "from");
        this.body = body;
        this.from = from;
    }
    
    public MessageContentSmsMessageContents() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> body() {
        return body;
    }

    @JsonIgnore
    public JsonNullable<String> from() {
        return from;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public MessageContentSmsMessageContents withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = JsonNullable.of(body);
        return this;
    }

    public MessageContentSmsMessageContents withBody(JsonNullable<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    public MessageContentSmsMessageContents withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = JsonNullable.of(from);
        return this;
    }

    public MessageContentSmsMessageContents withFrom(JsonNullable<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MessageContentSmsMessageContents other = (MessageContentSmsMessageContents) o;
        return 
            Utils.enhancedDeepEquals(this.body, other.body) &&
            Utils.enhancedDeepEquals(this.from, other.from);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            body,
            from);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MessageContentSmsMessageContents.class,
                "body", body,
                "from", from);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> body = JsonNullable.undefined();
 
        private JsonNullable<String> from = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = JsonNullable.of(body);
            return this;
        }

        public Builder body(JsonNullable<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = JsonNullable.of(from);
            return this;
        }

        public Builder from(JsonNullable<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }
        
        public MessageContentSmsMessageContents build() {
            return new MessageContentSmsMessageContents(
                body,
                from);
        }
    }
}
