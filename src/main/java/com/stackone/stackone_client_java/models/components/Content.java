/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.stackone.stackone_client_java.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class Content {

    /**
     * URL where the file content is located
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * Unified download URL for retrieving file content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_url")
    private JsonNullable<String> unifiedUrl;

    /**
     * The file format of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_format")
    private JsonNullable<? extends ContentFileFormat> fileFormat;

    @JsonCreator
    public Content(
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("unified_url") JsonNullable<String> unifiedUrl,
            @JsonProperty("file_format") JsonNullable<? extends ContentFileFormat> fileFormat) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(unifiedUrl, "unifiedUrl");
        Utils.checkNotNull(fileFormat, "fileFormat");
        this.url = url;
        this.unifiedUrl = unifiedUrl;
        this.fileFormat = fileFormat;
    }
    
    public Content() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * URL where the file content is located
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * Unified download URL for retrieving file content.
     */
    @JsonIgnore
    public JsonNullable<String> unifiedUrl() {
        return unifiedUrl;
    }

    /**
     * The file format of the file
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ContentFileFormat> fileFormat() {
        return (JsonNullable<ContentFileFormat>) fileFormat;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * URL where the file content is located
     */
    public Content withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * URL where the file content is located
     */
    public Content withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Unified download URL for retrieving file content.
     */
    public Content withUnifiedUrl(String unifiedUrl) {
        Utils.checkNotNull(unifiedUrl, "unifiedUrl");
        this.unifiedUrl = JsonNullable.of(unifiedUrl);
        return this;
    }

    /**
     * Unified download URL for retrieving file content.
     */
    public Content withUnifiedUrl(JsonNullable<String> unifiedUrl) {
        Utils.checkNotNull(unifiedUrl, "unifiedUrl");
        this.unifiedUrl = unifiedUrl;
        return this;
    }

    /**
     * The file format of the file
     */
    public Content withFileFormat(ContentFileFormat fileFormat) {
        Utils.checkNotNull(fileFormat, "fileFormat");
        this.fileFormat = JsonNullable.of(fileFormat);
        return this;
    }

    /**
     * The file format of the file
     */
    public Content withFileFormat(JsonNullable<? extends ContentFileFormat> fileFormat) {
        Utils.checkNotNull(fileFormat, "fileFormat");
        this.fileFormat = fileFormat;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Content other = (Content) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.unifiedUrl, other.unifiedUrl) &&
            Objects.deepEquals(this.fileFormat, other.fileFormat);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            unifiedUrl,
            fileFormat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Content.class,
                "url", url,
                "unifiedUrl", unifiedUrl,
                "fileFormat", fileFormat);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> url = JsonNullable.undefined();
 
        private JsonNullable<String> unifiedUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends ContentFileFormat> fileFormat = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL where the file content is located
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * URL where the file content is located
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Unified download URL for retrieving file content.
         */
        public Builder unifiedUrl(String unifiedUrl) {
            Utils.checkNotNull(unifiedUrl, "unifiedUrl");
            this.unifiedUrl = JsonNullable.of(unifiedUrl);
            return this;
        }

        /**
         * Unified download URL for retrieving file content.
         */
        public Builder unifiedUrl(JsonNullable<String> unifiedUrl) {
            Utils.checkNotNull(unifiedUrl, "unifiedUrl");
            this.unifiedUrl = unifiedUrl;
            return this;
        }

        /**
         * The file format of the file
         */
        public Builder fileFormat(ContentFileFormat fileFormat) {
            Utils.checkNotNull(fileFormat, "fileFormat");
            this.fileFormat = JsonNullable.of(fileFormat);
            return this;
        }

        /**
         * The file format of the file
         */
        public Builder fileFormat(JsonNullable<? extends ContentFileFormat> fileFormat) {
            Utils.checkNotNull(fileFormat, "fileFormat");
            this.fileFormat = fileFormat;
            return this;
        }
        
        public Content build() {
            return new Content(
                url,
                unifiedUrl,
                fileFormat);
        }
    }
}

