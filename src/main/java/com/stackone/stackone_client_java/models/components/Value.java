/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * Value - The ISO3166-1 Alpha2 Code of the Country
 */
@JsonDeserialize(using = Value._Deserializer.class)
@JsonSerialize(using = Value._Serializer.class)
public class Value {

    public static final Value AF = new Value("AF");
    public static final Value AL = new Value("AL");
    public static final Value DZ = new Value("DZ");
    public static final Value AS = new Value("AS");
    public static final Value AD = new Value("AD");
    public static final Value AO = new Value("AO");
    public static final Value AI = new Value("AI");
    public static final Value AQ = new Value("AQ");
    public static final Value AG = new Value("AG");
    public static final Value AR = new Value("AR");
    public static final Value AM = new Value("AM");
    public static final Value AW = new Value("AW");
    public static final Value AU = new Value("AU");
    public static final Value AT = new Value("AT");
    public static final Value AZ = new Value("AZ");
    public static final Value BS = new Value("BS");
    public static final Value BH = new Value("BH");
    public static final Value BD = new Value("BD");
    public static final Value BB = new Value("BB");
    public static final Value BY = new Value("BY");
    public static final Value BE = new Value("BE");
    public static final Value BZ = new Value("BZ");
    public static final Value BJ = new Value("BJ");
    public static final Value BM = new Value("BM");
    public static final Value BT = new Value("BT");
    public static final Value BO = new Value("BO");
    public static final Value BQ = new Value("BQ");
    public static final Value BA = new Value("BA");
    public static final Value BW = new Value("BW");
    public static final Value BV = new Value("BV");
    public static final Value BR = new Value("BR");
    public static final Value IO = new Value("IO");
    public static final Value BN = new Value("BN");
    public static final Value BG = new Value("BG");
    public static final Value BF = new Value("BF");
    public static final Value BI = new Value("BI");
    public static final Value KH = new Value("KH");
    public static final Value CM = new Value("CM");
    public static final Value CA = new Value("CA");
    public static final Value CV = new Value("CV");
    public static final Value KY = new Value("KY");
    public static final Value CF = new Value("CF");
    public static final Value TD = new Value("TD");
    public static final Value CL = new Value("CL");
    public static final Value CN = new Value("CN");
    public static final Value CX = new Value("CX");
    public static final Value CC = new Value("CC");
    public static final Value CO = new Value("CO");
    public static final Value KM = new Value("KM");
    public static final Value CG = new Value("CG");
    public static final Value CD = new Value("CD");
    public static final Value CK = new Value("CK");
    public static final Value CR = new Value("CR");
    public static final Value HR = new Value("HR");
    public static final Value CU = new Value("CU");
    public static final Value CW = new Value("CW");
    public static final Value CY = new Value("CY");
    public static final Value CZ = new Value("CZ");
    public static final Value CI = new Value("CI");
    public static final Value DK = new Value("DK");
    public static final Value DJ = new Value("DJ");
    public static final Value DM = new Value("DM");
    public static final Value DO = new Value("DO");
    public static final Value EC = new Value("EC");
    public static final Value EG = new Value("EG");
    public static final Value SV = new Value("SV");
    public static final Value GQ = new Value("GQ");
    public static final Value ER = new Value("ER");
    public static final Value EE = new Value("EE");
    public static final Value ET = new Value("ET");
    public static final Value FK = new Value("FK");
    public static final Value FO = new Value("FO");
    public static final Value FJ = new Value("FJ");
    public static final Value FI = new Value("FI");
    public static final Value FR = new Value("FR");
    public static final Value GF = new Value("GF");
    public static final Value PF = new Value("PF");
    public static final Value TF = new Value("TF");
    public static final Value GA = new Value("GA");
    public static final Value GM = new Value("GM");
    public static final Value GE = new Value("GE");
    public static final Value DE = new Value("DE");
    public static final Value GH = new Value("GH");
    public static final Value GI = new Value("GI");
    public static final Value GR = new Value("GR");
    public static final Value GL = new Value("GL");
    public static final Value GD = new Value("GD");
    public static final Value GP = new Value("GP");
    public static final Value GU = new Value("GU");
    public static final Value GT = new Value("GT");
    public static final Value GG = new Value("GG");
    public static final Value GN = new Value("GN");
    public static final Value GW = new Value("GW");
    public static final Value GY = new Value("GY");
    public static final Value HT = new Value("HT");
    public static final Value HM = new Value("HM");
    public static final Value VA = new Value("VA");
    public static final Value HN = new Value("HN");
    public static final Value HK = new Value("HK");
    public static final Value HU = new Value("HU");
    public static final Value IS = new Value("IS");
    public static final Value IN = new Value("IN");
    public static final Value ID = new Value("ID");
    public static final Value IR = new Value("IR");
    public static final Value IQ = new Value("IQ");
    public static final Value IE = new Value("IE");
    public static final Value IM = new Value("IM");
    public static final Value IL = new Value("IL");
    public static final Value IT = new Value("IT");
    public static final Value JM = new Value("JM");
    public static final Value JP = new Value("JP");
    public static final Value JE = new Value("JE");
    public static final Value JO = new Value("JO");
    public static final Value KZ = new Value("KZ");
    public static final Value KE = new Value("KE");
    public static final Value KI = new Value("KI");
    public static final Value KP = new Value("KP");
    public static final Value KR = new Value("KR");
    public static final Value KW = new Value("KW");
    public static final Value KG = new Value("KG");
    public static final Value LA = new Value("LA");
    public static final Value LV = new Value("LV");
    public static final Value LB = new Value("LB");
    public static final Value LS = new Value("LS");
    public static final Value LR = new Value("LR");
    public static final Value LY = new Value("LY");
    public static final Value LI = new Value("LI");
    public static final Value LT = new Value("LT");
    public static final Value LU = new Value("LU");
    public static final Value MO = new Value("MO");
    public static final Value MK = new Value("MK");
    public static final Value MG = new Value("MG");
    public static final Value MW = new Value("MW");
    public static final Value MY = new Value("MY");
    public static final Value MV = new Value("MV");
    public static final Value ML = new Value("ML");
    public static final Value MT = new Value("MT");
    public static final Value MH = new Value("MH");
    public static final Value MQ = new Value("MQ");
    public static final Value MR = new Value("MR");
    public static final Value MU = new Value("MU");
    public static final Value YT = new Value("YT");
    public static final Value MX = new Value("MX");
    public static final Value FM = new Value("FM");
    public static final Value MD = new Value("MD");
    public static final Value MC = new Value("MC");
    public static final Value MN = new Value("MN");
    public static final Value ME = new Value("ME");
    public static final Value MS = new Value("MS");
    public static final Value MA = new Value("MA");
    public static final Value MZ = new Value("MZ");
    public static final Value MM = new Value("MM");
    public static final Value NA = new Value("NA");
    public static final Value NR = new Value("NR");
    public static final Value NP = new Value("NP");
    public static final Value NL = new Value("NL");
    public static final Value NC = new Value("NC");
    public static final Value NZ = new Value("NZ");
    public static final Value NI = new Value("NI");
    public static final Value NE = new Value("NE");
    public static final Value NG = new Value("NG");
    public static final Value NU = new Value("NU");
    public static final Value NF = new Value("NF");
    public static final Value MP = new Value("MP");
    public static final Value NO = new Value("NO");
    public static final Value OM = new Value("OM");
    public static final Value PK = new Value("PK");
    public static final Value PW = new Value("PW");
    public static final Value PS = new Value("PS");
    public static final Value PA = new Value("PA");
    public static final Value PG = new Value("PG");
    public static final Value PY = new Value("PY");
    public static final Value PE = new Value("PE");
    public static final Value PH = new Value("PH");
    public static final Value PN = new Value("PN");
    public static final Value PL = new Value("PL");
    public static final Value PT = new Value("PT");
    public static final Value PR = new Value("PR");
    public static final Value QA = new Value("QA");
    public static final Value RO = new Value("RO");
    public static final Value RU = new Value("RU");
    public static final Value RW = new Value("RW");
    public static final Value RE = new Value("RE");
    public static final Value BL = new Value("BL");
    public static final Value SH = new Value("SH");
    public static final Value KN = new Value("KN");
    public static final Value LC = new Value("LC");
    public static final Value MF = new Value("MF");
    public static final Value PM = new Value("PM");
    public static final Value VC = new Value("VC");
    public static final Value WS = new Value("WS");
    public static final Value SM = new Value("SM");
    public static final Value ST = new Value("ST");
    public static final Value SA = new Value("SA");
    public static final Value SN = new Value("SN");
    public static final Value RS = new Value("RS");
    public static final Value SC = new Value("SC");
    public static final Value SL = new Value("SL");
    public static final Value SG = new Value("SG");
    public static final Value SX = new Value("SX");
    public static final Value SK = new Value("SK");
    public static final Value SI = new Value("SI");
    public static final Value SB = new Value("SB");
    public static final Value SO = new Value("SO");
    public static final Value ZA = new Value("ZA");
    public static final Value GS = new Value("GS");
    public static final Value SS = new Value("SS");
    public static final Value ES = new Value("ES");
    public static final Value LK = new Value("LK");
    public static final Value SD = new Value("SD");
    public static final Value SR = new Value("SR");
    public static final Value SJ = new Value("SJ");
    public static final Value SZ = new Value("SZ");
    public static final Value SE = new Value("SE");
    public static final Value CH = new Value("CH");
    public static final Value SY = new Value("SY");
    public static final Value TW = new Value("TW");
    public static final Value TJ = new Value("TJ");
    public static final Value TZ = new Value("TZ");
    public static final Value TH = new Value("TH");
    public static final Value TL = new Value("TL");
    public static final Value TG = new Value("TG");
    public static final Value TK = new Value("TK");
    public static final Value TO = new Value("TO");
    public static final Value TT = new Value("TT");
    public static final Value TN = new Value("TN");
    public static final Value TR = new Value("TR");
    public static final Value TM = new Value("TM");
    public static final Value TC = new Value("TC");
    public static final Value TV = new Value("TV");
    public static final Value UG = new Value("UG");
    public static final Value UA = new Value("UA");
    public static final Value AE = new Value("AE");
    public static final Value GB = new Value("GB");
    public static final Value US = new Value("US");
    public static final Value UM = new Value("UM");
    public static final Value UY = new Value("UY");
    public static final Value UZ = new Value("UZ");
    public static final Value VU = new Value("VU");
    public static final Value VE = new Value("VE");
    public static final Value VN = new Value("VN");
    public static final Value VG = new Value("VG");
    public static final Value VI = new Value("VI");
    public static final Value WF = new Value("WF");
    public static final Value EH = new Value("EH");
    public static final Value YE = new Value("YE");
    public static final Value ZM = new Value("ZM");
    public static final Value ZW = new Value("ZW");
    public static final Value UNMAPPED_VALUE = new Value("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, Value> values = createValuesMap();
    private static final Map<String, ValueEnum> enums = createEnumsMap();

    private final String value;

    private Value(String value) {
        this.value = value;
    }

    /**
     * Returns a Value with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as Value
     */ 
    public static Value of(String value) {
        synchronized (Value.class) {
            return values.computeIfAbsent(value, v -> new Value(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<ValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Value other = (Value) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "Value [value=" + value + "]";
    }

    // return an array just like an enum
    public static Value[] values() {
        synchronized (Value.class) {
            return values.values().toArray(new Value[] {});
        }
    }

    private static final Map<String, Value> createValuesMap() {
        Map<String, Value> map = new LinkedHashMap<>();
        map.put("AF", AF);
        map.put("AL", AL);
        map.put("DZ", DZ);
        map.put("AS", AS);
        map.put("AD", AD);
        map.put("AO", AO);
        map.put("AI", AI);
        map.put("AQ", AQ);
        map.put("AG", AG);
        map.put("AR", AR);
        map.put("AM", AM);
        map.put("AW", AW);
        map.put("AU", AU);
        map.put("AT", AT);
        map.put("AZ", AZ);
        map.put("BS", BS);
        map.put("BH", BH);
        map.put("BD", BD);
        map.put("BB", BB);
        map.put("BY", BY);
        map.put("BE", BE);
        map.put("BZ", BZ);
        map.put("BJ", BJ);
        map.put("BM", BM);
        map.put("BT", BT);
        map.put("BO", BO);
        map.put("BQ", BQ);
        map.put("BA", BA);
        map.put("BW", BW);
        map.put("BV", BV);
        map.put("BR", BR);
        map.put("IO", IO);
        map.put("BN", BN);
        map.put("BG", BG);
        map.put("BF", BF);
        map.put("BI", BI);
        map.put("KH", KH);
        map.put("CM", CM);
        map.put("CA", CA);
        map.put("CV", CV);
        map.put("KY", KY);
        map.put("CF", CF);
        map.put("TD", TD);
        map.put("CL", CL);
        map.put("CN", CN);
        map.put("CX", CX);
        map.put("CC", CC);
        map.put("CO", CO);
        map.put("KM", KM);
        map.put("CG", CG);
        map.put("CD", CD);
        map.put("CK", CK);
        map.put("CR", CR);
        map.put("HR", HR);
        map.put("CU", CU);
        map.put("CW", CW);
        map.put("CY", CY);
        map.put("CZ", CZ);
        map.put("CI", CI);
        map.put("DK", DK);
        map.put("DJ", DJ);
        map.put("DM", DM);
        map.put("DO", DO);
        map.put("EC", EC);
        map.put("EG", EG);
        map.put("SV", SV);
        map.put("GQ", GQ);
        map.put("ER", ER);
        map.put("EE", EE);
        map.put("ET", ET);
        map.put("FK", FK);
        map.put("FO", FO);
        map.put("FJ", FJ);
        map.put("FI", FI);
        map.put("FR", FR);
        map.put("GF", GF);
        map.put("PF", PF);
        map.put("TF", TF);
        map.put("GA", GA);
        map.put("GM", GM);
        map.put("GE", GE);
        map.put("DE", DE);
        map.put("GH", GH);
        map.put("GI", GI);
        map.put("GR", GR);
        map.put("GL", GL);
        map.put("GD", GD);
        map.put("GP", GP);
        map.put("GU", GU);
        map.put("GT", GT);
        map.put("GG", GG);
        map.put("GN", GN);
        map.put("GW", GW);
        map.put("GY", GY);
        map.put("HT", HT);
        map.put("HM", HM);
        map.put("VA", VA);
        map.put("HN", HN);
        map.put("HK", HK);
        map.put("HU", HU);
        map.put("IS", IS);
        map.put("IN", IN);
        map.put("ID", ID);
        map.put("IR", IR);
        map.put("IQ", IQ);
        map.put("IE", IE);
        map.put("IM", IM);
        map.put("IL", IL);
        map.put("IT", IT);
        map.put("JM", JM);
        map.put("JP", JP);
        map.put("JE", JE);
        map.put("JO", JO);
        map.put("KZ", KZ);
        map.put("KE", KE);
        map.put("KI", KI);
        map.put("KP", KP);
        map.put("KR", KR);
        map.put("KW", KW);
        map.put("KG", KG);
        map.put("LA", LA);
        map.put("LV", LV);
        map.put("LB", LB);
        map.put("LS", LS);
        map.put("LR", LR);
        map.put("LY", LY);
        map.put("LI", LI);
        map.put("LT", LT);
        map.put("LU", LU);
        map.put("MO", MO);
        map.put("MK", MK);
        map.put("MG", MG);
        map.put("MW", MW);
        map.put("MY", MY);
        map.put("MV", MV);
        map.put("ML", ML);
        map.put("MT", MT);
        map.put("MH", MH);
        map.put("MQ", MQ);
        map.put("MR", MR);
        map.put("MU", MU);
        map.put("YT", YT);
        map.put("MX", MX);
        map.put("FM", FM);
        map.put("MD", MD);
        map.put("MC", MC);
        map.put("MN", MN);
        map.put("ME", ME);
        map.put("MS", MS);
        map.put("MA", MA);
        map.put("MZ", MZ);
        map.put("MM", MM);
        map.put("NA", NA);
        map.put("NR", NR);
        map.put("NP", NP);
        map.put("NL", NL);
        map.put("NC", NC);
        map.put("NZ", NZ);
        map.put("NI", NI);
        map.put("NE", NE);
        map.put("NG", NG);
        map.put("NU", NU);
        map.put("NF", NF);
        map.put("MP", MP);
        map.put("NO", NO);
        map.put("OM", OM);
        map.put("PK", PK);
        map.put("PW", PW);
        map.put("PS", PS);
        map.put("PA", PA);
        map.put("PG", PG);
        map.put("PY", PY);
        map.put("PE", PE);
        map.put("PH", PH);
        map.put("PN", PN);
        map.put("PL", PL);
        map.put("PT", PT);
        map.put("PR", PR);
        map.put("QA", QA);
        map.put("RO", RO);
        map.put("RU", RU);
        map.put("RW", RW);
        map.put("RE", RE);
        map.put("BL", BL);
        map.put("SH", SH);
        map.put("KN", KN);
        map.put("LC", LC);
        map.put("MF", MF);
        map.put("PM", PM);
        map.put("VC", VC);
        map.put("WS", WS);
        map.put("SM", SM);
        map.put("ST", ST);
        map.put("SA", SA);
        map.put("SN", SN);
        map.put("RS", RS);
        map.put("SC", SC);
        map.put("SL", SL);
        map.put("SG", SG);
        map.put("SX", SX);
        map.put("SK", SK);
        map.put("SI", SI);
        map.put("SB", SB);
        map.put("SO", SO);
        map.put("ZA", ZA);
        map.put("GS", GS);
        map.put("SS", SS);
        map.put("ES", ES);
        map.put("LK", LK);
        map.put("SD", SD);
        map.put("SR", SR);
        map.put("SJ", SJ);
        map.put("SZ", SZ);
        map.put("SE", SE);
        map.put("CH", CH);
        map.put("SY", SY);
        map.put("TW", TW);
        map.put("TJ", TJ);
        map.put("TZ", TZ);
        map.put("TH", TH);
        map.put("TL", TL);
        map.put("TG", TG);
        map.put("TK", TK);
        map.put("TO", TO);
        map.put("TT", TT);
        map.put("TN", TN);
        map.put("TR", TR);
        map.put("TM", TM);
        map.put("TC", TC);
        map.put("TV", TV);
        map.put("UG", UG);
        map.put("UA", UA);
        map.put("AE", AE);
        map.put("GB", GB);
        map.put("US", US);
        map.put("UM", UM);
        map.put("UY", UY);
        map.put("UZ", UZ);
        map.put("VU", VU);
        map.put("VE", VE);
        map.put("VN", VN);
        map.put("VG", VG);
        map.put("VI", VI);
        map.put("WF", WF);
        map.put("EH", EH);
        map.put("YE", YE);
        map.put("ZM", ZM);
        map.put("ZW", ZW);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, ValueEnum> createEnumsMap() {
        Map<String, ValueEnum> map = new HashMap<>();
        map.put("AF", ValueEnum.AF);
        map.put("AL", ValueEnum.AL);
        map.put("DZ", ValueEnum.DZ);
        map.put("AS", ValueEnum.AS);
        map.put("AD", ValueEnum.AD);
        map.put("AO", ValueEnum.AO);
        map.put("AI", ValueEnum.AI);
        map.put("AQ", ValueEnum.AQ);
        map.put("AG", ValueEnum.AG);
        map.put("AR", ValueEnum.AR);
        map.put("AM", ValueEnum.AM);
        map.put("AW", ValueEnum.AW);
        map.put("AU", ValueEnum.AU);
        map.put("AT", ValueEnum.AT);
        map.put("AZ", ValueEnum.AZ);
        map.put("BS", ValueEnum.BS);
        map.put("BH", ValueEnum.BH);
        map.put("BD", ValueEnum.BD);
        map.put("BB", ValueEnum.BB);
        map.put("BY", ValueEnum.BY);
        map.put("BE", ValueEnum.BE);
        map.put("BZ", ValueEnum.BZ);
        map.put("BJ", ValueEnum.BJ);
        map.put("BM", ValueEnum.BM);
        map.put("BT", ValueEnum.BT);
        map.put("BO", ValueEnum.BO);
        map.put("BQ", ValueEnum.BQ);
        map.put("BA", ValueEnum.BA);
        map.put("BW", ValueEnum.BW);
        map.put("BV", ValueEnum.BV);
        map.put("BR", ValueEnum.BR);
        map.put("IO", ValueEnum.IO);
        map.put("BN", ValueEnum.BN);
        map.put("BG", ValueEnum.BG);
        map.put("BF", ValueEnum.BF);
        map.put("BI", ValueEnum.BI);
        map.put("KH", ValueEnum.KH);
        map.put("CM", ValueEnum.CM);
        map.put("CA", ValueEnum.CA);
        map.put("CV", ValueEnum.CV);
        map.put("KY", ValueEnum.KY);
        map.put("CF", ValueEnum.CF);
        map.put("TD", ValueEnum.TD);
        map.put("CL", ValueEnum.CL);
        map.put("CN", ValueEnum.CN);
        map.put("CX", ValueEnum.CX);
        map.put("CC", ValueEnum.CC);
        map.put("CO", ValueEnum.CO);
        map.put("KM", ValueEnum.KM);
        map.put("CG", ValueEnum.CG);
        map.put("CD", ValueEnum.CD);
        map.put("CK", ValueEnum.CK);
        map.put("CR", ValueEnum.CR);
        map.put("HR", ValueEnum.HR);
        map.put("CU", ValueEnum.CU);
        map.put("CW", ValueEnum.CW);
        map.put("CY", ValueEnum.CY);
        map.put("CZ", ValueEnum.CZ);
        map.put("CI", ValueEnum.CI);
        map.put("DK", ValueEnum.DK);
        map.put("DJ", ValueEnum.DJ);
        map.put("DM", ValueEnum.DM);
        map.put("DO", ValueEnum.DO);
        map.put("EC", ValueEnum.EC);
        map.put("EG", ValueEnum.EG);
        map.put("SV", ValueEnum.SV);
        map.put("GQ", ValueEnum.GQ);
        map.put("ER", ValueEnum.ER);
        map.put("EE", ValueEnum.EE);
        map.put("ET", ValueEnum.ET);
        map.put("FK", ValueEnum.FK);
        map.put("FO", ValueEnum.FO);
        map.put("FJ", ValueEnum.FJ);
        map.put("FI", ValueEnum.FI);
        map.put("FR", ValueEnum.FR);
        map.put("GF", ValueEnum.GF);
        map.put("PF", ValueEnum.PF);
        map.put("TF", ValueEnum.TF);
        map.put("GA", ValueEnum.GA);
        map.put("GM", ValueEnum.GM);
        map.put("GE", ValueEnum.GE);
        map.put("DE", ValueEnum.DE);
        map.put("GH", ValueEnum.GH);
        map.put("GI", ValueEnum.GI);
        map.put("GR", ValueEnum.GR);
        map.put("GL", ValueEnum.GL);
        map.put("GD", ValueEnum.GD);
        map.put("GP", ValueEnum.GP);
        map.put("GU", ValueEnum.GU);
        map.put("GT", ValueEnum.GT);
        map.put("GG", ValueEnum.GG);
        map.put("GN", ValueEnum.GN);
        map.put("GW", ValueEnum.GW);
        map.put("GY", ValueEnum.GY);
        map.put("HT", ValueEnum.HT);
        map.put("HM", ValueEnum.HM);
        map.put("VA", ValueEnum.VA);
        map.put("HN", ValueEnum.HN);
        map.put("HK", ValueEnum.HK);
        map.put("HU", ValueEnum.HU);
        map.put("IS", ValueEnum.IS);
        map.put("IN", ValueEnum.IN);
        map.put("ID", ValueEnum.ID);
        map.put("IR", ValueEnum.IR);
        map.put("IQ", ValueEnum.IQ);
        map.put("IE", ValueEnum.IE);
        map.put("IM", ValueEnum.IM);
        map.put("IL", ValueEnum.IL);
        map.put("IT", ValueEnum.IT);
        map.put("JM", ValueEnum.JM);
        map.put("JP", ValueEnum.JP);
        map.put("JE", ValueEnum.JE);
        map.put("JO", ValueEnum.JO);
        map.put("KZ", ValueEnum.KZ);
        map.put("KE", ValueEnum.KE);
        map.put("KI", ValueEnum.KI);
        map.put("KP", ValueEnum.KP);
        map.put("KR", ValueEnum.KR);
        map.put("KW", ValueEnum.KW);
        map.put("KG", ValueEnum.KG);
        map.put("LA", ValueEnum.LA);
        map.put("LV", ValueEnum.LV);
        map.put("LB", ValueEnum.LB);
        map.put("LS", ValueEnum.LS);
        map.put("LR", ValueEnum.LR);
        map.put("LY", ValueEnum.LY);
        map.put("LI", ValueEnum.LI);
        map.put("LT", ValueEnum.LT);
        map.put("LU", ValueEnum.LU);
        map.put("MO", ValueEnum.MO);
        map.put("MK", ValueEnum.MK);
        map.put("MG", ValueEnum.MG);
        map.put("MW", ValueEnum.MW);
        map.put("MY", ValueEnum.MY);
        map.put("MV", ValueEnum.MV);
        map.put("ML", ValueEnum.ML);
        map.put("MT", ValueEnum.MT);
        map.put("MH", ValueEnum.MH);
        map.put("MQ", ValueEnum.MQ);
        map.put("MR", ValueEnum.MR);
        map.put("MU", ValueEnum.MU);
        map.put("YT", ValueEnum.YT);
        map.put("MX", ValueEnum.MX);
        map.put("FM", ValueEnum.FM);
        map.put("MD", ValueEnum.MD);
        map.put("MC", ValueEnum.MC);
        map.put("MN", ValueEnum.MN);
        map.put("ME", ValueEnum.ME);
        map.put("MS", ValueEnum.MS);
        map.put("MA", ValueEnum.MA);
        map.put("MZ", ValueEnum.MZ);
        map.put("MM", ValueEnum.MM);
        map.put("NA", ValueEnum.NA);
        map.put("NR", ValueEnum.NR);
        map.put("NP", ValueEnum.NP);
        map.put("NL", ValueEnum.NL);
        map.put("NC", ValueEnum.NC);
        map.put("NZ", ValueEnum.NZ);
        map.put("NI", ValueEnum.NI);
        map.put("NE", ValueEnum.NE);
        map.put("NG", ValueEnum.NG);
        map.put("NU", ValueEnum.NU);
        map.put("NF", ValueEnum.NF);
        map.put("MP", ValueEnum.MP);
        map.put("NO", ValueEnum.NO);
        map.put("OM", ValueEnum.OM);
        map.put("PK", ValueEnum.PK);
        map.put("PW", ValueEnum.PW);
        map.put("PS", ValueEnum.PS);
        map.put("PA", ValueEnum.PA);
        map.put("PG", ValueEnum.PG);
        map.put("PY", ValueEnum.PY);
        map.put("PE", ValueEnum.PE);
        map.put("PH", ValueEnum.PH);
        map.put("PN", ValueEnum.PN);
        map.put("PL", ValueEnum.PL);
        map.put("PT", ValueEnum.PT);
        map.put("PR", ValueEnum.PR);
        map.put("QA", ValueEnum.QA);
        map.put("RO", ValueEnum.RO);
        map.put("RU", ValueEnum.RU);
        map.put("RW", ValueEnum.RW);
        map.put("RE", ValueEnum.RE);
        map.put("BL", ValueEnum.BL);
        map.put("SH", ValueEnum.SH);
        map.put("KN", ValueEnum.KN);
        map.put("LC", ValueEnum.LC);
        map.put("MF", ValueEnum.MF);
        map.put("PM", ValueEnum.PM);
        map.put("VC", ValueEnum.VC);
        map.put("WS", ValueEnum.WS);
        map.put("SM", ValueEnum.SM);
        map.put("ST", ValueEnum.ST);
        map.put("SA", ValueEnum.SA);
        map.put("SN", ValueEnum.SN);
        map.put("RS", ValueEnum.RS);
        map.put("SC", ValueEnum.SC);
        map.put("SL", ValueEnum.SL);
        map.put("SG", ValueEnum.SG);
        map.put("SX", ValueEnum.SX);
        map.put("SK", ValueEnum.SK);
        map.put("SI", ValueEnum.SI);
        map.put("SB", ValueEnum.SB);
        map.put("SO", ValueEnum.SO);
        map.put("ZA", ValueEnum.ZA);
        map.put("GS", ValueEnum.GS);
        map.put("SS", ValueEnum.SS);
        map.put("ES", ValueEnum.ES);
        map.put("LK", ValueEnum.LK);
        map.put("SD", ValueEnum.SD);
        map.put("SR", ValueEnum.SR);
        map.put("SJ", ValueEnum.SJ);
        map.put("SZ", ValueEnum.SZ);
        map.put("SE", ValueEnum.SE);
        map.put("CH", ValueEnum.CH);
        map.put("SY", ValueEnum.SY);
        map.put("TW", ValueEnum.TW);
        map.put("TJ", ValueEnum.TJ);
        map.put("TZ", ValueEnum.TZ);
        map.put("TH", ValueEnum.TH);
        map.put("TL", ValueEnum.TL);
        map.put("TG", ValueEnum.TG);
        map.put("TK", ValueEnum.TK);
        map.put("TO", ValueEnum.TO);
        map.put("TT", ValueEnum.TT);
        map.put("TN", ValueEnum.TN);
        map.put("TR", ValueEnum.TR);
        map.put("TM", ValueEnum.TM);
        map.put("TC", ValueEnum.TC);
        map.put("TV", ValueEnum.TV);
        map.put("UG", ValueEnum.UG);
        map.put("UA", ValueEnum.UA);
        map.put("AE", ValueEnum.AE);
        map.put("GB", ValueEnum.GB);
        map.put("US", ValueEnum.US);
        map.put("UM", ValueEnum.UM);
        map.put("UY", ValueEnum.UY);
        map.put("UZ", ValueEnum.UZ);
        map.put("VU", ValueEnum.VU);
        map.put("VE", ValueEnum.VE);
        map.put("VN", ValueEnum.VN);
        map.put("VG", ValueEnum.VG);
        map.put("VI", ValueEnum.VI);
        map.put("WF", ValueEnum.WF);
        map.put("EH", ValueEnum.EH);
        map.put("YE", ValueEnum.YE);
        map.put("ZM", ValueEnum.ZM);
        map.put("ZW", ValueEnum.ZW);
        map.put("unmapped_value", ValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<Value> {

        protected _Serializer() {
            super(Value.class);
        }

        @Override
        public void serialize(Value value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<Value> {

        protected _Deserializer() {
            super(Value.class);
        }

        @Override
        public Value deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return Value.of(v);
        }
    }
    
    public enum ValueEnum {

        AF("AF"),
        AL("AL"),
        DZ("DZ"),
        AS("AS"),
        AD("AD"),
        AO("AO"),
        AI("AI"),
        AQ("AQ"),
        AG("AG"),
        AR("AR"),
        AM("AM"),
        AW("AW"),
        AU("AU"),
        AT("AT"),
        AZ("AZ"),
        BS("BS"),
        BH("BH"),
        BD("BD"),
        BB("BB"),
        BY("BY"),
        BE("BE"),
        BZ("BZ"),
        BJ("BJ"),
        BM("BM"),
        BT("BT"),
        BO("BO"),
        BQ("BQ"),
        BA("BA"),
        BW("BW"),
        BV("BV"),
        BR("BR"),
        IO("IO"),
        BN("BN"),
        BG("BG"),
        BF("BF"),
        BI("BI"),
        KH("KH"),
        CM("CM"),
        CA("CA"),
        CV("CV"),
        KY("KY"),
        CF("CF"),
        TD("TD"),
        CL("CL"),
        CN("CN"),
        CX("CX"),
        CC("CC"),
        CO("CO"),
        KM("KM"),
        CG("CG"),
        CD("CD"),
        CK("CK"),
        CR("CR"),
        HR("HR"),
        CU("CU"),
        CW("CW"),
        CY("CY"),
        CZ("CZ"),
        CI("CI"),
        DK("DK"),
        DJ("DJ"),
        DM("DM"),
        DO("DO"),
        EC("EC"),
        EG("EG"),
        SV("SV"),
        GQ("GQ"),
        ER("ER"),
        EE("EE"),
        ET("ET"),
        FK("FK"),
        FO("FO"),
        FJ("FJ"),
        FI("FI"),
        FR("FR"),
        GF("GF"),
        PF("PF"),
        TF("TF"),
        GA("GA"),
        GM("GM"),
        GE("GE"),
        DE("DE"),
        GH("GH"),
        GI("GI"),
        GR("GR"),
        GL("GL"),
        GD("GD"),
        GP("GP"),
        GU("GU"),
        GT("GT"),
        GG("GG"),
        GN("GN"),
        GW("GW"),
        GY("GY"),
        HT("HT"),
        HM("HM"),
        VA("VA"),
        HN("HN"),
        HK("HK"),
        HU("HU"),
        IS("IS"),
        IN("IN"),
        ID("ID"),
        IR("IR"),
        IQ("IQ"),
        IE("IE"),
        IM("IM"),
        IL("IL"),
        IT("IT"),
        JM("JM"),
        JP("JP"),
        JE("JE"),
        JO("JO"),
        KZ("KZ"),
        KE("KE"),
        KI("KI"),
        KP("KP"),
        KR("KR"),
        KW("KW"),
        KG("KG"),
        LA("LA"),
        LV("LV"),
        LB("LB"),
        LS("LS"),
        LR("LR"),
        LY("LY"),
        LI("LI"),
        LT("LT"),
        LU("LU"),
        MO("MO"),
        MK("MK"),
        MG("MG"),
        MW("MW"),
        MY("MY"),
        MV("MV"),
        ML("ML"),
        MT("MT"),
        MH("MH"),
        MQ("MQ"),
        MR("MR"),
        MU("MU"),
        YT("YT"),
        MX("MX"),
        FM("FM"),
        MD("MD"),
        MC("MC"),
        MN("MN"),
        ME("ME"),
        MS("MS"),
        MA("MA"),
        MZ("MZ"),
        MM("MM"),
        NA("NA"),
        NR("NR"),
        NP("NP"),
        NL("NL"),
        NC("NC"),
        NZ("NZ"),
        NI("NI"),
        NE("NE"),
        NG("NG"),
        NU("NU"),
        NF("NF"),
        MP("MP"),
        NO("NO"),
        OM("OM"),
        PK("PK"),
        PW("PW"),
        PS("PS"),
        PA("PA"),
        PG("PG"),
        PY("PY"),
        PE("PE"),
        PH("PH"),
        PN("PN"),
        PL("PL"),
        PT("PT"),
        PR("PR"),
        QA("QA"),
        RO("RO"),
        RU("RU"),
        RW("RW"),
        RE("RE"),
        BL("BL"),
        SH("SH"),
        KN("KN"),
        LC("LC"),
        MF("MF"),
        PM("PM"),
        VC("VC"),
        WS("WS"),
        SM("SM"),
        ST("ST"),
        SA("SA"),
        SN("SN"),
        RS("RS"),
        SC("SC"),
        SL("SL"),
        SG("SG"),
        SX("SX"),
        SK("SK"),
        SI("SI"),
        SB("SB"),
        SO("SO"),
        ZA("ZA"),
        GS("GS"),
        SS("SS"),
        ES("ES"),
        LK("LK"),
        SD("SD"),
        SR("SR"),
        SJ("SJ"),
        SZ("SZ"),
        SE("SE"),
        CH("CH"),
        SY("SY"),
        TW("TW"),
        TJ("TJ"),
        TZ("TZ"),
        TH("TH"),
        TL("TL"),
        TG("TG"),
        TK("TK"),
        TO("TO"),
        TT("TT"),
        TN("TN"),
        TR("TR"),
        TM("TM"),
        TC("TC"),
        TV("TV"),
        UG("UG"),
        UA("UA"),
        AE("AE"),
        GB("GB"),
        US("US"),
        UM("UM"),
        UY("UY"),
        UZ("UZ"),
        VU("VU"),
        VE("VE"),
        VN("VN"),
        VG("VG"),
        VI("VI"),
        WF("WF"),
        EH("EH"),
        YE("YE"),
        ZM("ZM"),
        ZW("ZW"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private ValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}
