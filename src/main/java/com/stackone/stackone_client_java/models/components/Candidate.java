/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class Candidate {

    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Provider's unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_id")
    private JsonNullable<String> remoteId;

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_custom_fields")
    private JsonNullable<? extends Map<String, Object>> unifiedCustomFields;

    /**
     * Candidate name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * Candidate first name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * Candidate last name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * Candidate email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * List of candidate emails
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private JsonNullable<? extends List<CandidateEmail>> emails;

    /**
     * List of candidate social links
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private JsonNullable<? extends List<SocialLink>> socialLinks;

    /**
     * Candidate phone number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    @Deprecated
    private JsonNullable<String> phone;

    /**
     * List of candidate phone numbers including the type of the number when available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private JsonNullable<? extends List<PhoneNumber>> phoneNumbers;

    /**
     * Candidate company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private JsonNullable<String> company;

    /**
     * Candidate title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * List of candidate application IDs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_ids")
    private JsonNullable<? extends List<String>> applicationIds;

    /**
     * Provider's list of candidate application IDs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_application_ids")
    private JsonNullable<? extends List<String>> remoteApplicationIds;

    /**
     * Candidate hired date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hired_at")
    private JsonNullable<OffsetDateTime> hiredAt;

    /**
     * Candidate country
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * The candidate custom fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<? extends List<CustomFields>> customFields;

    /**
     * Candidate created date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * Candidate updated date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public Candidate(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("remote_id") JsonNullable<String> remoteId,
            @JsonProperty("unified_custom_fields") JsonNullable<? extends Map<String, Object>> unifiedCustomFields,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("emails") JsonNullable<? extends List<CandidateEmail>> emails,
            @JsonProperty("social_links") JsonNullable<? extends List<SocialLink>> socialLinks,
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("phone_numbers") JsonNullable<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("company") JsonNullable<String> company,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("application_ids") JsonNullable<? extends List<String>> applicationIds,
            @JsonProperty("remote_application_ids") JsonNullable<? extends List<String>> remoteApplicationIds,
            @JsonProperty("hired_at") JsonNullable<OffsetDateTime> hiredAt,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("custom_fields") JsonNullable<? extends List<CustomFields>> customFields,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(remoteId, "remoteId");
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(applicationIds, "applicationIds");
        Utils.checkNotNull(remoteApplicationIds, "remoteApplicationIds");
        Utils.checkNotNull(hiredAt, "hiredAt");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.remoteId = remoteId;
        this.unifiedCustomFields = unifiedCustomFields;
        this.name = name;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.emails = emails;
        this.socialLinks = socialLinks;
        this.phone = phone;
        this.phoneNumbers = phoneNumbers;
        this.company = company;
        this.title = title;
        this.applicationIds = applicationIds;
        this.remoteApplicationIds = remoteApplicationIds;
        this.hiredAt = hiredAt;
        this.country = country;
        this.customFields = customFields;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public Candidate() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Provider's unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> remoteId() {
        return remoteId;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> unifiedCustomFields() {
        return (JsonNullable<Map<String, Object>>) unifiedCustomFields;
    }

    /**
     * Candidate name
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * Candidate first name
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * Candidate last name
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * Candidate email
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * List of candidate emails
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CandidateEmail>> emails() {
        return (JsonNullable<List<CandidateEmail>>) emails;
    }

    /**
     * List of candidate social links
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<SocialLink>> socialLinks() {
        return (JsonNullable<List<SocialLink>>) socialLinks;
    }

    /**
     * Candidate phone number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    /**
     * List of candidate phone numbers including the type of the number when available
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<PhoneNumber>> phoneNumbers() {
        return (JsonNullable<List<PhoneNumber>>) phoneNumbers;
    }

    /**
     * Candidate company
     */
    @JsonIgnore
    public JsonNullable<String> company() {
        return company;
    }

    /**
     * Candidate title
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * List of candidate application IDs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> applicationIds() {
        return (JsonNullable<List<String>>) applicationIds;
    }

    /**
     * Provider's list of candidate application IDs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> remoteApplicationIds() {
        return (JsonNullable<List<String>>) remoteApplicationIds;
    }

    /**
     * Candidate hired date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> hiredAt() {
        return hiredAt;
    }

    /**
     * Candidate country
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * The candidate custom fields
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CustomFields>> customFields() {
        return (JsonNullable<List<CustomFields>>) customFields;
    }

    /**
     * Candidate created date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Candidate updated date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier
     */
    public Candidate withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public Candidate withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public Candidate withRemoteId(String remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = JsonNullable.of(remoteId);
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public Candidate withRemoteId(JsonNullable<String> remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = remoteId;
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public Candidate withUnifiedCustomFields(Map<String, Object> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public Candidate withUnifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = unifiedCustomFields;
        return this;
    }

    /**
     * Candidate name
     */
    public Candidate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Candidate name
     */
    public Candidate withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Candidate first name
     */
    public Candidate withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * Candidate first name
     */
    public Candidate withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * Candidate last name
     */
    public Candidate withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * Candidate last name
     */
    public Candidate withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Candidate email
     */
    public Candidate withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * Candidate email
     */
    public Candidate withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * List of candidate emails
     */
    public Candidate withEmails(List<CandidateEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = JsonNullable.of(emails);
        return this;
    }

    /**
     * List of candidate emails
     */
    public Candidate withEmails(JsonNullable<? extends List<CandidateEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * List of candidate social links
     */
    public Candidate withSocialLinks(List<SocialLink> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = JsonNullable.of(socialLinks);
        return this;
    }

    /**
     * List of candidate social links
     */
    public Candidate withSocialLinks(JsonNullable<? extends List<SocialLink>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    /**
     * Candidate phone number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Candidate withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    /**
     * Candidate phone number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Candidate withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * List of candidate phone numbers including the type of the number when available
     */
    public Candidate withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = JsonNullable.of(phoneNumbers);
        return this;
    }

    /**
     * List of candidate phone numbers including the type of the number when available
     */
    public Candidate withPhoneNumbers(JsonNullable<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    /**
     * Candidate company
     */
    public Candidate withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = JsonNullable.of(company);
        return this;
    }

    /**
     * Candidate company
     */
    public Candidate withCompany(JsonNullable<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * Candidate title
     */
    public Candidate withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * Candidate title
     */
    public Candidate withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * List of candidate application IDs
     */
    public Candidate withApplicationIds(List<String> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = JsonNullable.of(applicationIds);
        return this;
    }

    /**
     * List of candidate application IDs
     */
    public Candidate withApplicationIds(JsonNullable<? extends List<String>> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = applicationIds;
        return this;
    }

    /**
     * Provider's list of candidate application IDs
     */
    public Candidate withRemoteApplicationIds(List<String> remoteApplicationIds) {
        Utils.checkNotNull(remoteApplicationIds, "remoteApplicationIds");
        this.remoteApplicationIds = JsonNullable.of(remoteApplicationIds);
        return this;
    }

    /**
     * Provider's list of candidate application IDs
     */
    public Candidate withRemoteApplicationIds(JsonNullable<? extends List<String>> remoteApplicationIds) {
        Utils.checkNotNull(remoteApplicationIds, "remoteApplicationIds");
        this.remoteApplicationIds = remoteApplicationIds;
        return this;
    }

    /**
     * Candidate hired date
     */
    public Candidate withHiredAt(OffsetDateTime hiredAt) {
        Utils.checkNotNull(hiredAt, "hiredAt");
        this.hiredAt = JsonNullable.of(hiredAt);
        return this;
    }

    /**
     * Candidate hired date
     */
    public Candidate withHiredAt(JsonNullable<OffsetDateTime> hiredAt) {
        Utils.checkNotNull(hiredAt, "hiredAt");
        this.hiredAt = hiredAt;
        return this;
    }

    /**
     * Candidate country
     */
    public Candidate withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Candidate country
     */
    public Candidate withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The candidate custom fields
     */
    public Candidate withCustomFields(List<CustomFields> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = JsonNullable.of(customFields);
        return this;
    }

    /**
     * The candidate custom fields
     */
    public Candidate withCustomFields(JsonNullable<? extends List<CustomFields>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * Candidate created date
     */
    public Candidate withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * Candidate created date
     */
    public Candidate withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Candidate updated date
     */
    public Candidate withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * Candidate updated date
     */
    public Candidate withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Candidate other = (Candidate) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.remoteId, other.remoteId) &&
            Objects.deepEquals(this.unifiedCustomFields, other.unifiedCustomFields) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.socialLinks, other.socialLinks) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.applicationIds, other.applicationIds) &&
            Objects.deepEquals(this.remoteApplicationIds, other.remoteApplicationIds) &&
            Objects.deepEquals(this.hiredAt, other.hiredAt) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            remoteId,
            unifiedCustomFields,
            name,
            firstName,
            lastName,
            email,
            emails,
            socialLinks,
            phone,
            phoneNumbers,
            company,
            title,
            applicationIds,
            remoteApplicationIds,
            hiredAt,
            country,
            customFields,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Candidate.class,
                "id", id,
                "remoteId", remoteId,
                "unifiedCustomFields", unifiedCustomFields,
                "name", name,
                "firstName", firstName,
                "lastName", lastName,
                "email", email,
                "emails", emails,
                "socialLinks", socialLinks,
                "phone", phone,
                "phoneNumbers", phoneNumbers,
                "company", company,
                "title", title,
                "applicationIds", applicationIds,
                "remoteApplicationIds", remoteApplicationIds,
                "hiredAt", hiredAt,
                "country", country,
                "customFields", customFields,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> remoteId = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> unifiedCustomFields = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> email = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CandidateEmail>> emails = JsonNullable.undefined();
 
        private JsonNullable<? extends List<SocialLink>> socialLinks = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> phone = JsonNullable.undefined();
 
        private JsonNullable<? extends List<PhoneNumber>> phoneNumbers = JsonNullable.undefined();
 
        private JsonNullable<String> company = JsonNullable.undefined();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> applicationIds = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> remoteApplicationIds = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> hiredAt = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CustomFields>> customFields = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(String remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = JsonNullable.of(remoteId);
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(JsonNullable<String> remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = remoteId;
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(Map<String, Object> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = unifiedCustomFields;
            return this;
        }

        /**
         * Candidate name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Candidate name
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Candidate first name
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * Candidate first name
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * Candidate last name
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * Candidate last name
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Candidate email
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * Candidate email
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * List of candidate emails
         */
        public Builder emails(List<CandidateEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = JsonNullable.of(emails);
            return this;
        }

        /**
         * List of candidate emails
         */
        public Builder emails(JsonNullable<? extends List<CandidateEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * List of candidate social links
         */
        public Builder socialLinks(List<SocialLink> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = JsonNullable.of(socialLinks);
            return this;
        }

        /**
         * List of candidate social links
         */
        public Builder socialLinks(JsonNullable<? extends List<SocialLink>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }

        /**
         * Candidate phone number
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        /**
         * Candidate phone number
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * List of candidate phone numbers including the type of the number when available
         */
        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = JsonNullable.of(phoneNumbers);
            return this;
        }

        /**
         * List of candidate phone numbers including the type of the number when available
         */
        public Builder phoneNumbers(JsonNullable<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        /**
         * Candidate company
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = JsonNullable.of(company);
            return this;
        }

        /**
         * Candidate company
         */
        public Builder company(JsonNullable<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * Candidate title
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * Candidate title
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * List of candidate application IDs
         */
        public Builder applicationIds(List<String> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = JsonNullable.of(applicationIds);
            return this;
        }

        /**
         * List of candidate application IDs
         */
        public Builder applicationIds(JsonNullable<? extends List<String>> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = applicationIds;
            return this;
        }

        /**
         * Provider's list of candidate application IDs
         */
        public Builder remoteApplicationIds(List<String> remoteApplicationIds) {
            Utils.checkNotNull(remoteApplicationIds, "remoteApplicationIds");
            this.remoteApplicationIds = JsonNullable.of(remoteApplicationIds);
            return this;
        }

        /**
         * Provider's list of candidate application IDs
         */
        public Builder remoteApplicationIds(JsonNullable<? extends List<String>> remoteApplicationIds) {
            Utils.checkNotNull(remoteApplicationIds, "remoteApplicationIds");
            this.remoteApplicationIds = remoteApplicationIds;
            return this;
        }

        /**
         * Candidate hired date
         */
        public Builder hiredAt(OffsetDateTime hiredAt) {
            Utils.checkNotNull(hiredAt, "hiredAt");
            this.hiredAt = JsonNullable.of(hiredAt);
            return this;
        }

        /**
         * Candidate hired date
         */
        public Builder hiredAt(JsonNullable<OffsetDateTime> hiredAt) {
            Utils.checkNotNull(hiredAt, "hiredAt");
            this.hiredAt = hiredAt;
            return this;
        }

        /**
         * Candidate country
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Candidate country
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The candidate custom fields
         */
        public Builder customFields(List<CustomFields> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        /**
         * The candidate custom fields
         */
        public Builder customFields(JsonNullable<? extends List<CustomFields>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * Candidate created date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * Candidate created date
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Candidate updated date
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * Candidate updated date
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public Candidate build() {
            return new Candidate(
                id,
                remoteId,
                unifiedCustomFields,
                name,
                firstName,
                lastName,
                email,
                emails,
                socialLinks,
                phone,
                phoneNumbers,
                company,
                title,
                applicationIds,
                remoteApplicationIds,
                hiredAt,
                country,
                customFields,
                createdAt,
                updatedAt);
        }
    }
}
