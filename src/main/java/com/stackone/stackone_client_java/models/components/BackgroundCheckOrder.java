/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class BackgroundCheckOrder {

    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Provider's unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_id")
    private JsonNullable<String> remoteId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application")
    private JsonNullable<? extends BackgroundCheckOrderApplication> application;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job")
    private JsonNullable<? extends BackgroundCheckOrderJob> job;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate")
    private JsonNullable<? extends BackgroundCheckOrderCandidate> candidate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requester")
    private JsonNullable<? extends BackgroundCheckOrderRequester> requester;

    /**
     * Results update url
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results_update_url")
    private JsonNullable<String> resultsUpdateUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package")
    private JsonNullable<? extends BackgroundCheckOrderPackage> package_;

    @JsonCreator
    public BackgroundCheckOrder(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("remote_id") JsonNullable<String> remoteId,
            @JsonProperty("application") JsonNullable<? extends BackgroundCheckOrderApplication> application,
            @JsonProperty("job") JsonNullable<? extends BackgroundCheckOrderJob> job,
            @JsonProperty("candidate") JsonNullable<? extends BackgroundCheckOrderCandidate> candidate,
            @JsonProperty("requester") JsonNullable<? extends BackgroundCheckOrderRequester> requester,
            @JsonProperty("results_update_url") JsonNullable<String> resultsUpdateUrl,
            @JsonProperty("package") JsonNullable<? extends BackgroundCheckOrderPackage> package_) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(remoteId, "remoteId");
        Utils.checkNotNull(application, "application");
        Utils.checkNotNull(job, "job");
        Utils.checkNotNull(candidate, "candidate");
        Utils.checkNotNull(requester, "requester");
        Utils.checkNotNull(resultsUpdateUrl, "resultsUpdateUrl");
        Utils.checkNotNull(package_, "package_");
        this.id = id;
        this.remoteId = remoteId;
        this.application = application;
        this.job = job;
        this.candidate = candidate;
        this.requester = requester;
        this.resultsUpdateUrl = resultsUpdateUrl;
        this.package_ = package_;
    }
    
    public BackgroundCheckOrder() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Provider's unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> remoteId() {
        return remoteId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BackgroundCheckOrderApplication> application() {
        return (JsonNullable<BackgroundCheckOrderApplication>) application;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BackgroundCheckOrderJob> job() {
        return (JsonNullable<BackgroundCheckOrderJob>) job;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BackgroundCheckOrderCandidate> candidate() {
        return (JsonNullable<BackgroundCheckOrderCandidate>) candidate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BackgroundCheckOrderRequester> requester() {
        return (JsonNullable<BackgroundCheckOrderRequester>) requester;
    }

    /**
     * Results update url
     */
    @JsonIgnore
    public JsonNullable<String> resultsUpdateUrl() {
        return resultsUpdateUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BackgroundCheckOrderPackage> package_() {
        return (JsonNullable<BackgroundCheckOrderPackage>) package_;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier
     */
    public BackgroundCheckOrder withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public BackgroundCheckOrder withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public BackgroundCheckOrder withRemoteId(String remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = JsonNullable.of(remoteId);
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public BackgroundCheckOrder withRemoteId(JsonNullable<String> remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = remoteId;
        return this;
    }

    public BackgroundCheckOrder withApplication(BackgroundCheckOrderApplication application) {
        Utils.checkNotNull(application, "application");
        this.application = JsonNullable.of(application);
        return this;
    }

    public BackgroundCheckOrder withApplication(JsonNullable<? extends BackgroundCheckOrderApplication> application) {
        Utils.checkNotNull(application, "application");
        this.application = application;
        return this;
    }

    public BackgroundCheckOrder withJob(BackgroundCheckOrderJob job) {
        Utils.checkNotNull(job, "job");
        this.job = JsonNullable.of(job);
        return this;
    }

    public BackgroundCheckOrder withJob(JsonNullable<? extends BackgroundCheckOrderJob> job) {
        Utils.checkNotNull(job, "job");
        this.job = job;
        return this;
    }

    public BackgroundCheckOrder withCandidate(BackgroundCheckOrderCandidate candidate) {
        Utils.checkNotNull(candidate, "candidate");
        this.candidate = JsonNullable.of(candidate);
        return this;
    }

    public BackgroundCheckOrder withCandidate(JsonNullable<? extends BackgroundCheckOrderCandidate> candidate) {
        Utils.checkNotNull(candidate, "candidate");
        this.candidate = candidate;
        return this;
    }

    public BackgroundCheckOrder withRequester(BackgroundCheckOrderRequester requester) {
        Utils.checkNotNull(requester, "requester");
        this.requester = JsonNullable.of(requester);
        return this;
    }

    public BackgroundCheckOrder withRequester(JsonNullable<? extends BackgroundCheckOrderRequester> requester) {
        Utils.checkNotNull(requester, "requester");
        this.requester = requester;
        return this;
    }

    /**
     * Results update url
     */
    public BackgroundCheckOrder withResultsUpdateUrl(String resultsUpdateUrl) {
        Utils.checkNotNull(resultsUpdateUrl, "resultsUpdateUrl");
        this.resultsUpdateUrl = JsonNullable.of(resultsUpdateUrl);
        return this;
    }

    /**
     * Results update url
     */
    public BackgroundCheckOrder withResultsUpdateUrl(JsonNullable<String> resultsUpdateUrl) {
        Utils.checkNotNull(resultsUpdateUrl, "resultsUpdateUrl");
        this.resultsUpdateUrl = resultsUpdateUrl;
        return this;
    }

    public BackgroundCheckOrder withPackage(BackgroundCheckOrderPackage package_) {
        Utils.checkNotNull(package_, "package_");
        this.package_ = JsonNullable.of(package_);
        return this;
    }

    public BackgroundCheckOrder withPackage(JsonNullable<? extends BackgroundCheckOrderPackage> package_) {
        Utils.checkNotNull(package_, "package_");
        this.package_ = package_;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BackgroundCheckOrder other = (BackgroundCheckOrder) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.remoteId, other.remoteId) &&
            Objects.deepEquals(this.application, other.application) &&
            Objects.deepEquals(this.job, other.job) &&
            Objects.deepEquals(this.candidate, other.candidate) &&
            Objects.deepEquals(this.requester, other.requester) &&
            Objects.deepEquals(this.resultsUpdateUrl, other.resultsUpdateUrl) &&
            Objects.deepEquals(this.package_, other.package_);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            remoteId,
            application,
            job,
            candidate,
            requester,
            resultsUpdateUrl,
            package_);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BackgroundCheckOrder.class,
                "id", id,
                "remoteId", remoteId,
                "application", application,
                "job", job,
                "candidate", candidate,
                "requester", requester,
                "resultsUpdateUrl", resultsUpdateUrl,
                "package_", package_);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> remoteId = JsonNullable.undefined();
 
        private JsonNullable<? extends BackgroundCheckOrderApplication> application = JsonNullable.undefined();
 
        private JsonNullable<? extends BackgroundCheckOrderJob> job = JsonNullable.undefined();
 
        private JsonNullable<? extends BackgroundCheckOrderCandidate> candidate = JsonNullable.undefined();
 
        private JsonNullable<? extends BackgroundCheckOrderRequester> requester = JsonNullable.undefined();
 
        private JsonNullable<String> resultsUpdateUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends BackgroundCheckOrderPackage> package_ = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(String remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = JsonNullable.of(remoteId);
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(JsonNullable<String> remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = remoteId;
            return this;
        }

        public Builder application(BackgroundCheckOrderApplication application) {
            Utils.checkNotNull(application, "application");
            this.application = JsonNullable.of(application);
            return this;
        }

        public Builder application(JsonNullable<? extends BackgroundCheckOrderApplication> application) {
            Utils.checkNotNull(application, "application");
            this.application = application;
            return this;
        }

        public Builder job(BackgroundCheckOrderJob job) {
            Utils.checkNotNull(job, "job");
            this.job = JsonNullable.of(job);
            return this;
        }

        public Builder job(JsonNullable<? extends BackgroundCheckOrderJob> job) {
            Utils.checkNotNull(job, "job");
            this.job = job;
            return this;
        }

        public Builder candidate(BackgroundCheckOrderCandidate candidate) {
            Utils.checkNotNull(candidate, "candidate");
            this.candidate = JsonNullable.of(candidate);
            return this;
        }

        public Builder candidate(JsonNullable<? extends BackgroundCheckOrderCandidate> candidate) {
            Utils.checkNotNull(candidate, "candidate");
            this.candidate = candidate;
            return this;
        }

        public Builder requester(BackgroundCheckOrderRequester requester) {
            Utils.checkNotNull(requester, "requester");
            this.requester = JsonNullable.of(requester);
            return this;
        }

        public Builder requester(JsonNullable<? extends BackgroundCheckOrderRequester> requester) {
            Utils.checkNotNull(requester, "requester");
            this.requester = requester;
            return this;
        }

        /**
         * Results update url
         */
        public Builder resultsUpdateUrl(String resultsUpdateUrl) {
            Utils.checkNotNull(resultsUpdateUrl, "resultsUpdateUrl");
            this.resultsUpdateUrl = JsonNullable.of(resultsUpdateUrl);
            return this;
        }

        /**
         * Results update url
         */
        public Builder resultsUpdateUrl(JsonNullable<String> resultsUpdateUrl) {
            Utils.checkNotNull(resultsUpdateUrl, "resultsUpdateUrl");
            this.resultsUpdateUrl = resultsUpdateUrl;
            return this;
        }

        public Builder package_(BackgroundCheckOrderPackage package_) {
            Utils.checkNotNull(package_, "package_");
            this.package_ = JsonNullable.of(package_);
            return this;
        }

        public Builder package_(JsonNullable<? extends BackgroundCheckOrderPackage> package_) {
            Utils.checkNotNull(package_, "package_");
            this.package_ = package_;
            return this;
        }
        
        public BackgroundCheckOrder build() {
            return new BackgroundCheckOrder(
                id,
                remoteId,
                application,
                job,
                candidate,
                requester,
                resultsUpdateUrl,
                package_);
        }
    }
}

