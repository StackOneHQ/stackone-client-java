/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.stackone.stackone_client_java.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class HrisUpdateEmployeeRequestDto {

    /**
     * The employee first name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The employee last name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The employee name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The employee display name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The employee avatar Url
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_url")
    private JsonNullable<String> avatarUrl;

    /**
     * The employee personal email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_email")
    private JsonNullable<String> personalEmail;

    /**
     * The employee personal phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_phone_number")
    private JsonNullable<String> personalPhoneNumber;

    /**
     * The employee work email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_email")
    private JsonNullable<String> workEmail;

    /**
     * The employee work phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_phone_number")
    private JsonNullable<String> workPhoneNumber;

    /**
     * The employee job id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    private JsonNullable<String> jobId;

    /**
     * The employee job title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_title")
    private JsonNullable<String> jobTitle;

    /**
     * The employee department id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    private JsonNullable<String> departmentId;

    /**
     * The employee department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private JsonNullable<String> department;

    /**
     * The employee manager ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager_id")
    private JsonNullable<String> managerId;

    /**
     * The employee gender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoGender> gender;

    /**
     * The employee preferred language
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_language")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoPreferredLanguage> preferredLanguage;

    /**
     * The employee ethnicity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ethnicity")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEthnicity> ethnicity;

    /**
     * The employee date_of_birth
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_of_birth")
    private JsonNullable<OffsetDateTime> dateOfBirth;

    /**
     * The employee birthday
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<OffsetDateTime> birthday;

    /**
     * The employee marital status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marital_status")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoMaritalStatus> maritalStatus;

    /**
     * The employee avatar
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoAvatar> avatar;

    /**
     * The employee hire date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hire_date")
    private JsonNullable<OffsetDateTime> hireDate;

    /**
     * The employee start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<OffsetDateTime> startDate;

    /**
     * The employee tenure
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenure")
    private JsonNullable<Double> tenure;

    /**
     * The employee work anniversary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_anniversary")
    private JsonNullable<OffsetDateTime> workAnniversary;

    /**
     * The employee employment type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_type")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentType> employmentType;

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_contract_type")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentContractType> employmentContractType;

    /**
     * The employee employment status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentStatus> employmentStatus;

    /**
     * The employee termination date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination_date")
    private JsonNullable<OffsetDateTime> terminationDate;

    /**
     * The employee company name
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    @Deprecated
    private JsonNullable<String> companyName;

    /**
     * The employee company id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The citizenships of the Employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("citizenships")
    private JsonNullable<? extends List<CountryCodeEnum>> citizenships;

    /**
     * The employee custom fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<? extends List<CustomFields>> customFields;

    /**
     * Current benefits of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefits")
    private JsonNullable<? extends List<CreateHRISBenefit>> benefits;

    /**
     * The assigned employee number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    private JsonNullable<String> employeeNumber;

    /**
     * The national identity number
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_identity_number")
    @Deprecated
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber;

    /**
     * The national identity numbers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_identity_numbers")
    private JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers;

    /**
     * The employee home location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("home_location")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoHomeLocation> homeLocation;

    /**
     * The employee work location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_location")
    private JsonNullable<? extends HrisUpdateEmployeeRequestDtoWorkLocation> workLocation;

    /**
     * Value to pass through to the provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passthrough")
    private JsonNullable<? extends Map<String, Object>> passthrough;

    @JsonCreator
    public HrisUpdateEmployeeRequestDto(
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("avatar_url") JsonNullable<String> avatarUrl,
            @JsonProperty("personal_email") JsonNullable<String> personalEmail,
            @JsonProperty("personal_phone_number") JsonNullable<String> personalPhoneNumber,
            @JsonProperty("work_email") JsonNullable<String> workEmail,
            @JsonProperty("work_phone_number") JsonNullable<String> workPhoneNumber,
            @JsonProperty("job_id") JsonNullable<String> jobId,
            @JsonProperty("job_title") JsonNullable<String> jobTitle,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("department") JsonNullable<String> department,
            @JsonProperty("manager_id") JsonNullable<String> managerId,
            @JsonProperty("gender") JsonNullable<? extends HrisUpdateEmployeeRequestDtoGender> gender,
            @JsonProperty("preferred_language") JsonNullable<? extends HrisUpdateEmployeeRequestDtoPreferredLanguage> preferredLanguage,
            @JsonProperty("ethnicity") JsonNullable<? extends HrisUpdateEmployeeRequestDtoEthnicity> ethnicity,
            @JsonProperty("date_of_birth") JsonNullable<OffsetDateTime> dateOfBirth,
            @JsonProperty("birthday") JsonNullable<OffsetDateTime> birthday,
            @JsonProperty("marital_status") JsonNullable<? extends HrisUpdateEmployeeRequestDtoMaritalStatus> maritalStatus,
            @JsonProperty("avatar") JsonNullable<? extends HrisUpdateEmployeeRequestDtoAvatar> avatar,
            @JsonProperty("hire_date") JsonNullable<OffsetDateTime> hireDate,
            @JsonProperty("start_date") JsonNullable<OffsetDateTime> startDate,
            @JsonProperty("tenure") JsonNullable<Double> tenure,
            @JsonProperty("work_anniversary") JsonNullable<OffsetDateTime> workAnniversary,
            @JsonProperty("employment_type") JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentType> employmentType,
            @JsonProperty("employment_contract_type") JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentContractType> employmentContractType,
            @JsonProperty("employment_status") JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentStatus> employmentStatus,
            @JsonProperty("termination_date") JsonNullable<OffsetDateTime> terminationDate,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("citizenships") JsonNullable<? extends List<CountryCodeEnum>> citizenships,
            @JsonProperty("custom_fields") JsonNullable<? extends List<CustomFields>> customFields,
            @JsonProperty("benefits") JsonNullable<? extends List<CreateHRISBenefit>> benefits,
            @JsonProperty("employee_number") JsonNullable<String> employeeNumber,
            @JsonProperty("national_identity_number") JsonNullable<? extends HrisUpdateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber,
            @JsonProperty("national_identity_numbers") JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers,
            @JsonProperty("home_location") JsonNullable<? extends HrisUpdateEmployeeRequestDtoHomeLocation> homeLocation,
            @JsonProperty("work_location") JsonNullable<? extends HrisUpdateEmployeeRequestDtoWorkLocation> workLocation,
            @JsonProperty("passthrough") JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        Utils.checkNotNull(personalEmail, "personalEmail");
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        Utils.checkNotNull(workEmail, "workEmail");
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(jobTitle, "jobTitle");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(managerId, "managerId");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        Utils.checkNotNull(ethnicity, "ethnicity");
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        Utils.checkNotNull(avatar, "avatar");
        Utils.checkNotNull(hireDate, "hireDate");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(tenure, "tenure");
        Utils.checkNotNull(workAnniversary, "workAnniversary");
        Utils.checkNotNull(employmentType, "employmentType");
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        Utils.checkNotNull(terminationDate, "terminationDate");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(citizenships, "citizenships");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(benefits, "benefits");
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        Utils.checkNotNull(homeLocation, "homeLocation");
        Utils.checkNotNull(workLocation, "workLocation");
        Utils.checkNotNull(passthrough, "passthrough");
        this.firstName = firstName;
        this.lastName = lastName;
        this.name = name;
        this.displayName = displayName;
        this.avatarUrl = avatarUrl;
        this.personalEmail = personalEmail;
        this.personalPhoneNumber = personalPhoneNumber;
        this.workEmail = workEmail;
        this.workPhoneNumber = workPhoneNumber;
        this.jobId = jobId;
        this.jobTitle = jobTitle;
        this.departmentId = departmentId;
        this.department = department;
        this.managerId = managerId;
        this.gender = gender;
        this.preferredLanguage = preferredLanguage;
        this.ethnicity = ethnicity;
        this.dateOfBirth = dateOfBirth;
        this.birthday = birthday;
        this.maritalStatus = maritalStatus;
        this.avatar = avatar;
        this.hireDate = hireDate;
        this.startDate = startDate;
        this.tenure = tenure;
        this.workAnniversary = workAnniversary;
        this.employmentType = employmentType;
        this.employmentContractType = employmentContractType;
        this.employmentStatus = employmentStatus;
        this.terminationDate = terminationDate;
        this.companyName = companyName;
        this.companyId = companyId;
        this.citizenships = citizenships;
        this.customFields = customFields;
        this.benefits = benefits;
        this.employeeNumber = employeeNumber;
        this.nationalIdentityNumber = nationalIdentityNumber;
        this.nationalIdentityNumbers = nationalIdentityNumbers;
        this.homeLocation = homeLocation;
        this.workLocation = workLocation;
        this.passthrough = passthrough;
    }
    
    public HrisUpdateEmployeeRequestDto() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The employee first name
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The employee last name
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The employee name
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The employee display name
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The employee avatar Url
     */
    @JsonIgnore
    public JsonNullable<String> avatarUrl() {
        return avatarUrl;
    }

    /**
     * The employee personal email
     */
    @JsonIgnore
    public JsonNullable<String> personalEmail() {
        return personalEmail;
    }

    /**
     * The employee personal phone number
     */
    @JsonIgnore
    public JsonNullable<String> personalPhoneNumber() {
        return personalPhoneNumber;
    }

    /**
     * The employee work email
     */
    @JsonIgnore
    public JsonNullable<String> workEmail() {
        return workEmail;
    }

    /**
     * The employee work phone number
     */
    @JsonIgnore
    public JsonNullable<String> workPhoneNumber() {
        return workPhoneNumber;
    }

    /**
     * The employee job id
     */
    @JsonIgnore
    public JsonNullable<String> jobId() {
        return jobId;
    }

    /**
     * The employee job title
     */
    @JsonIgnore
    public JsonNullable<String> jobTitle() {
        return jobTitle;
    }

    /**
     * The employee department id
     */
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * The employee department
     */
    @JsonIgnore
    public JsonNullable<String> department() {
        return department;
    }

    /**
     * The employee manager ID
     */
    @JsonIgnore
    public JsonNullable<String> managerId() {
        return managerId;
    }

    /**
     * The employee gender
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoGender> gender() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoGender>) gender;
    }

    /**
     * The employee preferred language
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoPreferredLanguage> preferredLanguage() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoPreferredLanguage>) preferredLanguage;
    }

    /**
     * The employee ethnicity
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoEthnicity> ethnicity() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoEthnicity>) ethnicity;
    }

    /**
     * The employee date_of_birth
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> dateOfBirth() {
        return dateOfBirth;
    }

    /**
     * The employee birthday
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> birthday() {
        return birthday;
    }

    /**
     * The employee marital status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoMaritalStatus> maritalStatus() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoMaritalStatus>) maritalStatus;
    }

    /**
     * The employee avatar
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoAvatar> avatar() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoAvatar>) avatar;
    }

    /**
     * The employee hire date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> hireDate() {
        return hireDate;
    }

    /**
     * The employee start date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * The employee tenure
     */
    @JsonIgnore
    public JsonNullable<Double> tenure() {
        return tenure;
    }

    /**
     * The employee work anniversary
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> workAnniversary() {
        return workAnniversary;
    }

    /**
     * The employee employment type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoEmploymentType> employmentType() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoEmploymentType>) employmentType;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoEmploymentContractType> employmentContractType() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoEmploymentContractType>) employmentContractType;
    }

    /**
     * The employee employment status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoEmploymentStatus> employmentStatus() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoEmploymentStatus>) employmentStatus;
    }

    /**
     * The employee termination date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> terminationDate() {
        return terminationDate;
    }

    /**
     * The employee company name
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The employee company id
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The citizenships of the Employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CountryCodeEnum>> citizenships() {
        return (JsonNullable<List<CountryCodeEnum>>) citizenships;
    }

    /**
     * The employee custom fields
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CustomFields>> customFields() {
        return (JsonNullable<List<CustomFields>>) customFields;
    }

    /**
     * Current benefits of the employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateHRISBenefit>> benefits() {
        return (JsonNullable<List<CreateHRISBenefit>>) benefits;
    }

    /**
     * The assigned employee number
     */
    @JsonIgnore
    public JsonNullable<String> employeeNumber() {
        return employeeNumber;
    }

    /**
     * The national identity number
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoNationalIdentityNumber>) nationalIdentityNumber;
    }

    /**
     * The national identity numbers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<NationalIdentityNumberApiModel>> nationalIdentityNumbers() {
        return (JsonNullable<List<NationalIdentityNumberApiModel>>) nationalIdentityNumbers;
    }

    /**
     * The employee home location
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoHomeLocation> homeLocation() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoHomeLocation>) homeLocation;
    }

    /**
     * The employee work location
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisUpdateEmployeeRequestDtoWorkLocation> workLocation() {
        return (JsonNullable<HrisUpdateEmployeeRequestDtoWorkLocation>) workLocation;
    }

    /**
     * Value to pass through to the provider
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> passthrough() {
        return (JsonNullable<Map<String, Object>>) passthrough;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The employee first name
     */
    public HrisUpdateEmployeeRequestDto withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The employee first name
     */
    public HrisUpdateEmployeeRequestDto withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The employee last name
     */
    public HrisUpdateEmployeeRequestDto withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The employee last name
     */
    public HrisUpdateEmployeeRequestDto withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The employee name
     */
    public HrisUpdateEmployeeRequestDto withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The employee name
     */
    public HrisUpdateEmployeeRequestDto withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The employee display name
     */
    public HrisUpdateEmployeeRequestDto withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The employee display name
     */
    public HrisUpdateEmployeeRequestDto withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The employee avatar Url
     */
    public HrisUpdateEmployeeRequestDto withAvatarUrl(String avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = JsonNullable.of(avatarUrl);
        return this;
    }

    /**
     * The employee avatar Url
     */
    public HrisUpdateEmployeeRequestDto withAvatarUrl(JsonNullable<String> avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = avatarUrl;
        return this;
    }

    /**
     * The employee personal email
     */
    public HrisUpdateEmployeeRequestDto withPersonalEmail(String personalEmail) {
        Utils.checkNotNull(personalEmail, "personalEmail");
        this.personalEmail = JsonNullable.of(personalEmail);
        return this;
    }

    /**
     * The employee personal email
     */
    public HrisUpdateEmployeeRequestDto withPersonalEmail(JsonNullable<String> personalEmail) {
        Utils.checkNotNull(personalEmail, "personalEmail");
        this.personalEmail = personalEmail;
        return this;
    }

    /**
     * The employee personal phone number
     */
    public HrisUpdateEmployeeRequestDto withPersonalPhoneNumber(String personalPhoneNumber) {
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        this.personalPhoneNumber = JsonNullable.of(personalPhoneNumber);
        return this;
    }

    /**
     * The employee personal phone number
     */
    public HrisUpdateEmployeeRequestDto withPersonalPhoneNumber(JsonNullable<String> personalPhoneNumber) {
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        this.personalPhoneNumber = personalPhoneNumber;
        return this;
    }

    /**
     * The employee work email
     */
    public HrisUpdateEmployeeRequestDto withWorkEmail(String workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = JsonNullable.of(workEmail);
        return this;
    }

    /**
     * The employee work email
     */
    public HrisUpdateEmployeeRequestDto withWorkEmail(JsonNullable<String> workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = workEmail;
        return this;
    }

    /**
     * The employee work phone number
     */
    public HrisUpdateEmployeeRequestDto withWorkPhoneNumber(String workPhoneNumber) {
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        this.workPhoneNumber = JsonNullable.of(workPhoneNumber);
        return this;
    }

    /**
     * The employee work phone number
     */
    public HrisUpdateEmployeeRequestDto withWorkPhoneNumber(JsonNullable<String> workPhoneNumber) {
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        this.workPhoneNumber = workPhoneNumber;
        return this;
    }

    /**
     * The employee job id
     */
    public HrisUpdateEmployeeRequestDto withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = JsonNullable.of(jobId);
        return this;
    }

    /**
     * The employee job id
     */
    public HrisUpdateEmployeeRequestDto withJobId(JsonNullable<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    /**
     * The employee job title
     */
    public HrisUpdateEmployeeRequestDto withJobTitle(String jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = JsonNullable.of(jobTitle);
        return this;
    }

    /**
     * The employee job title
     */
    public HrisUpdateEmployeeRequestDto withJobTitle(JsonNullable<String> jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = jobTitle;
        return this;
    }

    /**
     * The employee department id
     */
    public HrisUpdateEmployeeRequestDto withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The employee department id
     */
    public HrisUpdateEmployeeRequestDto withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * The employee department
     */
    public HrisUpdateEmployeeRequestDto withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * The employee department
     */
    public HrisUpdateEmployeeRequestDto withDepartment(JsonNullable<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * The employee manager ID
     */
    public HrisUpdateEmployeeRequestDto withManagerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = JsonNullable.of(managerId);
        return this;
    }

    /**
     * The employee manager ID
     */
    public HrisUpdateEmployeeRequestDto withManagerId(JsonNullable<String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }

    /**
     * The employee gender
     */
    public HrisUpdateEmployeeRequestDto withGender(HrisUpdateEmployeeRequestDtoGender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = JsonNullable.of(gender);
        return this;
    }

    /**
     * The employee gender
     */
    public HrisUpdateEmployeeRequestDto withGender(JsonNullable<? extends HrisUpdateEmployeeRequestDtoGender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    /**
     * The employee preferred language
     */
    public HrisUpdateEmployeeRequestDto withPreferredLanguage(HrisUpdateEmployeeRequestDtoPreferredLanguage preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = JsonNullable.of(preferredLanguage);
        return this;
    }

    /**
     * The employee preferred language
     */
    public HrisUpdateEmployeeRequestDto withPreferredLanguage(JsonNullable<? extends HrisUpdateEmployeeRequestDtoPreferredLanguage> preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = preferredLanguage;
        return this;
    }

    /**
     * The employee ethnicity
     */
    public HrisUpdateEmployeeRequestDto withEthnicity(HrisUpdateEmployeeRequestDtoEthnicity ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = JsonNullable.of(ethnicity);
        return this;
    }

    /**
     * The employee ethnicity
     */
    public HrisUpdateEmployeeRequestDto withEthnicity(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEthnicity> ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = ethnicity;
        return this;
    }

    /**
     * The employee date_of_birth
     */
    public HrisUpdateEmployeeRequestDto withDateOfBirth(OffsetDateTime dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = JsonNullable.of(dateOfBirth);
        return this;
    }

    /**
     * The employee date_of_birth
     */
    public HrisUpdateEmployeeRequestDto withDateOfBirth(JsonNullable<OffsetDateTime> dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = dateOfBirth;
        return this;
    }

    /**
     * The employee birthday
     */
    public HrisUpdateEmployeeRequestDto withBirthday(OffsetDateTime birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The employee birthday
     */
    public HrisUpdateEmployeeRequestDto withBirthday(JsonNullable<OffsetDateTime> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * The employee marital status
     */
    public HrisUpdateEmployeeRequestDto withMaritalStatus(HrisUpdateEmployeeRequestDtoMaritalStatus maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = JsonNullable.of(maritalStatus);
        return this;
    }

    /**
     * The employee marital status
     */
    public HrisUpdateEmployeeRequestDto withMaritalStatus(JsonNullable<? extends HrisUpdateEmployeeRequestDtoMaritalStatus> maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = maritalStatus;
        return this;
    }

    /**
     * The employee avatar
     */
    public HrisUpdateEmployeeRequestDto withAvatar(HrisUpdateEmployeeRequestDtoAvatar avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = JsonNullable.of(avatar);
        return this;
    }

    /**
     * The employee avatar
     */
    public HrisUpdateEmployeeRequestDto withAvatar(JsonNullable<? extends HrisUpdateEmployeeRequestDtoAvatar> avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = avatar;
        return this;
    }

    /**
     * The employee hire date
     */
    public HrisUpdateEmployeeRequestDto withHireDate(OffsetDateTime hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = JsonNullable.of(hireDate);
        return this;
    }

    /**
     * The employee hire date
     */
    public HrisUpdateEmployeeRequestDto withHireDate(JsonNullable<OffsetDateTime> hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = hireDate;
        return this;
    }

    /**
     * The employee start date
     */
    public HrisUpdateEmployeeRequestDto withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * The employee start date
     */
    public HrisUpdateEmployeeRequestDto withStartDate(JsonNullable<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The employee tenure
     */
    public HrisUpdateEmployeeRequestDto withTenure(double tenure) {
        Utils.checkNotNull(tenure, "tenure");
        this.tenure = JsonNullable.of(tenure);
        return this;
    }

    /**
     * The employee tenure
     */
    public HrisUpdateEmployeeRequestDto withTenure(JsonNullable<Double> tenure) {
        Utils.checkNotNull(tenure, "tenure");
        this.tenure = tenure;
        return this;
    }

    /**
     * The employee work anniversary
     */
    public HrisUpdateEmployeeRequestDto withWorkAnniversary(OffsetDateTime workAnniversary) {
        Utils.checkNotNull(workAnniversary, "workAnniversary");
        this.workAnniversary = JsonNullable.of(workAnniversary);
        return this;
    }

    /**
     * The employee work anniversary
     */
    public HrisUpdateEmployeeRequestDto withWorkAnniversary(JsonNullable<OffsetDateTime> workAnniversary) {
        Utils.checkNotNull(workAnniversary, "workAnniversary");
        this.workAnniversary = workAnniversary;
        return this;
    }

    /**
     * The employee employment type
     */
    public HrisUpdateEmployeeRequestDto withEmploymentType(HrisUpdateEmployeeRequestDtoEmploymentType employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = JsonNullable.of(employmentType);
        return this;
    }

    /**
     * The employee employment type
     */
    public HrisUpdateEmployeeRequestDto withEmploymentType(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentType> employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = employmentType;
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     */
    public HrisUpdateEmployeeRequestDto withEmploymentContractType(HrisUpdateEmployeeRequestDtoEmploymentContractType employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = JsonNullable.of(employmentContractType);
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     */
    public HrisUpdateEmployeeRequestDto withEmploymentContractType(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentContractType> employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = employmentContractType;
        return this;
    }

    /**
     * The employee employment status
     */
    public HrisUpdateEmployeeRequestDto withEmploymentStatus(HrisUpdateEmployeeRequestDtoEmploymentStatus employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = JsonNullable.of(employmentStatus);
        return this;
    }

    /**
     * The employee employment status
     */
    public HrisUpdateEmployeeRequestDto withEmploymentStatus(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentStatus> employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = employmentStatus;
        return this;
    }

    /**
     * The employee termination date
     */
    public HrisUpdateEmployeeRequestDto withTerminationDate(OffsetDateTime terminationDate) {
        Utils.checkNotNull(terminationDate, "terminationDate");
        this.terminationDate = JsonNullable.of(terminationDate);
        return this;
    }

    /**
     * The employee termination date
     */
    public HrisUpdateEmployeeRequestDto withTerminationDate(JsonNullable<OffsetDateTime> terminationDate) {
        Utils.checkNotNull(terminationDate, "terminationDate");
        this.terminationDate = terminationDate;
        return this;
    }

    /**
     * The employee company name
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisUpdateEmployeeRequestDto withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The employee company name
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisUpdateEmployeeRequestDto withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The employee company id
     */
    public HrisUpdateEmployeeRequestDto withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The employee company id
     */
    public HrisUpdateEmployeeRequestDto withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The citizenships of the Employee
     */
    public HrisUpdateEmployeeRequestDto withCitizenships(List<CountryCodeEnum> citizenships) {
        Utils.checkNotNull(citizenships, "citizenships");
        this.citizenships = JsonNullable.of(citizenships);
        return this;
    }

    /**
     * The citizenships of the Employee
     */
    public HrisUpdateEmployeeRequestDto withCitizenships(JsonNullable<? extends List<CountryCodeEnum>> citizenships) {
        Utils.checkNotNull(citizenships, "citizenships");
        this.citizenships = citizenships;
        return this;
    }

    /**
     * The employee custom fields
     */
    public HrisUpdateEmployeeRequestDto withCustomFields(List<CustomFields> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = JsonNullable.of(customFields);
        return this;
    }

    /**
     * The employee custom fields
     */
    public HrisUpdateEmployeeRequestDto withCustomFields(JsonNullable<? extends List<CustomFields>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * Current benefits of the employee
     */
    public HrisUpdateEmployeeRequestDto withBenefits(List<CreateHRISBenefit> benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = JsonNullable.of(benefits);
        return this;
    }

    /**
     * Current benefits of the employee
     */
    public HrisUpdateEmployeeRequestDto withBenefits(JsonNullable<? extends List<CreateHRISBenefit>> benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = benefits;
        return this;
    }

    /**
     * The assigned employee number
     */
    public HrisUpdateEmployeeRequestDto withEmployeeNumber(String employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = JsonNullable.of(employeeNumber);
        return this;
    }

    /**
     * The assigned employee number
     */
    public HrisUpdateEmployeeRequestDto withEmployeeNumber(JsonNullable<String> employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = employeeNumber;
        return this;
    }

    /**
     * The national identity number
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisUpdateEmployeeRequestDto withNationalIdentityNumber(HrisUpdateEmployeeRequestDtoNationalIdentityNumber nationalIdentityNumber) {
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        this.nationalIdentityNumber = JsonNullable.of(nationalIdentityNumber);
        return this;
    }

    /**
     * The national identity number
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisUpdateEmployeeRequestDto withNationalIdentityNumber(JsonNullable<? extends HrisUpdateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber) {
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        this.nationalIdentityNumber = nationalIdentityNumber;
        return this;
    }

    /**
     * The national identity numbers
     */
    public HrisUpdateEmployeeRequestDto withNationalIdentityNumbers(List<NationalIdentityNumberApiModel> nationalIdentityNumbers) {
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        this.nationalIdentityNumbers = JsonNullable.of(nationalIdentityNumbers);
        return this;
    }

    /**
     * The national identity numbers
     */
    public HrisUpdateEmployeeRequestDto withNationalIdentityNumbers(JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers) {
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        this.nationalIdentityNumbers = nationalIdentityNumbers;
        return this;
    }

    /**
     * The employee home location
     */
    public HrisUpdateEmployeeRequestDto withHomeLocation(HrisUpdateEmployeeRequestDtoHomeLocation homeLocation) {
        Utils.checkNotNull(homeLocation, "homeLocation");
        this.homeLocation = JsonNullable.of(homeLocation);
        return this;
    }

    /**
     * The employee home location
     */
    public HrisUpdateEmployeeRequestDto withHomeLocation(JsonNullable<? extends HrisUpdateEmployeeRequestDtoHomeLocation> homeLocation) {
        Utils.checkNotNull(homeLocation, "homeLocation");
        this.homeLocation = homeLocation;
        return this;
    }

    /**
     * The employee work location
     */
    public HrisUpdateEmployeeRequestDto withWorkLocation(HrisUpdateEmployeeRequestDtoWorkLocation workLocation) {
        Utils.checkNotNull(workLocation, "workLocation");
        this.workLocation = JsonNullable.of(workLocation);
        return this;
    }

    /**
     * The employee work location
     */
    public HrisUpdateEmployeeRequestDto withWorkLocation(JsonNullable<? extends HrisUpdateEmployeeRequestDtoWorkLocation> workLocation) {
        Utils.checkNotNull(workLocation, "workLocation");
        this.workLocation = workLocation;
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisUpdateEmployeeRequestDto withPassthrough(Map<String, Object> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = JsonNullable.of(passthrough);
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisUpdateEmployeeRequestDto withPassthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = passthrough;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisUpdateEmployeeRequestDto other = (HrisUpdateEmployeeRequestDto) o;
        return 
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.avatarUrl, other.avatarUrl) &&
            Objects.deepEquals(this.personalEmail, other.personalEmail) &&
            Objects.deepEquals(this.personalPhoneNumber, other.personalPhoneNumber) &&
            Objects.deepEquals(this.workEmail, other.workEmail) &&
            Objects.deepEquals(this.workPhoneNumber, other.workPhoneNumber) &&
            Objects.deepEquals(this.jobId, other.jobId) &&
            Objects.deepEquals(this.jobTitle, other.jobTitle) &&
            Objects.deepEquals(this.departmentId, other.departmentId) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.managerId, other.managerId) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.preferredLanguage, other.preferredLanguage) &&
            Objects.deepEquals(this.ethnicity, other.ethnicity) &&
            Objects.deepEquals(this.dateOfBirth, other.dateOfBirth) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.maritalStatus, other.maritalStatus) &&
            Objects.deepEquals(this.avatar, other.avatar) &&
            Objects.deepEquals(this.hireDate, other.hireDate) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.tenure, other.tenure) &&
            Objects.deepEquals(this.workAnniversary, other.workAnniversary) &&
            Objects.deepEquals(this.employmentType, other.employmentType) &&
            Objects.deepEquals(this.employmentContractType, other.employmentContractType) &&
            Objects.deepEquals(this.employmentStatus, other.employmentStatus) &&
            Objects.deepEquals(this.terminationDate, other.terminationDate) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.citizenships, other.citizenships) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.benefits, other.benefits) &&
            Objects.deepEquals(this.employeeNumber, other.employeeNumber) &&
            Objects.deepEquals(this.nationalIdentityNumber, other.nationalIdentityNumber) &&
            Objects.deepEquals(this.nationalIdentityNumbers, other.nationalIdentityNumbers) &&
            Objects.deepEquals(this.homeLocation, other.homeLocation) &&
            Objects.deepEquals(this.workLocation, other.workLocation) &&
            Objects.deepEquals(this.passthrough, other.passthrough);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            firstName,
            lastName,
            name,
            displayName,
            avatarUrl,
            personalEmail,
            personalPhoneNumber,
            workEmail,
            workPhoneNumber,
            jobId,
            jobTitle,
            departmentId,
            department,
            managerId,
            gender,
            preferredLanguage,
            ethnicity,
            dateOfBirth,
            birthday,
            maritalStatus,
            avatar,
            hireDate,
            startDate,
            tenure,
            workAnniversary,
            employmentType,
            employmentContractType,
            employmentStatus,
            terminationDate,
            companyName,
            companyId,
            citizenships,
            customFields,
            benefits,
            employeeNumber,
            nationalIdentityNumber,
            nationalIdentityNumbers,
            homeLocation,
            workLocation,
            passthrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisUpdateEmployeeRequestDto.class,
                "firstName", firstName,
                "lastName", lastName,
                "name", name,
                "displayName", displayName,
                "avatarUrl", avatarUrl,
                "personalEmail", personalEmail,
                "personalPhoneNumber", personalPhoneNumber,
                "workEmail", workEmail,
                "workPhoneNumber", workPhoneNumber,
                "jobId", jobId,
                "jobTitle", jobTitle,
                "departmentId", departmentId,
                "department", department,
                "managerId", managerId,
                "gender", gender,
                "preferredLanguage", preferredLanguage,
                "ethnicity", ethnicity,
                "dateOfBirth", dateOfBirth,
                "birthday", birthday,
                "maritalStatus", maritalStatus,
                "avatar", avatar,
                "hireDate", hireDate,
                "startDate", startDate,
                "tenure", tenure,
                "workAnniversary", workAnniversary,
                "employmentType", employmentType,
                "employmentContractType", employmentContractType,
                "employmentStatus", employmentStatus,
                "terminationDate", terminationDate,
                "companyName", companyName,
                "companyId", companyId,
                "citizenships", citizenships,
                "customFields", customFields,
                "benefits", benefits,
                "employeeNumber", employeeNumber,
                "nationalIdentityNumber", nationalIdentityNumber,
                "nationalIdentityNumbers", nationalIdentityNumbers,
                "homeLocation", homeLocation,
                "workLocation", workLocation,
                "passthrough", passthrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> displayName = JsonNullable.undefined();
 
        private JsonNullable<String> avatarUrl = JsonNullable.undefined();
 
        private JsonNullable<String> personalEmail = JsonNullable.undefined();
 
        private JsonNullable<String> personalPhoneNumber = JsonNullable.undefined();
 
        private JsonNullable<String> workEmail = JsonNullable.undefined();
 
        private JsonNullable<String> workPhoneNumber = JsonNullable.undefined();
 
        private JsonNullable<String> jobId = JsonNullable.undefined();
 
        private JsonNullable<String> jobTitle = JsonNullable.undefined();
 
        private JsonNullable<String> departmentId = JsonNullable.undefined();
 
        private JsonNullable<String> department = JsonNullable.undefined();
 
        private JsonNullable<String> managerId = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoGender> gender = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoPreferredLanguage> preferredLanguage = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEthnicity> ethnicity = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> dateOfBirth = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> birthday = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoMaritalStatus> maritalStatus = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoAvatar> avatar = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> hireDate = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> startDate = JsonNullable.undefined();
 
        private JsonNullable<Double> tenure = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> workAnniversary = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentType> employmentType = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentContractType> employmentContractType = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentStatus> employmentStatus = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> terminationDate = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CountryCodeEnum>> citizenships = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CustomFields>> customFields = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CreateHRISBenefit>> benefits = JsonNullable.undefined();
 
        private JsonNullable<String> employeeNumber = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoHomeLocation> homeLocation = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisUpdateEmployeeRequestDtoWorkLocation> workLocation = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> passthrough = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The employee first name
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The employee first name
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The employee last name
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The employee last name
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The employee name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The employee name
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The employee display name
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The employee display name
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The employee avatar Url
         */
        public Builder avatarUrl(String avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = JsonNullable.of(avatarUrl);
            return this;
        }

        /**
         * The employee avatar Url
         */
        public Builder avatarUrl(JsonNullable<String> avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = avatarUrl;
            return this;
        }

        /**
         * The employee personal email
         */
        public Builder personalEmail(String personalEmail) {
            Utils.checkNotNull(personalEmail, "personalEmail");
            this.personalEmail = JsonNullable.of(personalEmail);
            return this;
        }

        /**
         * The employee personal email
         */
        public Builder personalEmail(JsonNullable<String> personalEmail) {
            Utils.checkNotNull(personalEmail, "personalEmail");
            this.personalEmail = personalEmail;
            return this;
        }

        /**
         * The employee personal phone number
         */
        public Builder personalPhoneNumber(String personalPhoneNumber) {
            Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
            this.personalPhoneNumber = JsonNullable.of(personalPhoneNumber);
            return this;
        }

        /**
         * The employee personal phone number
         */
        public Builder personalPhoneNumber(JsonNullable<String> personalPhoneNumber) {
            Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
            this.personalPhoneNumber = personalPhoneNumber;
            return this;
        }

        /**
         * The employee work email
         */
        public Builder workEmail(String workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = JsonNullable.of(workEmail);
            return this;
        }

        /**
         * The employee work email
         */
        public Builder workEmail(JsonNullable<String> workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = workEmail;
            return this;
        }

        /**
         * The employee work phone number
         */
        public Builder workPhoneNumber(String workPhoneNumber) {
            Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
            this.workPhoneNumber = JsonNullable.of(workPhoneNumber);
            return this;
        }

        /**
         * The employee work phone number
         */
        public Builder workPhoneNumber(JsonNullable<String> workPhoneNumber) {
            Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
            this.workPhoneNumber = workPhoneNumber;
            return this;
        }

        /**
         * The employee job id
         */
        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = JsonNullable.of(jobId);
            return this;
        }

        /**
         * The employee job id
         */
        public Builder jobId(JsonNullable<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        /**
         * The employee job title
         */
        public Builder jobTitle(String jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = JsonNullable.of(jobTitle);
            return this;
        }

        /**
         * The employee job title
         */
        public Builder jobTitle(JsonNullable<String> jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = jobTitle;
            return this;
        }

        /**
         * The employee department id
         */
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The employee department id
         */
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }

        /**
         * The employee department
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The employee department
         */
        public Builder department(JsonNullable<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * The employee manager ID
         */
        public Builder managerId(String managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = JsonNullable.of(managerId);
            return this;
        }

        /**
         * The employee manager ID
         */
        public Builder managerId(JsonNullable<String> managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = managerId;
            return this;
        }

        /**
         * The employee gender
         */
        public Builder gender(HrisUpdateEmployeeRequestDtoGender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The employee gender
         */
        public Builder gender(JsonNullable<? extends HrisUpdateEmployeeRequestDtoGender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        /**
         * The employee preferred language
         */
        public Builder preferredLanguage(HrisUpdateEmployeeRequestDtoPreferredLanguage preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = JsonNullable.of(preferredLanguage);
            return this;
        }

        /**
         * The employee preferred language
         */
        public Builder preferredLanguage(JsonNullable<? extends HrisUpdateEmployeeRequestDtoPreferredLanguage> preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = preferredLanguage;
            return this;
        }

        /**
         * The employee ethnicity
         */
        public Builder ethnicity(HrisUpdateEmployeeRequestDtoEthnicity ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = JsonNullable.of(ethnicity);
            return this;
        }

        /**
         * The employee ethnicity
         */
        public Builder ethnicity(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEthnicity> ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = ethnicity;
            return this;
        }

        /**
         * The employee date_of_birth
         */
        public Builder dateOfBirth(OffsetDateTime dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = JsonNullable.of(dateOfBirth);
            return this;
        }

        /**
         * The employee date_of_birth
         */
        public Builder dateOfBirth(JsonNullable<OffsetDateTime> dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        /**
         * The employee birthday
         */
        public Builder birthday(OffsetDateTime birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The employee birthday
         */
        public Builder birthday(JsonNullable<OffsetDateTime> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        /**
         * The employee marital status
         */
        public Builder maritalStatus(HrisUpdateEmployeeRequestDtoMaritalStatus maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = JsonNullable.of(maritalStatus);
            return this;
        }

        /**
         * The employee marital status
         */
        public Builder maritalStatus(JsonNullable<? extends HrisUpdateEmployeeRequestDtoMaritalStatus> maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = maritalStatus;
            return this;
        }

        /**
         * The employee avatar
         */
        public Builder avatar(HrisUpdateEmployeeRequestDtoAvatar avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = JsonNullable.of(avatar);
            return this;
        }

        /**
         * The employee avatar
         */
        public Builder avatar(JsonNullable<? extends HrisUpdateEmployeeRequestDtoAvatar> avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = avatar;
            return this;
        }

        /**
         * The employee hire date
         */
        public Builder hireDate(OffsetDateTime hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = JsonNullable.of(hireDate);
            return this;
        }

        /**
         * The employee hire date
         */
        public Builder hireDate(JsonNullable<OffsetDateTime> hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = hireDate;
            return this;
        }

        /**
         * The employee start date
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The employee start date
         */
        public Builder startDate(JsonNullable<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The employee tenure
         */
        public Builder tenure(double tenure) {
            Utils.checkNotNull(tenure, "tenure");
            this.tenure = JsonNullable.of(tenure);
            return this;
        }

        /**
         * The employee tenure
         */
        public Builder tenure(JsonNullable<Double> tenure) {
            Utils.checkNotNull(tenure, "tenure");
            this.tenure = tenure;
            return this;
        }

        /**
         * The employee work anniversary
         */
        public Builder workAnniversary(OffsetDateTime workAnniversary) {
            Utils.checkNotNull(workAnniversary, "workAnniversary");
            this.workAnniversary = JsonNullable.of(workAnniversary);
            return this;
        }

        /**
         * The employee work anniversary
         */
        public Builder workAnniversary(JsonNullable<OffsetDateTime> workAnniversary) {
            Utils.checkNotNull(workAnniversary, "workAnniversary");
            this.workAnniversary = workAnniversary;
            return this;
        }

        /**
         * The employee employment type
         */
        public Builder employmentType(HrisUpdateEmployeeRequestDtoEmploymentType employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = JsonNullable.of(employmentType);
            return this;
        }

        /**
         * The employee employment type
         */
        public Builder employmentType(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentType> employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = employmentType;
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         */
        public Builder employmentContractType(HrisUpdateEmployeeRequestDtoEmploymentContractType employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = JsonNullable.of(employmentContractType);
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         */
        public Builder employmentContractType(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentContractType> employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = employmentContractType;
            return this;
        }

        /**
         * The employee employment status
         */
        public Builder employmentStatus(HrisUpdateEmployeeRequestDtoEmploymentStatus employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = JsonNullable.of(employmentStatus);
            return this;
        }

        /**
         * The employee employment status
         */
        public Builder employmentStatus(JsonNullable<? extends HrisUpdateEmployeeRequestDtoEmploymentStatus> employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = employmentStatus;
            return this;
        }

        /**
         * The employee termination date
         */
        public Builder terminationDate(OffsetDateTime terminationDate) {
            Utils.checkNotNull(terminationDate, "terminationDate");
            this.terminationDate = JsonNullable.of(terminationDate);
            return this;
        }

        /**
         * The employee termination date
         */
        public Builder terminationDate(JsonNullable<OffsetDateTime> terminationDate) {
            Utils.checkNotNull(terminationDate, "terminationDate");
            this.terminationDate = terminationDate;
            return this;
        }

        /**
         * The employee company name
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The employee company name
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * The employee company id
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The employee company id
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * The citizenships of the Employee
         */
        public Builder citizenships(List<CountryCodeEnum> citizenships) {
            Utils.checkNotNull(citizenships, "citizenships");
            this.citizenships = JsonNullable.of(citizenships);
            return this;
        }

        /**
         * The citizenships of the Employee
         */
        public Builder citizenships(JsonNullable<? extends List<CountryCodeEnum>> citizenships) {
            Utils.checkNotNull(citizenships, "citizenships");
            this.citizenships = citizenships;
            return this;
        }

        /**
         * The employee custom fields
         */
        public Builder customFields(List<CustomFields> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        /**
         * The employee custom fields
         */
        public Builder customFields(JsonNullable<? extends List<CustomFields>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * Current benefits of the employee
         */
        public Builder benefits(List<CreateHRISBenefit> benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = JsonNullable.of(benefits);
            return this;
        }

        /**
         * Current benefits of the employee
         */
        public Builder benefits(JsonNullable<? extends List<CreateHRISBenefit>> benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = benefits;
            return this;
        }

        /**
         * The assigned employee number
         */
        public Builder employeeNumber(String employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = JsonNullable.of(employeeNumber);
            return this;
        }

        /**
         * The assigned employee number
         */
        public Builder employeeNumber(JsonNullable<String> employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = employeeNumber;
            return this;
        }

        /**
         * The national identity number
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nationalIdentityNumber(HrisUpdateEmployeeRequestDtoNationalIdentityNumber nationalIdentityNumber) {
            Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
            this.nationalIdentityNumber = JsonNullable.of(nationalIdentityNumber);
            return this;
        }

        /**
         * The national identity number
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nationalIdentityNumber(JsonNullable<? extends HrisUpdateEmployeeRequestDtoNationalIdentityNumber> nationalIdentityNumber) {
            Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
            this.nationalIdentityNumber = nationalIdentityNumber;
            return this;
        }

        /**
         * The national identity numbers
         */
        public Builder nationalIdentityNumbers(List<NationalIdentityNumberApiModel> nationalIdentityNumbers) {
            Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
            this.nationalIdentityNumbers = JsonNullable.of(nationalIdentityNumbers);
            return this;
        }

        /**
         * The national identity numbers
         */
        public Builder nationalIdentityNumbers(JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers) {
            Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
            this.nationalIdentityNumbers = nationalIdentityNumbers;
            return this;
        }

        /**
         * The employee home location
         */
        public Builder homeLocation(HrisUpdateEmployeeRequestDtoHomeLocation homeLocation) {
            Utils.checkNotNull(homeLocation, "homeLocation");
            this.homeLocation = JsonNullable.of(homeLocation);
            return this;
        }

        /**
         * The employee home location
         */
        public Builder homeLocation(JsonNullable<? extends HrisUpdateEmployeeRequestDtoHomeLocation> homeLocation) {
            Utils.checkNotNull(homeLocation, "homeLocation");
            this.homeLocation = homeLocation;
            return this;
        }

        /**
         * The employee work location
         */
        public Builder workLocation(HrisUpdateEmployeeRequestDtoWorkLocation workLocation) {
            Utils.checkNotNull(workLocation, "workLocation");
            this.workLocation = JsonNullable.of(workLocation);
            return this;
        }

        /**
         * The employee work location
         */
        public Builder workLocation(JsonNullable<? extends HrisUpdateEmployeeRequestDtoWorkLocation> workLocation) {
            Utils.checkNotNull(workLocation, "workLocation");
            this.workLocation = workLocation;
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(Map<String, Object> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = JsonNullable.of(passthrough);
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = passthrough;
            return this;
        }
        
        public HrisUpdateEmployeeRequestDto build() {
            return new HrisUpdateEmployeeRequestDto(
                firstName,
                lastName,
                name,
                displayName,
                avatarUrl,
                personalEmail,
                personalPhoneNumber,
                workEmail,
                workPhoneNumber,
                jobId,
                jobTitle,
                departmentId,
                department,
                managerId,
                gender,
                preferredLanguage,
                ethnicity,
                dateOfBirth,
                birthday,
                maritalStatus,
                avatar,
                hireDate,
                startDate,
                tenure,
                workAnniversary,
                employmentType,
                employmentContractType,
                employmentStatus,
                terminationDate,
                companyName,
                companyId,
                citizenships,
                customFields,
                benefits,
                employeeNumber,
                nationalIdentityNumber,
                nationalIdentityNumbers,
                homeLocation,
                workLocation,
                passthrough);
        }
    }
}

