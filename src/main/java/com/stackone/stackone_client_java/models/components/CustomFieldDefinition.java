/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

public class CustomFieldDefinition {

    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Provider's unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_id")
    private JsonNullable<String> remoteId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The type of the custom field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends CustomFieldDefinitionType> type;

    /**
     * An array of possible options for the custom field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private JsonNullable<? extends List<CustomFieldOption>> options;

    @JsonCreator
    public CustomFieldDefinition(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("remote_id") JsonNullable<String> remoteId,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("type") JsonNullable<? extends CustomFieldDefinitionType> type,
            @JsonProperty("options") JsonNullable<? extends List<CustomFieldOption>> options) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(remoteId, "remoteId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(options, "options");
        this.id = id;
        this.remoteId = remoteId;
        this.name = name;
        this.description = description;
        this.type = type;
        this.options = options;
    }
    
    public CustomFieldDefinition() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Provider's unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> remoteId() {
        return remoteId;
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The type of the custom field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CustomFieldDefinitionType> type() {
        return (JsonNullable<CustomFieldDefinitionType>) type;
    }

    /**
     * An array of possible options for the custom field.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CustomFieldOption>> options() {
        return (JsonNullable<List<CustomFieldOption>>) options;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier
     */
    public CustomFieldDefinition withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public CustomFieldDefinition withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public CustomFieldDefinition withRemoteId(String remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = JsonNullable.of(remoteId);
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public CustomFieldDefinition withRemoteId(JsonNullable<String> remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = remoteId;
        return this;
    }

    public CustomFieldDefinition withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public CustomFieldDefinition withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CustomFieldDefinition withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    public CustomFieldDefinition withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The type of the custom field.
     */
    public CustomFieldDefinition withType(CustomFieldDefinitionType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of the custom field.
     */
    public CustomFieldDefinition withType(JsonNullable<? extends CustomFieldDefinitionType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * An array of possible options for the custom field.
     */
    public CustomFieldDefinition withOptions(List<CustomFieldOption> options) {
        Utils.checkNotNull(options, "options");
        this.options = JsonNullable.of(options);
        return this;
    }

    /**
     * An array of possible options for the custom field.
     */
    public CustomFieldDefinition withOptions(JsonNullable<? extends List<CustomFieldOption>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomFieldDefinition other = (CustomFieldDefinition) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.remoteId, other.remoteId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            remoteId,
            name,
            description,
            type,
            options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomFieldDefinition.class,
                "id", id,
                "remoteId", remoteId,
                "name", name,
                "description", description,
                "type", type,
                "options", options);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> remoteId = JsonNullable.undefined();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<? extends CustomFieldDefinitionType> type = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CustomFieldOption>> options = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(String remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = JsonNullable.of(remoteId);
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(JsonNullable<String> remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = remoteId;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The type of the custom field.
         */
        public Builder type(CustomFieldDefinitionType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of the custom field.
         */
        public Builder type(JsonNullable<? extends CustomFieldDefinitionType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * An array of possible options for the custom field.
         */
        public Builder options(List<CustomFieldOption> options) {
            Utils.checkNotNull(options, "options");
            this.options = JsonNullable.of(options);
            return this;
        }

        /**
         * An array of possible options for the custom field.
         */
        public Builder options(JsonNullable<? extends List<CustomFieldOption>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }
        
        public CustomFieldDefinition build() {
            return new CustomFieldDefinition(
                id,
                remoteId,
                name,
                description,
                type,
                options);
        }
    }
}
