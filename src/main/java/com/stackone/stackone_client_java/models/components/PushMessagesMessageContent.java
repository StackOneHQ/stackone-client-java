/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;

public class PushMessagesMessageContent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtitle")
    private JsonNullable<String> subtitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private JsonNullable<String> body;

    @JsonCreator
    public PushMessagesMessageContent(
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("subtitle") JsonNullable<String> subtitle,
            @JsonProperty("body") JsonNullable<String> body) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(subtitle, "subtitle");
        Utils.checkNotNull(body, "body");
        this.title = title;
        this.subtitle = subtitle;
        this.body = body;
    }
    
    public PushMessagesMessageContent() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    @JsonIgnore
    public JsonNullable<String> subtitle() {
        return subtitle;
    }

    @JsonIgnore
    public JsonNullable<String> body() {
        return body;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PushMessagesMessageContent withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    public PushMessagesMessageContent withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public PushMessagesMessageContent withSubtitle(String subtitle) {
        Utils.checkNotNull(subtitle, "subtitle");
        this.subtitle = JsonNullable.of(subtitle);
        return this;
    }

    public PushMessagesMessageContent withSubtitle(JsonNullable<String> subtitle) {
        Utils.checkNotNull(subtitle, "subtitle");
        this.subtitle = subtitle;
        return this;
    }

    public PushMessagesMessageContent withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = JsonNullable.of(body);
        return this;
    }

    public PushMessagesMessageContent withBody(JsonNullable<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PushMessagesMessageContent other = (PushMessagesMessageContent) o;
        return 
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.subtitle, other.subtitle) &&
            Utils.enhancedDeepEquals(this.body, other.body);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            title,
            subtitle,
            body);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PushMessagesMessageContent.class,
                "title", title,
                "subtitle", subtitle,
                "body", body);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<String> subtitle = JsonNullable.undefined();
 
        private JsonNullable<String> body = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder subtitle(String subtitle) {
            Utils.checkNotNull(subtitle, "subtitle");
            this.subtitle = JsonNullable.of(subtitle);
            return this;
        }

        public Builder subtitle(JsonNullable<String> subtitle) {
            Utils.checkNotNull(subtitle, "subtitle");
            this.subtitle = subtitle;
            return this;
        }

        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = JsonNullable.of(body);
            return this;
        }

        public Builder body(JsonNullable<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }
        
        public PushMessagesMessageContent build() {
            return new PushMessagesMessageContent(
                title,
                subtitle,
                body);
        }
    }
}
