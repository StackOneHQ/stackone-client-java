/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class TicketingTicketUpdateRequestDto {
    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_custom_fields")
    private JsonNullable<? extends Map<String, Object>> unifiedCustomFields;

    /**
     * The title or subject of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * Users who reported the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reporters")
    private JsonNullable<? extends List<String>> reporters;

    /**
     * Agents assigned to the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    private JsonNullable<? extends List<String>> assignees;

    /**
     * Array of content associated with the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private JsonNullable<? extends List<TicketingContent>> content;

    /**
     * ID of the parent ticket if this is a sub-ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private JsonNullable<String> parentId;

    /**
     * Priority of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private JsonNullable<? extends TicketingTicketUpdateRequestDtoPriority> priority;

    /**
     * The tags of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends List<String>> tags;

    /**
     * Project the ticket belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    private JsonNullable<String> projectId;

    /**
     * Components to associate with the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("component_ids")
    private JsonNullable<String> componentIds;

    /**
     * Current status of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends TicketingTicketUpdateRequestDtoStatus> status;

    @JsonCreator
    public TicketingTicketUpdateRequestDto(
            @JsonProperty("unified_custom_fields") JsonNullable<? extends Map<String, Object>> unifiedCustomFields,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("reporters") JsonNullable<? extends List<String>> reporters,
            @JsonProperty("assignees") JsonNullable<? extends List<String>> assignees,
            @JsonProperty("content") JsonNullable<? extends List<TicketingContent>> content,
            @JsonProperty("parent_id") JsonNullable<String> parentId,
            @JsonProperty("priority") JsonNullable<? extends TicketingTicketUpdateRequestDtoPriority> priority,
            @JsonProperty("tags") JsonNullable<? extends List<String>> tags,
            @JsonProperty("project_id") JsonNullable<String> projectId,
            @JsonProperty("component_ids") JsonNullable<String> componentIds,
            @JsonProperty("status") JsonNullable<? extends TicketingTicketUpdateRequestDtoStatus> status) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(reporters, "reporters");
        Utils.checkNotNull(assignees, "assignees");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(priority, "priority");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(componentIds, "componentIds");
        Utils.checkNotNull(status, "status");
        this.unifiedCustomFields = unifiedCustomFields;
        this.title = title;
        this.reporters = reporters;
        this.assignees = assignees;
        this.content = content;
        this.parentId = parentId;
        this.priority = priority;
        this.tags = tags;
        this.projectId = projectId;
        this.componentIds = componentIds;
        this.status = status;
    }
    
    public TicketingTicketUpdateRequestDto() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> unifiedCustomFields() {
        return (JsonNullable<Map<String, Object>>) unifiedCustomFields;
    }

    /**
     * The title or subject of the ticket
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * Users who reported the ticket
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> reporters() {
        return (JsonNullable<List<String>>) reporters;
    }

    /**
     * Agents assigned to the ticket
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> assignees() {
        return (JsonNullable<List<String>>) assignees;
    }

    /**
     * Array of content associated with the ticket
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TicketingContent>> content() {
        return (JsonNullable<List<TicketingContent>>) content;
    }

    /**
     * ID of the parent ticket if this is a sub-ticket
     */
    @JsonIgnore
    public JsonNullable<String> parentId() {
        return parentId;
    }

    /**
     * Priority of the ticket
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TicketingTicketUpdateRequestDtoPriority> priority() {
        return (JsonNullable<TicketingTicketUpdateRequestDtoPriority>) priority;
    }

    /**
     * The tags of the ticket
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> tags() {
        return (JsonNullable<List<String>>) tags;
    }

    /**
     * Project the ticket belongs to
     */
    @JsonIgnore
    public JsonNullable<String> projectId() {
        return projectId;
    }

    /**
     * Components to associate with the ticket
     */
    @JsonIgnore
    public JsonNullable<String> componentIds() {
        return componentIds;
    }

    /**
     * Current status of the ticket
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TicketingTicketUpdateRequestDtoStatus> status() {
        return (JsonNullable<TicketingTicketUpdateRequestDtoStatus>) status;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public TicketingTicketUpdateRequestDto withUnifiedCustomFields(Map<String, Object> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public TicketingTicketUpdateRequestDto withUnifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = unifiedCustomFields;
        return this;
    }

    /**
     * The title or subject of the ticket
     */
    public TicketingTicketUpdateRequestDto withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The title or subject of the ticket
     */
    public TicketingTicketUpdateRequestDto withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Users who reported the ticket
     */
    public TicketingTicketUpdateRequestDto withReporters(List<String> reporters) {
        Utils.checkNotNull(reporters, "reporters");
        this.reporters = JsonNullable.of(reporters);
        return this;
    }

    /**
     * Users who reported the ticket
     */
    public TicketingTicketUpdateRequestDto withReporters(JsonNullable<? extends List<String>> reporters) {
        Utils.checkNotNull(reporters, "reporters");
        this.reporters = reporters;
        return this;
    }

    /**
     * Agents assigned to the ticket
     */
    public TicketingTicketUpdateRequestDto withAssignees(List<String> assignees) {
        Utils.checkNotNull(assignees, "assignees");
        this.assignees = JsonNullable.of(assignees);
        return this;
    }

    /**
     * Agents assigned to the ticket
     */
    public TicketingTicketUpdateRequestDto withAssignees(JsonNullable<? extends List<String>> assignees) {
        Utils.checkNotNull(assignees, "assignees");
        this.assignees = assignees;
        return this;
    }

    /**
     * Array of content associated with the ticket
     */
    public TicketingTicketUpdateRequestDto withContent(List<TicketingContent> content) {
        Utils.checkNotNull(content, "content");
        this.content = JsonNullable.of(content);
        return this;
    }

    /**
     * Array of content associated with the ticket
     */
    public TicketingTicketUpdateRequestDto withContent(JsonNullable<? extends List<TicketingContent>> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * ID of the parent ticket if this is a sub-ticket
     */
    public TicketingTicketUpdateRequestDto withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = JsonNullable.of(parentId);
        return this;
    }

    /**
     * ID of the parent ticket if this is a sub-ticket
     */
    public TicketingTicketUpdateRequestDto withParentId(JsonNullable<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    /**
     * Priority of the ticket
     */
    public TicketingTicketUpdateRequestDto withPriority(TicketingTicketUpdateRequestDtoPriority priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = JsonNullable.of(priority);
        return this;
    }

    /**
     * Priority of the ticket
     */
    public TicketingTicketUpdateRequestDto withPriority(JsonNullable<? extends TicketingTicketUpdateRequestDtoPriority> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }

    /**
     * The tags of the ticket
     */
    public TicketingTicketUpdateRequestDto withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    /**
     * The tags of the ticket
     */
    public TicketingTicketUpdateRequestDto withTags(JsonNullable<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * Project the ticket belongs to
     */
    public TicketingTicketUpdateRequestDto withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = JsonNullable.of(projectId);
        return this;
    }

    /**
     * Project the ticket belongs to
     */
    public TicketingTicketUpdateRequestDto withProjectId(JsonNullable<String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * Components to associate with the ticket
     */
    public TicketingTicketUpdateRequestDto withComponentIds(String componentIds) {
        Utils.checkNotNull(componentIds, "componentIds");
        this.componentIds = JsonNullable.of(componentIds);
        return this;
    }

    /**
     * Components to associate with the ticket
     */
    public TicketingTicketUpdateRequestDto withComponentIds(JsonNullable<String> componentIds) {
        Utils.checkNotNull(componentIds, "componentIds");
        this.componentIds = componentIds;
        return this;
    }

    /**
     * Current status of the ticket
     */
    public TicketingTicketUpdateRequestDto withStatus(TicketingTicketUpdateRequestDtoStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Current status of the ticket
     */
    public TicketingTicketUpdateRequestDto withStatus(JsonNullable<? extends TicketingTicketUpdateRequestDtoStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TicketingTicketUpdateRequestDto other = (TicketingTicketUpdateRequestDto) o;
        return 
            Utils.enhancedDeepEquals(this.unifiedCustomFields, other.unifiedCustomFields) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.reporters, other.reporters) &&
            Utils.enhancedDeepEquals(this.assignees, other.assignees) &&
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.priority, other.priority) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.projectId, other.projectId) &&
            Utils.enhancedDeepEquals(this.componentIds, other.componentIds) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            unifiedCustomFields, title, reporters,
            assignees, content, parentId,
            priority, tags, projectId,
            componentIds, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TicketingTicketUpdateRequestDto.class,
                "unifiedCustomFields", unifiedCustomFields,
                "title", title,
                "reporters", reporters,
                "assignees", assignees,
                "content", content,
                "parentId", parentId,
                "priority", priority,
                "tags", tags,
                "projectId", projectId,
                "componentIds", componentIds,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Map<String, Object>> unifiedCustomFields = JsonNullable.undefined();

        private JsonNullable<String> title = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> reporters = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> assignees = JsonNullable.undefined();

        private JsonNullable<? extends List<TicketingContent>> content = JsonNullable.undefined();

        private JsonNullable<String> parentId = JsonNullable.undefined();

        private JsonNullable<? extends TicketingTicketUpdateRequestDtoPriority> priority = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> tags = JsonNullable.undefined();

        private JsonNullable<String> projectId = JsonNullable.undefined();

        private JsonNullable<String> componentIds = JsonNullable.undefined();

        private JsonNullable<? extends TicketingTicketUpdateRequestDtoStatus> status = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(Map<String, Object> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = unifiedCustomFields;
            return this;
        }


        /**
         * The title or subject of the ticket
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The title or subject of the ticket
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * Users who reported the ticket
         */
        public Builder reporters(List<String> reporters) {
            Utils.checkNotNull(reporters, "reporters");
            this.reporters = JsonNullable.of(reporters);
            return this;
        }

        /**
         * Users who reported the ticket
         */
        public Builder reporters(JsonNullable<? extends List<String>> reporters) {
            Utils.checkNotNull(reporters, "reporters");
            this.reporters = reporters;
            return this;
        }


        /**
         * Agents assigned to the ticket
         */
        public Builder assignees(List<String> assignees) {
            Utils.checkNotNull(assignees, "assignees");
            this.assignees = JsonNullable.of(assignees);
            return this;
        }

        /**
         * Agents assigned to the ticket
         */
        public Builder assignees(JsonNullable<? extends List<String>> assignees) {
            Utils.checkNotNull(assignees, "assignees");
            this.assignees = assignees;
            return this;
        }


        /**
         * Array of content associated with the ticket
         */
        public Builder content(List<TicketingContent> content) {
            Utils.checkNotNull(content, "content");
            this.content = JsonNullable.of(content);
            return this;
        }

        /**
         * Array of content associated with the ticket
         */
        public Builder content(JsonNullable<? extends List<TicketingContent>> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }


        /**
         * ID of the parent ticket if this is a sub-ticket
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * ID of the parent ticket if this is a sub-ticket
         */
        public Builder parentId(JsonNullable<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }


        /**
         * Priority of the ticket
         */
        public Builder priority(TicketingTicketUpdateRequestDtoPriority priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = JsonNullable.of(priority);
            return this;
        }

        /**
         * Priority of the ticket
         */
        public Builder priority(JsonNullable<? extends TicketingTicketUpdateRequestDtoPriority> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }


        /**
         * The tags of the ticket
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        /**
         * The tags of the ticket
         */
        public Builder tags(JsonNullable<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        /**
         * Project the ticket belongs to
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = JsonNullable.of(projectId);
            return this;
        }

        /**
         * Project the ticket belongs to
         */
        public Builder projectId(JsonNullable<String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }


        /**
         * Components to associate with the ticket
         */
        public Builder componentIds(String componentIds) {
            Utils.checkNotNull(componentIds, "componentIds");
            this.componentIds = JsonNullable.of(componentIds);
            return this;
        }

        /**
         * Components to associate with the ticket
         */
        public Builder componentIds(JsonNullable<String> componentIds) {
            Utils.checkNotNull(componentIds, "componentIds");
            this.componentIds = componentIds;
            return this;
        }


        /**
         * Current status of the ticket
         */
        public Builder status(TicketingTicketUpdateRequestDtoStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Current status of the ticket
         */
        public Builder status(JsonNullable<? extends TicketingTicketUpdateRequestDtoStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public TicketingTicketUpdateRequestDto build() {

            return new TicketingTicketUpdateRequestDto(
                unifiedCustomFields, title, reporters,
                assignees, content, parentId,
                priority, tags, projectId,
                componentIds, status);
        }

    }
}
