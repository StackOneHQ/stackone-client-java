/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * WorkEligibilityIssuedByValue - The ISO3166-1 Alpha2 Code of the Country
 */
@JsonDeserialize(using = WorkEligibilityIssuedByValue._Deserializer.class)
@JsonSerialize(using = WorkEligibilityIssuedByValue._Serializer.class)
public class WorkEligibilityIssuedByValue {

    public static final WorkEligibilityIssuedByValue AF = new WorkEligibilityIssuedByValue("AF");
    public static final WorkEligibilityIssuedByValue AL = new WorkEligibilityIssuedByValue("AL");
    public static final WorkEligibilityIssuedByValue DZ = new WorkEligibilityIssuedByValue("DZ");
    public static final WorkEligibilityIssuedByValue AS = new WorkEligibilityIssuedByValue("AS");
    public static final WorkEligibilityIssuedByValue AD = new WorkEligibilityIssuedByValue("AD");
    public static final WorkEligibilityIssuedByValue AO = new WorkEligibilityIssuedByValue("AO");
    public static final WorkEligibilityIssuedByValue AI = new WorkEligibilityIssuedByValue("AI");
    public static final WorkEligibilityIssuedByValue AQ = new WorkEligibilityIssuedByValue("AQ");
    public static final WorkEligibilityIssuedByValue AG = new WorkEligibilityIssuedByValue("AG");
    public static final WorkEligibilityIssuedByValue AR = new WorkEligibilityIssuedByValue("AR");
    public static final WorkEligibilityIssuedByValue AM = new WorkEligibilityIssuedByValue("AM");
    public static final WorkEligibilityIssuedByValue AW = new WorkEligibilityIssuedByValue("AW");
    public static final WorkEligibilityIssuedByValue AU = new WorkEligibilityIssuedByValue("AU");
    public static final WorkEligibilityIssuedByValue AT = new WorkEligibilityIssuedByValue("AT");
    public static final WorkEligibilityIssuedByValue AZ = new WorkEligibilityIssuedByValue("AZ");
    public static final WorkEligibilityIssuedByValue BS = new WorkEligibilityIssuedByValue("BS");
    public static final WorkEligibilityIssuedByValue BH = new WorkEligibilityIssuedByValue("BH");
    public static final WorkEligibilityIssuedByValue BD = new WorkEligibilityIssuedByValue("BD");
    public static final WorkEligibilityIssuedByValue BB = new WorkEligibilityIssuedByValue("BB");
    public static final WorkEligibilityIssuedByValue BY = new WorkEligibilityIssuedByValue("BY");
    public static final WorkEligibilityIssuedByValue BE = new WorkEligibilityIssuedByValue("BE");
    public static final WorkEligibilityIssuedByValue BZ = new WorkEligibilityIssuedByValue("BZ");
    public static final WorkEligibilityIssuedByValue BJ = new WorkEligibilityIssuedByValue("BJ");
    public static final WorkEligibilityIssuedByValue BM = new WorkEligibilityIssuedByValue("BM");
    public static final WorkEligibilityIssuedByValue BT = new WorkEligibilityIssuedByValue("BT");
    public static final WorkEligibilityIssuedByValue BO = new WorkEligibilityIssuedByValue("BO");
    public static final WorkEligibilityIssuedByValue BQ = new WorkEligibilityIssuedByValue("BQ");
    public static final WorkEligibilityIssuedByValue BA = new WorkEligibilityIssuedByValue("BA");
    public static final WorkEligibilityIssuedByValue BW = new WorkEligibilityIssuedByValue("BW");
    public static final WorkEligibilityIssuedByValue BV = new WorkEligibilityIssuedByValue("BV");
    public static final WorkEligibilityIssuedByValue BR = new WorkEligibilityIssuedByValue("BR");
    public static final WorkEligibilityIssuedByValue IO = new WorkEligibilityIssuedByValue("IO");
    public static final WorkEligibilityIssuedByValue BN = new WorkEligibilityIssuedByValue("BN");
    public static final WorkEligibilityIssuedByValue BG = new WorkEligibilityIssuedByValue("BG");
    public static final WorkEligibilityIssuedByValue BF = new WorkEligibilityIssuedByValue("BF");
    public static final WorkEligibilityIssuedByValue BI = new WorkEligibilityIssuedByValue("BI");
    public static final WorkEligibilityIssuedByValue KH = new WorkEligibilityIssuedByValue("KH");
    public static final WorkEligibilityIssuedByValue CM = new WorkEligibilityIssuedByValue("CM");
    public static final WorkEligibilityIssuedByValue CA = new WorkEligibilityIssuedByValue("CA");
    public static final WorkEligibilityIssuedByValue CV = new WorkEligibilityIssuedByValue("CV");
    public static final WorkEligibilityIssuedByValue KY = new WorkEligibilityIssuedByValue("KY");
    public static final WorkEligibilityIssuedByValue CF = new WorkEligibilityIssuedByValue("CF");
    public static final WorkEligibilityIssuedByValue TD = new WorkEligibilityIssuedByValue("TD");
    public static final WorkEligibilityIssuedByValue CL = new WorkEligibilityIssuedByValue("CL");
    public static final WorkEligibilityIssuedByValue CN = new WorkEligibilityIssuedByValue("CN");
    public static final WorkEligibilityIssuedByValue CX = new WorkEligibilityIssuedByValue("CX");
    public static final WorkEligibilityIssuedByValue CC = new WorkEligibilityIssuedByValue("CC");
    public static final WorkEligibilityIssuedByValue CO = new WorkEligibilityIssuedByValue("CO");
    public static final WorkEligibilityIssuedByValue KM = new WorkEligibilityIssuedByValue("KM");
    public static final WorkEligibilityIssuedByValue CG = new WorkEligibilityIssuedByValue("CG");
    public static final WorkEligibilityIssuedByValue CD = new WorkEligibilityIssuedByValue("CD");
    public static final WorkEligibilityIssuedByValue CK = new WorkEligibilityIssuedByValue("CK");
    public static final WorkEligibilityIssuedByValue CR = new WorkEligibilityIssuedByValue("CR");
    public static final WorkEligibilityIssuedByValue HR = new WorkEligibilityIssuedByValue("HR");
    public static final WorkEligibilityIssuedByValue CU = new WorkEligibilityIssuedByValue("CU");
    public static final WorkEligibilityIssuedByValue CW = new WorkEligibilityIssuedByValue("CW");
    public static final WorkEligibilityIssuedByValue CY = new WorkEligibilityIssuedByValue("CY");
    public static final WorkEligibilityIssuedByValue CZ = new WorkEligibilityIssuedByValue("CZ");
    public static final WorkEligibilityIssuedByValue CI = new WorkEligibilityIssuedByValue("CI");
    public static final WorkEligibilityIssuedByValue DK = new WorkEligibilityIssuedByValue("DK");
    public static final WorkEligibilityIssuedByValue DJ = new WorkEligibilityIssuedByValue("DJ");
    public static final WorkEligibilityIssuedByValue DM = new WorkEligibilityIssuedByValue("DM");
    public static final WorkEligibilityIssuedByValue DO = new WorkEligibilityIssuedByValue("DO");
    public static final WorkEligibilityIssuedByValue EC = new WorkEligibilityIssuedByValue("EC");
    public static final WorkEligibilityIssuedByValue EG = new WorkEligibilityIssuedByValue("EG");
    public static final WorkEligibilityIssuedByValue SV = new WorkEligibilityIssuedByValue("SV");
    public static final WorkEligibilityIssuedByValue GQ = new WorkEligibilityIssuedByValue("GQ");
    public static final WorkEligibilityIssuedByValue ER = new WorkEligibilityIssuedByValue("ER");
    public static final WorkEligibilityIssuedByValue EE = new WorkEligibilityIssuedByValue("EE");
    public static final WorkEligibilityIssuedByValue ET = new WorkEligibilityIssuedByValue("ET");
    public static final WorkEligibilityIssuedByValue FK = new WorkEligibilityIssuedByValue("FK");
    public static final WorkEligibilityIssuedByValue FO = new WorkEligibilityIssuedByValue("FO");
    public static final WorkEligibilityIssuedByValue FJ = new WorkEligibilityIssuedByValue("FJ");
    public static final WorkEligibilityIssuedByValue FI = new WorkEligibilityIssuedByValue("FI");
    public static final WorkEligibilityIssuedByValue FR = new WorkEligibilityIssuedByValue("FR");
    public static final WorkEligibilityIssuedByValue GF = new WorkEligibilityIssuedByValue("GF");
    public static final WorkEligibilityIssuedByValue PF = new WorkEligibilityIssuedByValue("PF");
    public static final WorkEligibilityIssuedByValue TF = new WorkEligibilityIssuedByValue("TF");
    public static final WorkEligibilityIssuedByValue GA = new WorkEligibilityIssuedByValue("GA");
    public static final WorkEligibilityIssuedByValue GM = new WorkEligibilityIssuedByValue("GM");
    public static final WorkEligibilityIssuedByValue GE = new WorkEligibilityIssuedByValue("GE");
    public static final WorkEligibilityIssuedByValue DE = new WorkEligibilityIssuedByValue("DE");
    public static final WorkEligibilityIssuedByValue GH = new WorkEligibilityIssuedByValue("GH");
    public static final WorkEligibilityIssuedByValue GI = new WorkEligibilityIssuedByValue("GI");
    public static final WorkEligibilityIssuedByValue GR = new WorkEligibilityIssuedByValue("GR");
    public static final WorkEligibilityIssuedByValue GL = new WorkEligibilityIssuedByValue("GL");
    public static final WorkEligibilityIssuedByValue GD = new WorkEligibilityIssuedByValue("GD");
    public static final WorkEligibilityIssuedByValue GP = new WorkEligibilityIssuedByValue("GP");
    public static final WorkEligibilityIssuedByValue GU = new WorkEligibilityIssuedByValue("GU");
    public static final WorkEligibilityIssuedByValue GT = new WorkEligibilityIssuedByValue("GT");
    public static final WorkEligibilityIssuedByValue GG = new WorkEligibilityIssuedByValue("GG");
    public static final WorkEligibilityIssuedByValue GN = new WorkEligibilityIssuedByValue("GN");
    public static final WorkEligibilityIssuedByValue GW = new WorkEligibilityIssuedByValue("GW");
    public static final WorkEligibilityIssuedByValue GY = new WorkEligibilityIssuedByValue("GY");
    public static final WorkEligibilityIssuedByValue HT = new WorkEligibilityIssuedByValue("HT");
    public static final WorkEligibilityIssuedByValue HM = new WorkEligibilityIssuedByValue("HM");
    public static final WorkEligibilityIssuedByValue VA = new WorkEligibilityIssuedByValue("VA");
    public static final WorkEligibilityIssuedByValue HN = new WorkEligibilityIssuedByValue("HN");
    public static final WorkEligibilityIssuedByValue HK = new WorkEligibilityIssuedByValue("HK");
    public static final WorkEligibilityIssuedByValue HU = new WorkEligibilityIssuedByValue("HU");
    public static final WorkEligibilityIssuedByValue IS = new WorkEligibilityIssuedByValue("IS");
    public static final WorkEligibilityIssuedByValue IN = new WorkEligibilityIssuedByValue("IN");
    public static final WorkEligibilityIssuedByValue ID = new WorkEligibilityIssuedByValue("ID");
    public static final WorkEligibilityIssuedByValue IR = new WorkEligibilityIssuedByValue("IR");
    public static final WorkEligibilityIssuedByValue IQ = new WorkEligibilityIssuedByValue("IQ");
    public static final WorkEligibilityIssuedByValue IE = new WorkEligibilityIssuedByValue("IE");
    public static final WorkEligibilityIssuedByValue IM = new WorkEligibilityIssuedByValue("IM");
    public static final WorkEligibilityIssuedByValue IL = new WorkEligibilityIssuedByValue("IL");
    public static final WorkEligibilityIssuedByValue IT = new WorkEligibilityIssuedByValue("IT");
    public static final WorkEligibilityIssuedByValue JM = new WorkEligibilityIssuedByValue("JM");
    public static final WorkEligibilityIssuedByValue JP = new WorkEligibilityIssuedByValue("JP");
    public static final WorkEligibilityIssuedByValue JE = new WorkEligibilityIssuedByValue("JE");
    public static final WorkEligibilityIssuedByValue JO = new WorkEligibilityIssuedByValue("JO");
    public static final WorkEligibilityIssuedByValue KZ = new WorkEligibilityIssuedByValue("KZ");
    public static final WorkEligibilityIssuedByValue KE = new WorkEligibilityIssuedByValue("KE");
    public static final WorkEligibilityIssuedByValue KI = new WorkEligibilityIssuedByValue("KI");
    public static final WorkEligibilityIssuedByValue KP = new WorkEligibilityIssuedByValue("KP");
    public static final WorkEligibilityIssuedByValue KR = new WorkEligibilityIssuedByValue("KR");
    public static final WorkEligibilityIssuedByValue KW = new WorkEligibilityIssuedByValue("KW");
    public static final WorkEligibilityIssuedByValue KG = new WorkEligibilityIssuedByValue("KG");
    public static final WorkEligibilityIssuedByValue LA = new WorkEligibilityIssuedByValue("LA");
    public static final WorkEligibilityIssuedByValue LV = new WorkEligibilityIssuedByValue("LV");
    public static final WorkEligibilityIssuedByValue LB = new WorkEligibilityIssuedByValue("LB");
    public static final WorkEligibilityIssuedByValue LS = new WorkEligibilityIssuedByValue("LS");
    public static final WorkEligibilityIssuedByValue LR = new WorkEligibilityIssuedByValue("LR");
    public static final WorkEligibilityIssuedByValue LY = new WorkEligibilityIssuedByValue("LY");
    public static final WorkEligibilityIssuedByValue LI = new WorkEligibilityIssuedByValue("LI");
    public static final WorkEligibilityIssuedByValue LT = new WorkEligibilityIssuedByValue("LT");
    public static final WorkEligibilityIssuedByValue LU = new WorkEligibilityIssuedByValue("LU");
    public static final WorkEligibilityIssuedByValue MO = new WorkEligibilityIssuedByValue("MO");
    public static final WorkEligibilityIssuedByValue MK = new WorkEligibilityIssuedByValue("MK");
    public static final WorkEligibilityIssuedByValue MG = new WorkEligibilityIssuedByValue("MG");
    public static final WorkEligibilityIssuedByValue MW = new WorkEligibilityIssuedByValue("MW");
    public static final WorkEligibilityIssuedByValue MY = new WorkEligibilityIssuedByValue("MY");
    public static final WorkEligibilityIssuedByValue MV = new WorkEligibilityIssuedByValue("MV");
    public static final WorkEligibilityIssuedByValue ML = new WorkEligibilityIssuedByValue("ML");
    public static final WorkEligibilityIssuedByValue MT = new WorkEligibilityIssuedByValue("MT");
    public static final WorkEligibilityIssuedByValue MH = new WorkEligibilityIssuedByValue("MH");
    public static final WorkEligibilityIssuedByValue MQ = new WorkEligibilityIssuedByValue("MQ");
    public static final WorkEligibilityIssuedByValue MR = new WorkEligibilityIssuedByValue("MR");
    public static final WorkEligibilityIssuedByValue MU = new WorkEligibilityIssuedByValue("MU");
    public static final WorkEligibilityIssuedByValue YT = new WorkEligibilityIssuedByValue("YT");
    public static final WorkEligibilityIssuedByValue MX = new WorkEligibilityIssuedByValue("MX");
    public static final WorkEligibilityIssuedByValue FM = new WorkEligibilityIssuedByValue("FM");
    public static final WorkEligibilityIssuedByValue MD = new WorkEligibilityIssuedByValue("MD");
    public static final WorkEligibilityIssuedByValue MC = new WorkEligibilityIssuedByValue("MC");
    public static final WorkEligibilityIssuedByValue MN = new WorkEligibilityIssuedByValue("MN");
    public static final WorkEligibilityIssuedByValue ME = new WorkEligibilityIssuedByValue("ME");
    public static final WorkEligibilityIssuedByValue MS = new WorkEligibilityIssuedByValue("MS");
    public static final WorkEligibilityIssuedByValue MA = new WorkEligibilityIssuedByValue("MA");
    public static final WorkEligibilityIssuedByValue MZ = new WorkEligibilityIssuedByValue("MZ");
    public static final WorkEligibilityIssuedByValue MM = new WorkEligibilityIssuedByValue("MM");
    public static final WorkEligibilityIssuedByValue NA = new WorkEligibilityIssuedByValue("NA");
    public static final WorkEligibilityIssuedByValue NR = new WorkEligibilityIssuedByValue("NR");
    public static final WorkEligibilityIssuedByValue NP = new WorkEligibilityIssuedByValue("NP");
    public static final WorkEligibilityIssuedByValue NL = new WorkEligibilityIssuedByValue("NL");
    public static final WorkEligibilityIssuedByValue NC = new WorkEligibilityIssuedByValue("NC");
    public static final WorkEligibilityIssuedByValue NZ = new WorkEligibilityIssuedByValue("NZ");
    public static final WorkEligibilityIssuedByValue NI = new WorkEligibilityIssuedByValue("NI");
    public static final WorkEligibilityIssuedByValue NE = new WorkEligibilityIssuedByValue("NE");
    public static final WorkEligibilityIssuedByValue NG = new WorkEligibilityIssuedByValue("NG");
    public static final WorkEligibilityIssuedByValue NU = new WorkEligibilityIssuedByValue("NU");
    public static final WorkEligibilityIssuedByValue NF = new WorkEligibilityIssuedByValue("NF");
    public static final WorkEligibilityIssuedByValue MP = new WorkEligibilityIssuedByValue("MP");
    public static final WorkEligibilityIssuedByValue NO = new WorkEligibilityIssuedByValue("NO");
    public static final WorkEligibilityIssuedByValue OM = new WorkEligibilityIssuedByValue("OM");
    public static final WorkEligibilityIssuedByValue PK = new WorkEligibilityIssuedByValue("PK");
    public static final WorkEligibilityIssuedByValue PW = new WorkEligibilityIssuedByValue("PW");
    public static final WorkEligibilityIssuedByValue PS = new WorkEligibilityIssuedByValue("PS");
    public static final WorkEligibilityIssuedByValue PA = new WorkEligibilityIssuedByValue("PA");
    public static final WorkEligibilityIssuedByValue PG = new WorkEligibilityIssuedByValue("PG");
    public static final WorkEligibilityIssuedByValue PY = new WorkEligibilityIssuedByValue("PY");
    public static final WorkEligibilityIssuedByValue PE = new WorkEligibilityIssuedByValue("PE");
    public static final WorkEligibilityIssuedByValue PH = new WorkEligibilityIssuedByValue("PH");
    public static final WorkEligibilityIssuedByValue PN = new WorkEligibilityIssuedByValue("PN");
    public static final WorkEligibilityIssuedByValue PL = new WorkEligibilityIssuedByValue("PL");
    public static final WorkEligibilityIssuedByValue PT = new WorkEligibilityIssuedByValue("PT");
    public static final WorkEligibilityIssuedByValue PR = new WorkEligibilityIssuedByValue("PR");
    public static final WorkEligibilityIssuedByValue QA = new WorkEligibilityIssuedByValue("QA");
    public static final WorkEligibilityIssuedByValue RO = new WorkEligibilityIssuedByValue("RO");
    public static final WorkEligibilityIssuedByValue RU = new WorkEligibilityIssuedByValue("RU");
    public static final WorkEligibilityIssuedByValue RW = new WorkEligibilityIssuedByValue("RW");
    public static final WorkEligibilityIssuedByValue RE = new WorkEligibilityIssuedByValue("RE");
    public static final WorkEligibilityIssuedByValue BL = new WorkEligibilityIssuedByValue("BL");
    public static final WorkEligibilityIssuedByValue SH = new WorkEligibilityIssuedByValue("SH");
    public static final WorkEligibilityIssuedByValue KN = new WorkEligibilityIssuedByValue("KN");
    public static final WorkEligibilityIssuedByValue LC = new WorkEligibilityIssuedByValue("LC");
    public static final WorkEligibilityIssuedByValue MF = new WorkEligibilityIssuedByValue("MF");
    public static final WorkEligibilityIssuedByValue PM = new WorkEligibilityIssuedByValue("PM");
    public static final WorkEligibilityIssuedByValue VC = new WorkEligibilityIssuedByValue("VC");
    public static final WorkEligibilityIssuedByValue WS = new WorkEligibilityIssuedByValue("WS");
    public static final WorkEligibilityIssuedByValue SM = new WorkEligibilityIssuedByValue("SM");
    public static final WorkEligibilityIssuedByValue ST = new WorkEligibilityIssuedByValue("ST");
    public static final WorkEligibilityIssuedByValue SA = new WorkEligibilityIssuedByValue("SA");
    public static final WorkEligibilityIssuedByValue SN = new WorkEligibilityIssuedByValue("SN");
    public static final WorkEligibilityIssuedByValue RS = new WorkEligibilityIssuedByValue("RS");
    public static final WorkEligibilityIssuedByValue SC = new WorkEligibilityIssuedByValue("SC");
    public static final WorkEligibilityIssuedByValue SL = new WorkEligibilityIssuedByValue("SL");
    public static final WorkEligibilityIssuedByValue SG = new WorkEligibilityIssuedByValue("SG");
    public static final WorkEligibilityIssuedByValue SX = new WorkEligibilityIssuedByValue("SX");
    public static final WorkEligibilityIssuedByValue SK = new WorkEligibilityIssuedByValue("SK");
    public static final WorkEligibilityIssuedByValue SI = new WorkEligibilityIssuedByValue("SI");
    public static final WorkEligibilityIssuedByValue SB = new WorkEligibilityIssuedByValue("SB");
    public static final WorkEligibilityIssuedByValue SO = new WorkEligibilityIssuedByValue("SO");
    public static final WorkEligibilityIssuedByValue ZA = new WorkEligibilityIssuedByValue("ZA");
    public static final WorkEligibilityIssuedByValue GS = new WorkEligibilityIssuedByValue("GS");
    public static final WorkEligibilityIssuedByValue SS = new WorkEligibilityIssuedByValue("SS");
    public static final WorkEligibilityIssuedByValue ES = new WorkEligibilityIssuedByValue("ES");
    public static final WorkEligibilityIssuedByValue LK = new WorkEligibilityIssuedByValue("LK");
    public static final WorkEligibilityIssuedByValue SD = new WorkEligibilityIssuedByValue("SD");
    public static final WorkEligibilityIssuedByValue SR = new WorkEligibilityIssuedByValue("SR");
    public static final WorkEligibilityIssuedByValue SJ = new WorkEligibilityIssuedByValue("SJ");
    public static final WorkEligibilityIssuedByValue SZ = new WorkEligibilityIssuedByValue("SZ");
    public static final WorkEligibilityIssuedByValue SE = new WorkEligibilityIssuedByValue("SE");
    public static final WorkEligibilityIssuedByValue CH = new WorkEligibilityIssuedByValue("CH");
    public static final WorkEligibilityIssuedByValue SY = new WorkEligibilityIssuedByValue("SY");
    public static final WorkEligibilityIssuedByValue TW = new WorkEligibilityIssuedByValue("TW");
    public static final WorkEligibilityIssuedByValue TJ = new WorkEligibilityIssuedByValue("TJ");
    public static final WorkEligibilityIssuedByValue TZ = new WorkEligibilityIssuedByValue("TZ");
    public static final WorkEligibilityIssuedByValue TH = new WorkEligibilityIssuedByValue("TH");
    public static final WorkEligibilityIssuedByValue TL = new WorkEligibilityIssuedByValue("TL");
    public static final WorkEligibilityIssuedByValue TG = new WorkEligibilityIssuedByValue("TG");
    public static final WorkEligibilityIssuedByValue TK = new WorkEligibilityIssuedByValue("TK");
    public static final WorkEligibilityIssuedByValue TO = new WorkEligibilityIssuedByValue("TO");
    public static final WorkEligibilityIssuedByValue TT = new WorkEligibilityIssuedByValue("TT");
    public static final WorkEligibilityIssuedByValue TN = new WorkEligibilityIssuedByValue("TN");
    public static final WorkEligibilityIssuedByValue TR = new WorkEligibilityIssuedByValue("TR");
    public static final WorkEligibilityIssuedByValue TM = new WorkEligibilityIssuedByValue("TM");
    public static final WorkEligibilityIssuedByValue TC = new WorkEligibilityIssuedByValue("TC");
    public static final WorkEligibilityIssuedByValue TV = new WorkEligibilityIssuedByValue("TV");
    public static final WorkEligibilityIssuedByValue UG = new WorkEligibilityIssuedByValue("UG");
    public static final WorkEligibilityIssuedByValue UA = new WorkEligibilityIssuedByValue("UA");
    public static final WorkEligibilityIssuedByValue AE = new WorkEligibilityIssuedByValue("AE");
    public static final WorkEligibilityIssuedByValue GB = new WorkEligibilityIssuedByValue("GB");
    public static final WorkEligibilityIssuedByValue US = new WorkEligibilityIssuedByValue("US");
    public static final WorkEligibilityIssuedByValue UM = new WorkEligibilityIssuedByValue("UM");
    public static final WorkEligibilityIssuedByValue UY = new WorkEligibilityIssuedByValue("UY");
    public static final WorkEligibilityIssuedByValue UZ = new WorkEligibilityIssuedByValue("UZ");
    public static final WorkEligibilityIssuedByValue VU = new WorkEligibilityIssuedByValue("VU");
    public static final WorkEligibilityIssuedByValue VE = new WorkEligibilityIssuedByValue("VE");
    public static final WorkEligibilityIssuedByValue VN = new WorkEligibilityIssuedByValue("VN");
    public static final WorkEligibilityIssuedByValue VG = new WorkEligibilityIssuedByValue("VG");
    public static final WorkEligibilityIssuedByValue VI = new WorkEligibilityIssuedByValue("VI");
    public static final WorkEligibilityIssuedByValue WF = new WorkEligibilityIssuedByValue("WF");
    public static final WorkEligibilityIssuedByValue EH = new WorkEligibilityIssuedByValue("EH");
    public static final WorkEligibilityIssuedByValue YE = new WorkEligibilityIssuedByValue("YE");
    public static final WorkEligibilityIssuedByValue ZM = new WorkEligibilityIssuedByValue("ZM");
    public static final WorkEligibilityIssuedByValue ZW = new WorkEligibilityIssuedByValue("ZW");
    public static final WorkEligibilityIssuedByValue UNMAPPED_VALUE = new WorkEligibilityIssuedByValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, WorkEligibilityIssuedByValue> values = createValuesMap();
    private static final Map<String, WorkEligibilityIssuedByValueEnum> enums = createEnumsMap();

    private final String value;

    private WorkEligibilityIssuedByValue(String value) {
        this.value = value;
    }

    /**
     * Returns a WorkEligibilityIssuedByValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as WorkEligibilityIssuedByValue
     */ 
    public static WorkEligibilityIssuedByValue of(String value) {
        synchronized (WorkEligibilityIssuedByValue.class) {
            return values.computeIfAbsent(value, v -> new WorkEligibilityIssuedByValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<WorkEligibilityIssuedByValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        WorkEligibilityIssuedByValue other = (WorkEligibilityIssuedByValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "WorkEligibilityIssuedByValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static WorkEligibilityIssuedByValue[] values() {
        synchronized (WorkEligibilityIssuedByValue.class) {
            return values.values().toArray(new WorkEligibilityIssuedByValue[] {});
        }
    }

    private static final Map<String, WorkEligibilityIssuedByValue> createValuesMap() {
        Map<String, WorkEligibilityIssuedByValue> map = new LinkedHashMap<>();
        map.put("AF", AF);
        map.put("AL", AL);
        map.put("DZ", DZ);
        map.put("AS", AS);
        map.put("AD", AD);
        map.put("AO", AO);
        map.put("AI", AI);
        map.put("AQ", AQ);
        map.put("AG", AG);
        map.put("AR", AR);
        map.put("AM", AM);
        map.put("AW", AW);
        map.put("AU", AU);
        map.put("AT", AT);
        map.put("AZ", AZ);
        map.put("BS", BS);
        map.put("BH", BH);
        map.put("BD", BD);
        map.put("BB", BB);
        map.put("BY", BY);
        map.put("BE", BE);
        map.put("BZ", BZ);
        map.put("BJ", BJ);
        map.put("BM", BM);
        map.put("BT", BT);
        map.put("BO", BO);
        map.put("BQ", BQ);
        map.put("BA", BA);
        map.put("BW", BW);
        map.put("BV", BV);
        map.put("BR", BR);
        map.put("IO", IO);
        map.put("BN", BN);
        map.put("BG", BG);
        map.put("BF", BF);
        map.put("BI", BI);
        map.put("KH", KH);
        map.put("CM", CM);
        map.put("CA", CA);
        map.put("CV", CV);
        map.put("KY", KY);
        map.put("CF", CF);
        map.put("TD", TD);
        map.put("CL", CL);
        map.put("CN", CN);
        map.put("CX", CX);
        map.put("CC", CC);
        map.put("CO", CO);
        map.put("KM", KM);
        map.put("CG", CG);
        map.put("CD", CD);
        map.put("CK", CK);
        map.put("CR", CR);
        map.put("HR", HR);
        map.put("CU", CU);
        map.put("CW", CW);
        map.put("CY", CY);
        map.put("CZ", CZ);
        map.put("CI", CI);
        map.put("DK", DK);
        map.put("DJ", DJ);
        map.put("DM", DM);
        map.put("DO", DO);
        map.put("EC", EC);
        map.put("EG", EG);
        map.put("SV", SV);
        map.put("GQ", GQ);
        map.put("ER", ER);
        map.put("EE", EE);
        map.put("ET", ET);
        map.put("FK", FK);
        map.put("FO", FO);
        map.put("FJ", FJ);
        map.put("FI", FI);
        map.put("FR", FR);
        map.put("GF", GF);
        map.put("PF", PF);
        map.put("TF", TF);
        map.put("GA", GA);
        map.put("GM", GM);
        map.put("GE", GE);
        map.put("DE", DE);
        map.put("GH", GH);
        map.put("GI", GI);
        map.put("GR", GR);
        map.put("GL", GL);
        map.put("GD", GD);
        map.put("GP", GP);
        map.put("GU", GU);
        map.put("GT", GT);
        map.put("GG", GG);
        map.put("GN", GN);
        map.put("GW", GW);
        map.put("GY", GY);
        map.put("HT", HT);
        map.put("HM", HM);
        map.put("VA", VA);
        map.put("HN", HN);
        map.put("HK", HK);
        map.put("HU", HU);
        map.put("IS", IS);
        map.put("IN", IN);
        map.put("ID", ID);
        map.put("IR", IR);
        map.put("IQ", IQ);
        map.put("IE", IE);
        map.put("IM", IM);
        map.put("IL", IL);
        map.put("IT", IT);
        map.put("JM", JM);
        map.put("JP", JP);
        map.put("JE", JE);
        map.put("JO", JO);
        map.put("KZ", KZ);
        map.put("KE", KE);
        map.put("KI", KI);
        map.put("KP", KP);
        map.put("KR", KR);
        map.put("KW", KW);
        map.put("KG", KG);
        map.put("LA", LA);
        map.put("LV", LV);
        map.put("LB", LB);
        map.put("LS", LS);
        map.put("LR", LR);
        map.put("LY", LY);
        map.put("LI", LI);
        map.put("LT", LT);
        map.put("LU", LU);
        map.put("MO", MO);
        map.put("MK", MK);
        map.put("MG", MG);
        map.put("MW", MW);
        map.put("MY", MY);
        map.put("MV", MV);
        map.put("ML", ML);
        map.put("MT", MT);
        map.put("MH", MH);
        map.put("MQ", MQ);
        map.put("MR", MR);
        map.put("MU", MU);
        map.put("YT", YT);
        map.put("MX", MX);
        map.put("FM", FM);
        map.put("MD", MD);
        map.put("MC", MC);
        map.put("MN", MN);
        map.put("ME", ME);
        map.put("MS", MS);
        map.put("MA", MA);
        map.put("MZ", MZ);
        map.put("MM", MM);
        map.put("NA", NA);
        map.put("NR", NR);
        map.put("NP", NP);
        map.put("NL", NL);
        map.put("NC", NC);
        map.put("NZ", NZ);
        map.put("NI", NI);
        map.put("NE", NE);
        map.put("NG", NG);
        map.put("NU", NU);
        map.put("NF", NF);
        map.put("MP", MP);
        map.put("NO", NO);
        map.put("OM", OM);
        map.put("PK", PK);
        map.put("PW", PW);
        map.put("PS", PS);
        map.put("PA", PA);
        map.put("PG", PG);
        map.put("PY", PY);
        map.put("PE", PE);
        map.put("PH", PH);
        map.put("PN", PN);
        map.put("PL", PL);
        map.put("PT", PT);
        map.put("PR", PR);
        map.put("QA", QA);
        map.put("RO", RO);
        map.put("RU", RU);
        map.put("RW", RW);
        map.put("RE", RE);
        map.put("BL", BL);
        map.put("SH", SH);
        map.put("KN", KN);
        map.put("LC", LC);
        map.put("MF", MF);
        map.put("PM", PM);
        map.put("VC", VC);
        map.put("WS", WS);
        map.put("SM", SM);
        map.put("ST", ST);
        map.put("SA", SA);
        map.put("SN", SN);
        map.put("RS", RS);
        map.put("SC", SC);
        map.put("SL", SL);
        map.put("SG", SG);
        map.put("SX", SX);
        map.put("SK", SK);
        map.put("SI", SI);
        map.put("SB", SB);
        map.put("SO", SO);
        map.put("ZA", ZA);
        map.put("GS", GS);
        map.put("SS", SS);
        map.put("ES", ES);
        map.put("LK", LK);
        map.put("SD", SD);
        map.put("SR", SR);
        map.put("SJ", SJ);
        map.put("SZ", SZ);
        map.put("SE", SE);
        map.put("CH", CH);
        map.put("SY", SY);
        map.put("TW", TW);
        map.put("TJ", TJ);
        map.put("TZ", TZ);
        map.put("TH", TH);
        map.put("TL", TL);
        map.put("TG", TG);
        map.put("TK", TK);
        map.put("TO", TO);
        map.put("TT", TT);
        map.put("TN", TN);
        map.put("TR", TR);
        map.put("TM", TM);
        map.put("TC", TC);
        map.put("TV", TV);
        map.put("UG", UG);
        map.put("UA", UA);
        map.put("AE", AE);
        map.put("GB", GB);
        map.put("US", US);
        map.put("UM", UM);
        map.put("UY", UY);
        map.put("UZ", UZ);
        map.put("VU", VU);
        map.put("VE", VE);
        map.put("VN", VN);
        map.put("VG", VG);
        map.put("VI", VI);
        map.put("WF", WF);
        map.put("EH", EH);
        map.put("YE", YE);
        map.put("ZM", ZM);
        map.put("ZW", ZW);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, WorkEligibilityIssuedByValueEnum> createEnumsMap() {
        Map<String, WorkEligibilityIssuedByValueEnum> map = new HashMap<>();
        map.put("AF", WorkEligibilityIssuedByValueEnum.AF);
        map.put("AL", WorkEligibilityIssuedByValueEnum.AL);
        map.put("DZ", WorkEligibilityIssuedByValueEnum.DZ);
        map.put("AS", WorkEligibilityIssuedByValueEnum.AS);
        map.put("AD", WorkEligibilityIssuedByValueEnum.AD);
        map.put("AO", WorkEligibilityIssuedByValueEnum.AO);
        map.put("AI", WorkEligibilityIssuedByValueEnum.AI);
        map.put("AQ", WorkEligibilityIssuedByValueEnum.AQ);
        map.put("AG", WorkEligibilityIssuedByValueEnum.AG);
        map.put("AR", WorkEligibilityIssuedByValueEnum.AR);
        map.put("AM", WorkEligibilityIssuedByValueEnum.AM);
        map.put("AW", WorkEligibilityIssuedByValueEnum.AW);
        map.put("AU", WorkEligibilityIssuedByValueEnum.AU);
        map.put("AT", WorkEligibilityIssuedByValueEnum.AT);
        map.put("AZ", WorkEligibilityIssuedByValueEnum.AZ);
        map.put("BS", WorkEligibilityIssuedByValueEnum.BS);
        map.put("BH", WorkEligibilityIssuedByValueEnum.BH);
        map.put("BD", WorkEligibilityIssuedByValueEnum.BD);
        map.put("BB", WorkEligibilityIssuedByValueEnum.BB);
        map.put("BY", WorkEligibilityIssuedByValueEnum.BY);
        map.put("BE", WorkEligibilityIssuedByValueEnum.BE);
        map.put("BZ", WorkEligibilityIssuedByValueEnum.BZ);
        map.put("BJ", WorkEligibilityIssuedByValueEnum.BJ);
        map.put("BM", WorkEligibilityIssuedByValueEnum.BM);
        map.put("BT", WorkEligibilityIssuedByValueEnum.BT);
        map.put("BO", WorkEligibilityIssuedByValueEnum.BO);
        map.put("BQ", WorkEligibilityIssuedByValueEnum.BQ);
        map.put("BA", WorkEligibilityIssuedByValueEnum.BA);
        map.put("BW", WorkEligibilityIssuedByValueEnum.BW);
        map.put("BV", WorkEligibilityIssuedByValueEnum.BV);
        map.put("BR", WorkEligibilityIssuedByValueEnum.BR);
        map.put("IO", WorkEligibilityIssuedByValueEnum.IO);
        map.put("BN", WorkEligibilityIssuedByValueEnum.BN);
        map.put("BG", WorkEligibilityIssuedByValueEnum.BG);
        map.put("BF", WorkEligibilityIssuedByValueEnum.BF);
        map.put("BI", WorkEligibilityIssuedByValueEnum.BI);
        map.put("KH", WorkEligibilityIssuedByValueEnum.KH);
        map.put("CM", WorkEligibilityIssuedByValueEnum.CM);
        map.put("CA", WorkEligibilityIssuedByValueEnum.CA);
        map.put("CV", WorkEligibilityIssuedByValueEnum.CV);
        map.put("KY", WorkEligibilityIssuedByValueEnum.KY);
        map.put("CF", WorkEligibilityIssuedByValueEnum.CF);
        map.put("TD", WorkEligibilityIssuedByValueEnum.TD);
        map.put("CL", WorkEligibilityIssuedByValueEnum.CL);
        map.put("CN", WorkEligibilityIssuedByValueEnum.CN);
        map.put("CX", WorkEligibilityIssuedByValueEnum.CX);
        map.put("CC", WorkEligibilityIssuedByValueEnum.CC);
        map.put("CO", WorkEligibilityIssuedByValueEnum.CO);
        map.put("KM", WorkEligibilityIssuedByValueEnum.KM);
        map.put("CG", WorkEligibilityIssuedByValueEnum.CG);
        map.put("CD", WorkEligibilityIssuedByValueEnum.CD);
        map.put("CK", WorkEligibilityIssuedByValueEnum.CK);
        map.put("CR", WorkEligibilityIssuedByValueEnum.CR);
        map.put("HR", WorkEligibilityIssuedByValueEnum.HR);
        map.put("CU", WorkEligibilityIssuedByValueEnum.CU);
        map.put("CW", WorkEligibilityIssuedByValueEnum.CW);
        map.put("CY", WorkEligibilityIssuedByValueEnum.CY);
        map.put("CZ", WorkEligibilityIssuedByValueEnum.CZ);
        map.put("CI", WorkEligibilityIssuedByValueEnum.CI);
        map.put("DK", WorkEligibilityIssuedByValueEnum.DK);
        map.put("DJ", WorkEligibilityIssuedByValueEnum.DJ);
        map.put("DM", WorkEligibilityIssuedByValueEnum.DM);
        map.put("DO", WorkEligibilityIssuedByValueEnum.DO);
        map.put("EC", WorkEligibilityIssuedByValueEnum.EC);
        map.put("EG", WorkEligibilityIssuedByValueEnum.EG);
        map.put("SV", WorkEligibilityIssuedByValueEnum.SV);
        map.put("GQ", WorkEligibilityIssuedByValueEnum.GQ);
        map.put("ER", WorkEligibilityIssuedByValueEnum.ER);
        map.put("EE", WorkEligibilityIssuedByValueEnum.EE);
        map.put("ET", WorkEligibilityIssuedByValueEnum.ET);
        map.put("FK", WorkEligibilityIssuedByValueEnum.FK);
        map.put("FO", WorkEligibilityIssuedByValueEnum.FO);
        map.put("FJ", WorkEligibilityIssuedByValueEnum.FJ);
        map.put("FI", WorkEligibilityIssuedByValueEnum.FI);
        map.put("FR", WorkEligibilityIssuedByValueEnum.FR);
        map.put("GF", WorkEligibilityIssuedByValueEnum.GF);
        map.put("PF", WorkEligibilityIssuedByValueEnum.PF);
        map.put("TF", WorkEligibilityIssuedByValueEnum.TF);
        map.put("GA", WorkEligibilityIssuedByValueEnum.GA);
        map.put("GM", WorkEligibilityIssuedByValueEnum.GM);
        map.put("GE", WorkEligibilityIssuedByValueEnum.GE);
        map.put("DE", WorkEligibilityIssuedByValueEnum.DE);
        map.put("GH", WorkEligibilityIssuedByValueEnum.GH);
        map.put("GI", WorkEligibilityIssuedByValueEnum.GI);
        map.put("GR", WorkEligibilityIssuedByValueEnum.GR);
        map.put("GL", WorkEligibilityIssuedByValueEnum.GL);
        map.put("GD", WorkEligibilityIssuedByValueEnum.GD);
        map.put("GP", WorkEligibilityIssuedByValueEnum.GP);
        map.put("GU", WorkEligibilityIssuedByValueEnum.GU);
        map.put("GT", WorkEligibilityIssuedByValueEnum.GT);
        map.put("GG", WorkEligibilityIssuedByValueEnum.GG);
        map.put("GN", WorkEligibilityIssuedByValueEnum.GN);
        map.put("GW", WorkEligibilityIssuedByValueEnum.GW);
        map.put("GY", WorkEligibilityIssuedByValueEnum.GY);
        map.put("HT", WorkEligibilityIssuedByValueEnum.HT);
        map.put("HM", WorkEligibilityIssuedByValueEnum.HM);
        map.put("VA", WorkEligibilityIssuedByValueEnum.VA);
        map.put("HN", WorkEligibilityIssuedByValueEnum.HN);
        map.put("HK", WorkEligibilityIssuedByValueEnum.HK);
        map.put("HU", WorkEligibilityIssuedByValueEnum.HU);
        map.put("IS", WorkEligibilityIssuedByValueEnum.IS);
        map.put("IN", WorkEligibilityIssuedByValueEnum.IN);
        map.put("ID", WorkEligibilityIssuedByValueEnum.ID);
        map.put("IR", WorkEligibilityIssuedByValueEnum.IR);
        map.put("IQ", WorkEligibilityIssuedByValueEnum.IQ);
        map.put("IE", WorkEligibilityIssuedByValueEnum.IE);
        map.put("IM", WorkEligibilityIssuedByValueEnum.IM);
        map.put("IL", WorkEligibilityIssuedByValueEnum.IL);
        map.put("IT", WorkEligibilityIssuedByValueEnum.IT);
        map.put("JM", WorkEligibilityIssuedByValueEnum.JM);
        map.put("JP", WorkEligibilityIssuedByValueEnum.JP);
        map.put("JE", WorkEligibilityIssuedByValueEnum.JE);
        map.put("JO", WorkEligibilityIssuedByValueEnum.JO);
        map.put("KZ", WorkEligibilityIssuedByValueEnum.KZ);
        map.put("KE", WorkEligibilityIssuedByValueEnum.KE);
        map.put("KI", WorkEligibilityIssuedByValueEnum.KI);
        map.put("KP", WorkEligibilityIssuedByValueEnum.KP);
        map.put("KR", WorkEligibilityIssuedByValueEnum.KR);
        map.put("KW", WorkEligibilityIssuedByValueEnum.KW);
        map.put("KG", WorkEligibilityIssuedByValueEnum.KG);
        map.put("LA", WorkEligibilityIssuedByValueEnum.LA);
        map.put("LV", WorkEligibilityIssuedByValueEnum.LV);
        map.put("LB", WorkEligibilityIssuedByValueEnum.LB);
        map.put("LS", WorkEligibilityIssuedByValueEnum.LS);
        map.put("LR", WorkEligibilityIssuedByValueEnum.LR);
        map.put("LY", WorkEligibilityIssuedByValueEnum.LY);
        map.put("LI", WorkEligibilityIssuedByValueEnum.LI);
        map.put("LT", WorkEligibilityIssuedByValueEnum.LT);
        map.put("LU", WorkEligibilityIssuedByValueEnum.LU);
        map.put("MO", WorkEligibilityIssuedByValueEnum.MO);
        map.put("MK", WorkEligibilityIssuedByValueEnum.MK);
        map.put("MG", WorkEligibilityIssuedByValueEnum.MG);
        map.put("MW", WorkEligibilityIssuedByValueEnum.MW);
        map.put("MY", WorkEligibilityIssuedByValueEnum.MY);
        map.put("MV", WorkEligibilityIssuedByValueEnum.MV);
        map.put("ML", WorkEligibilityIssuedByValueEnum.ML);
        map.put("MT", WorkEligibilityIssuedByValueEnum.MT);
        map.put("MH", WorkEligibilityIssuedByValueEnum.MH);
        map.put("MQ", WorkEligibilityIssuedByValueEnum.MQ);
        map.put("MR", WorkEligibilityIssuedByValueEnum.MR);
        map.put("MU", WorkEligibilityIssuedByValueEnum.MU);
        map.put("YT", WorkEligibilityIssuedByValueEnum.YT);
        map.put("MX", WorkEligibilityIssuedByValueEnum.MX);
        map.put("FM", WorkEligibilityIssuedByValueEnum.FM);
        map.put("MD", WorkEligibilityIssuedByValueEnum.MD);
        map.put("MC", WorkEligibilityIssuedByValueEnum.MC);
        map.put("MN", WorkEligibilityIssuedByValueEnum.MN);
        map.put("ME", WorkEligibilityIssuedByValueEnum.ME);
        map.put("MS", WorkEligibilityIssuedByValueEnum.MS);
        map.put("MA", WorkEligibilityIssuedByValueEnum.MA);
        map.put("MZ", WorkEligibilityIssuedByValueEnum.MZ);
        map.put("MM", WorkEligibilityIssuedByValueEnum.MM);
        map.put("NA", WorkEligibilityIssuedByValueEnum.NA);
        map.put("NR", WorkEligibilityIssuedByValueEnum.NR);
        map.put("NP", WorkEligibilityIssuedByValueEnum.NP);
        map.put("NL", WorkEligibilityIssuedByValueEnum.NL);
        map.put("NC", WorkEligibilityIssuedByValueEnum.NC);
        map.put("NZ", WorkEligibilityIssuedByValueEnum.NZ);
        map.put("NI", WorkEligibilityIssuedByValueEnum.NI);
        map.put("NE", WorkEligibilityIssuedByValueEnum.NE);
        map.put("NG", WorkEligibilityIssuedByValueEnum.NG);
        map.put("NU", WorkEligibilityIssuedByValueEnum.NU);
        map.put("NF", WorkEligibilityIssuedByValueEnum.NF);
        map.put("MP", WorkEligibilityIssuedByValueEnum.MP);
        map.put("NO", WorkEligibilityIssuedByValueEnum.NO);
        map.put("OM", WorkEligibilityIssuedByValueEnum.OM);
        map.put("PK", WorkEligibilityIssuedByValueEnum.PK);
        map.put("PW", WorkEligibilityIssuedByValueEnum.PW);
        map.put("PS", WorkEligibilityIssuedByValueEnum.PS);
        map.put("PA", WorkEligibilityIssuedByValueEnum.PA);
        map.put("PG", WorkEligibilityIssuedByValueEnum.PG);
        map.put("PY", WorkEligibilityIssuedByValueEnum.PY);
        map.put("PE", WorkEligibilityIssuedByValueEnum.PE);
        map.put("PH", WorkEligibilityIssuedByValueEnum.PH);
        map.put("PN", WorkEligibilityIssuedByValueEnum.PN);
        map.put("PL", WorkEligibilityIssuedByValueEnum.PL);
        map.put("PT", WorkEligibilityIssuedByValueEnum.PT);
        map.put("PR", WorkEligibilityIssuedByValueEnum.PR);
        map.put("QA", WorkEligibilityIssuedByValueEnum.QA);
        map.put("RO", WorkEligibilityIssuedByValueEnum.RO);
        map.put("RU", WorkEligibilityIssuedByValueEnum.RU);
        map.put("RW", WorkEligibilityIssuedByValueEnum.RW);
        map.put("RE", WorkEligibilityIssuedByValueEnum.RE);
        map.put("BL", WorkEligibilityIssuedByValueEnum.BL);
        map.put("SH", WorkEligibilityIssuedByValueEnum.SH);
        map.put("KN", WorkEligibilityIssuedByValueEnum.KN);
        map.put("LC", WorkEligibilityIssuedByValueEnum.LC);
        map.put("MF", WorkEligibilityIssuedByValueEnum.MF);
        map.put("PM", WorkEligibilityIssuedByValueEnum.PM);
        map.put("VC", WorkEligibilityIssuedByValueEnum.VC);
        map.put("WS", WorkEligibilityIssuedByValueEnum.WS);
        map.put("SM", WorkEligibilityIssuedByValueEnum.SM);
        map.put("ST", WorkEligibilityIssuedByValueEnum.ST);
        map.put("SA", WorkEligibilityIssuedByValueEnum.SA);
        map.put("SN", WorkEligibilityIssuedByValueEnum.SN);
        map.put("RS", WorkEligibilityIssuedByValueEnum.RS);
        map.put("SC", WorkEligibilityIssuedByValueEnum.SC);
        map.put("SL", WorkEligibilityIssuedByValueEnum.SL);
        map.put("SG", WorkEligibilityIssuedByValueEnum.SG);
        map.put("SX", WorkEligibilityIssuedByValueEnum.SX);
        map.put("SK", WorkEligibilityIssuedByValueEnum.SK);
        map.put("SI", WorkEligibilityIssuedByValueEnum.SI);
        map.put("SB", WorkEligibilityIssuedByValueEnum.SB);
        map.put("SO", WorkEligibilityIssuedByValueEnum.SO);
        map.put("ZA", WorkEligibilityIssuedByValueEnum.ZA);
        map.put("GS", WorkEligibilityIssuedByValueEnum.GS);
        map.put("SS", WorkEligibilityIssuedByValueEnum.SS);
        map.put("ES", WorkEligibilityIssuedByValueEnum.ES);
        map.put("LK", WorkEligibilityIssuedByValueEnum.LK);
        map.put("SD", WorkEligibilityIssuedByValueEnum.SD);
        map.put("SR", WorkEligibilityIssuedByValueEnum.SR);
        map.put("SJ", WorkEligibilityIssuedByValueEnum.SJ);
        map.put("SZ", WorkEligibilityIssuedByValueEnum.SZ);
        map.put("SE", WorkEligibilityIssuedByValueEnum.SE);
        map.put("CH", WorkEligibilityIssuedByValueEnum.CH);
        map.put("SY", WorkEligibilityIssuedByValueEnum.SY);
        map.put("TW", WorkEligibilityIssuedByValueEnum.TW);
        map.put("TJ", WorkEligibilityIssuedByValueEnum.TJ);
        map.put("TZ", WorkEligibilityIssuedByValueEnum.TZ);
        map.put("TH", WorkEligibilityIssuedByValueEnum.TH);
        map.put("TL", WorkEligibilityIssuedByValueEnum.TL);
        map.put("TG", WorkEligibilityIssuedByValueEnum.TG);
        map.put("TK", WorkEligibilityIssuedByValueEnum.TK);
        map.put("TO", WorkEligibilityIssuedByValueEnum.TO);
        map.put("TT", WorkEligibilityIssuedByValueEnum.TT);
        map.put("TN", WorkEligibilityIssuedByValueEnum.TN);
        map.put("TR", WorkEligibilityIssuedByValueEnum.TR);
        map.put("TM", WorkEligibilityIssuedByValueEnum.TM);
        map.put("TC", WorkEligibilityIssuedByValueEnum.TC);
        map.put("TV", WorkEligibilityIssuedByValueEnum.TV);
        map.put("UG", WorkEligibilityIssuedByValueEnum.UG);
        map.put("UA", WorkEligibilityIssuedByValueEnum.UA);
        map.put("AE", WorkEligibilityIssuedByValueEnum.AE);
        map.put("GB", WorkEligibilityIssuedByValueEnum.GB);
        map.put("US", WorkEligibilityIssuedByValueEnum.US);
        map.put("UM", WorkEligibilityIssuedByValueEnum.UM);
        map.put("UY", WorkEligibilityIssuedByValueEnum.UY);
        map.put("UZ", WorkEligibilityIssuedByValueEnum.UZ);
        map.put("VU", WorkEligibilityIssuedByValueEnum.VU);
        map.put("VE", WorkEligibilityIssuedByValueEnum.VE);
        map.put("VN", WorkEligibilityIssuedByValueEnum.VN);
        map.put("VG", WorkEligibilityIssuedByValueEnum.VG);
        map.put("VI", WorkEligibilityIssuedByValueEnum.VI);
        map.put("WF", WorkEligibilityIssuedByValueEnum.WF);
        map.put("EH", WorkEligibilityIssuedByValueEnum.EH);
        map.put("YE", WorkEligibilityIssuedByValueEnum.YE);
        map.put("ZM", WorkEligibilityIssuedByValueEnum.ZM);
        map.put("ZW", WorkEligibilityIssuedByValueEnum.ZW);
        map.put("unmapped_value", WorkEligibilityIssuedByValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<WorkEligibilityIssuedByValue> {

        protected _Serializer() {
            super(WorkEligibilityIssuedByValue.class);
        }

        @Override
        public void serialize(WorkEligibilityIssuedByValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<WorkEligibilityIssuedByValue> {

        protected _Deserializer() {
            super(WorkEligibilityIssuedByValue.class);
        }

        @Override
        public WorkEligibilityIssuedByValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return WorkEligibilityIssuedByValue.of(v);
        }
    }
    
    public enum WorkEligibilityIssuedByValueEnum {

        AF("AF"),
        AL("AL"),
        DZ("DZ"),
        AS("AS"),
        AD("AD"),
        AO("AO"),
        AI("AI"),
        AQ("AQ"),
        AG("AG"),
        AR("AR"),
        AM("AM"),
        AW("AW"),
        AU("AU"),
        AT("AT"),
        AZ("AZ"),
        BS("BS"),
        BH("BH"),
        BD("BD"),
        BB("BB"),
        BY("BY"),
        BE("BE"),
        BZ("BZ"),
        BJ("BJ"),
        BM("BM"),
        BT("BT"),
        BO("BO"),
        BQ("BQ"),
        BA("BA"),
        BW("BW"),
        BV("BV"),
        BR("BR"),
        IO("IO"),
        BN("BN"),
        BG("BG"),
        BF("BF"),
        BI("BI"),
        KH("KH"),
        CM("CM"),
        CA("CA"),
        CV("CV"),
        KY("KY"),
        CF("CF"),
        TD("TD"),
        CL("CL"),
        CN("CN"),
        CX("CX"),
        CC("CC"),
        CO("CO"),
        KM("KM"),
        CG("CG"),
        CD("CD"),
        CK("CK"),
        CR("CR"),
        HR("HR"),
        CU("CU"),
        CW("CW"),
        CY("CY"),
        CZ("CZ"),
        CI("CI"),
        DK("DK"),
        DJ("DJ"),
        DM("DM"),
        DO("DO"),
        EC("EC"),
        EG("EG"),
        SV("SV"),
        GQ("GQ"),
        ER("ER"),
        EE("EE"),
        ET("ET"),
        FK("FK"),
        FO("FO"),
        FJ("FJ"),
        FI("FI"),
        FR("FR"),
        GF("GF"),
        PF("PF"),
        TF("TF"),
        GA("GA"),
        GM("GM"),
        GE("GE"),
        DE("DE"),
        GH("GH"),
        GI("GI"),
        GR("GR"),
        GL("GL"),
        GD("GD"),
        GP("GP"),
        GU("GU"),
        GT("GT"),
        GG("GG"),
        GN("GN"),
        GW("GW"),
        GY("GY"),
        HT("HT"),
        HM("HM"),
        VA("VA"),
        HN("HN"),
        HK("HK"),
        HU("HU"),
        IS("IS"),
        IN("IN"),
        ID("ID"),
        IR("IR"),
        IQ("IQ"),
        IE("IE"),
        IM("IM"),
        IL("IL"),
        IT("IT"),
        JM("JM"),
        JP("JP"),
        JE("JE"),
        JO("JO"),
        KZ("KZ"),
        KE("KE"),
        KI("KI"),
        KP("KP"),
        KR("KR"),
        KW("KW"),
        KG("KG"),
        LA("LA"),
        LV("LV"),
        LB("LB"),
        LS("LS"),
        LR("LR"),
        LY("LY"),
        LI("LI"),
        LT("LT"),
        LU("LU"),
        MO("MO"),
        MK("MK"),
        MG("MG"),
        MW("MW"),
        MY("MY"),
        MV("MV"),
        ML("ML"),
        MT("MT"),
        MH("MH"),
        MQ("MQ"),
        MR("MR"),
        MU("MU"),
        YT("YT"),
        MX("MX"),
        FM("FM"),
        MD("MD"),
        MC("MC"),
        MN("MN"),
        ME("ME"),
        MS("MS"),
        MA("MA"),
        MZ("MZ"),
        MM("MM"),
        NA("NA"),
        NR("NR"),
        NP("NP"),
        NL("NL"),
        NC("NC"),
        NZ("NZ"),
        NI("NI"),
        NE("NE"),
        NG("NG"),
        NU("NU"),
        NF("NF"),
        MP("MP"),
        NO("NO"),
        OM("OM"),
        PK("PK"),
        PW("PW"),
        PS("PS"),
        PA("PA"),
        PG("PG"),
        PY("PY"),
        PE("PE"),
        PH("PH"),
        PN("PN"),
        PL("PL"),
        PT("PT"),
        PR("PR"),
        QA("QA"),
        RO("RO"),
        RU("RU"),
        RW("RW"),
        RE("RE"),
        BL("BL"),
        SH("SH"),
        KN("KN"),
        LC("LC"),
        MF("MF"),
        PM("PM"),
        VC("VC"),
        WS("WS"),
        SM("SM"),
        ST("ST"),
        SA("SA"),
        SN("SN"),
        RS("RS"),
        SC("SC"),
        SL("SL"),
        SG("SG"),
        SX("SX"),
        SK("SK"),
        SI("SI"),
        SB("SB"),
        SO("SO"),
        ZA("ZA"),
        GS("GS"),
        SS("SS"),
        ES("ES"),
        LK("LK"),
        SD("SD"),
        SR("SR"),
        SJ("SJ"),
        SZ("SZ"),
        SE("SE"),
        CH("CH"),
        SY("SY"),
        TW("TW"),
        TJ("TJ"),
        TZ("TZ"),
        TH("TH"),
        TL("TL"),
        TG("TG"),
        TK("TK"),
        TO("TO"),
        TT("TT"),
        TN("TN"),
        TR("TR"),
        TM("TM"),
        TC("TC"),
        TV("TV"),
        UG("UG"),
        UA("UA"),
        AE("AE"),
        GB("GB"),
        US("US"),
        UM("UM"),
        UY("UY"),
        UZ("UZ"),
        VU("VU"),
        VE("VE"),
        VN("VN"),
        VG("VG"),
        VI("VI"),
        WF("WF"),
        EH("EH"),
        YE("YE"),
        ZM("ZM"),
        ZW("ZW"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private WorkEligibilityIssuedByValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}
