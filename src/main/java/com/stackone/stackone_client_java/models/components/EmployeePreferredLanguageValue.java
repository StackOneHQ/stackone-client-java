/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * EmployeePreferredLanguageValue - The ISO639-2 Code of the language
 */
@JsonDeserialize(using = EmployeePreferredLanguageValue._Deserializer.class)
@JsonSerialize(using = EmployeePreferredLanguageValue._Serializer.class)
public class EmployeePreferredLanguageValue {

    public static final EmployeePreferredLanguageValue AAR = new EmployeePreferredLanguageValue("aar");
    public static final EmployeePreferredLanguageValue AFR = new EmployeePreferredLanguageValue("afr");
    public static final EmployeePreferredLanguageValue AMH = new EmployeePreferredLanguageValue("amh");
    public static final EmployeePreferredLanguageValue ARA = new EmployeePreferredLanguageValue("ara");
    public static final EmployeePreferredLanguageValue AYM = new EmployeePreferredLanguageValue("aym");
    public static final EmployeePreferredLanguageValue AZE = new EmployeePreferredLanguageValue("aze");
    public static final EmployeePreferredLanguageValue BEL = new EmployeePreferredLanguageValue("bel");
    public static final EmployeePreferredLanguageValue BUL = new EmployeePreferredLanguageValue("bul");
    public static final EmployeePreferredLanguageValue BIS = new EmployeePreferredLanguageValue("bis");
    public static final EmployeePreferredLanguageValue BEN = new EmployeePreferredLanguageValue("ben");
    public static final EmployeePreferredLanguageValue BOS = new EmployeePreferredLanguageValue("bos");
    public static final EmployeePreferredLanguageValue BYN = new EmployeePreferredLanguageValue("byn");
    public static final EmployeePreferredLanguageValue CAT = new EmployeePreferredLanguageValue("cat");
    public static final EmployeePreferredLanguageValue CHA = new EmployeePreferredLanguageValue("cha");
    public static final EmployeePreferredLanguageValue CES = new EmployeePreferredLanguageValue("ces");
    public static final EmployeePreferredLanguageValue DEU = new EmployeePreferredLanguageValue("deu");
    public static final EmployeePreferredLanguageValue DIV = new EmployeePreferredLanguageValue("div");
    public static final EmployeePreferredLanguageValue DZO = new EmployeePreferredLanguageValue("dzo");
    public static final EmployeePreferredLanguageValue ELL = new EmployeePreferredLanguageValue("ell");
    public static final EmployeePreferredLanguageValue ENG = new EmployeePreferredLanguageValue("eng");
    public static final EmployeePreferredLanguageValue SPA = new EmployeePreferredLanguageValue("spa");
    public static final EmployeePreferredLanguageValue EST = new EmployeePreferredLanguageValue("est");
    public static final EmployeePreferredLanguageValue FAS = new EmployeePreferredLanguageValue("fas");
    public static final EmployeePreferredLanguageValue FAN = new EmployeePreferredLanguageValue("fan");
    public static final EmployeePreferredLanguageValue FUL = new EmployeePreferredLanguageValue("ful");
    public static final EmployeePreferredLanguageValue FIN = new EmployeePreferredLanguageValue("fin");
    public static final EmployeePreferredLanguageValue FIJ = new EmployeePreferredLanguageValue("fij");
    public static final EmployeePreferredLanguageValue FAO = new EmployeePreferredLanguageValue("fao");
    public static final EmployeePreferredLanguageValue FRA = new EmployeePreferredLanguageValue("fra");
    public static final EmployeePreferredLanguageValue GLE = new EmployeePreferredLanguageValue("gle");
    public static final EmployeePreferredLanguageValue GRN = new EmployeePreferredLanguageValue("grn");
    public static final EmployeePreferredLanguageValue GLV = new EmployeePreferredLanguageValue("glv");
    public static final EmployeePreferredLanguageValue HEB = new EmployeePreferredLanguageValue("heb");
    public static final EmployeePreferredLanguageValue HIN = new EmployeePreferredLanguageValue("hin");
    public static final EmployeePreferredLanguageValue HRV = new EmployeePreferredLanguageValue("hrv");
    public static final EmployeePreferredLanguageValue HAT = new EmployeePreferredLanguageValue("hat");
    public static final EmployeePreferredLanguageValue HUN = new EmployeePreferredLanguageValue("hun");
    public static final EmployeePreferredLanguageValue HYE = new EmployeePreferredLanguageValue("hye");
    public static final EmployeePreferredLanguageValue IND = new EmployeePreferredLanguageValue("ind");
    public static final EmployeePreferredLanguageValue ISL = new EmployeePreferredLanguageValue("isl");
    public static final EmployeePreferredLanguageValue ITA = new EmployeePreferredLanguageValue("ita");
    public static final EmployeePreferredLanguageValue JPN = new EmployeePreferredLanguageValue("jpn");
    public static final EmployeePreferredLanguageValue KAT = new EmployeePreferredLanguageValue("kat");
    public static final EmployeePreferredLanguageValue KON = new EmployeePreferredLanguageValue("kon");
    public static final EmployeePreferredLanguageValue KAZ = new EmployeePreferredLanguageValue("kaz");
    public static final EmployeePreferredLanguageValue KAL = new EmployeePreferredLanguageValue("kal");
    public static final EmployeePreferredLanguageValue KHM = new EmployeePreferredLanguageValue("khm");
    public static final EmployeePreferredLanguageValue KOR = new EmployeePreferredLanguageValue("kor");
    public static final EmployeePreferredLanguageValue KUR = new EmployeePreferredLanguageValue("kur");
    public static final EmployeePreferredLanguageValue KIR = new EmployeePreferredLanguageValue("kir");
    public static final EmployeePreferredLanguageValue LAT = new EmployeePreferredLanguageValue("lat");
    public static final EmployeePreferredLanguageValue LTZ = new EmployeePreferredLanguageValue("ltz");
    public static final EmployeePreferredLanguageValue LIN = new EmployeePreferredLanguageValue("lin");
    public static final EmployeePreferredLanguageValue LAO = new EmployeePreferredLanguageValue("lao");
    public static final EmployeePreferredLanguageValue LIT = new EmployeePreferredLanguageValue("lit");
    public static final EmployeePreferredLanguageValue LUB = new EmployeePreferredLanguageValue("lub");
    public static final EmployeePreferredLanguageValue LAV = new EmployeePreferredLanguageValue("lav");
    public static final EmployeePreferredLanguageValue MLG = new EmployeePreferredLanguageValue("mlg");
    public static final EmployeePreferredLanguageValue MAH = new EmployeePreferredLanguageValue("mah");
    public static final EmployeePreferredLanguageValue MRI = new EmployeePreferredLanguageValue("mri");
    public static final EmployeePreferredLanguageValue MKD = new EmployeePreferredLanguageValue("mkd");
    public static final EmployeePreferredLanguageValue MSA = new EmployeePreferredLanguageValue("msa");
    public static final EmployeePreferredLanguageValue MLT = new EmployeePreferredLanguageValue("mlt");
    public static final EmployeePreferredLanguageValue MYA = new EmployeePreferredLanguageValue("mya");
    public static final EmployeePreferredLanguageValue NOB = new EmployeePreferredLanguageValue("nob");
    public static final EmployeePreferredLanguageValue NEP = new EmployeePreferredLanguageValue("nep");
    public static final EmployeePreferredLanguageValue NLD = new EmployeePreferredLanguageValue("nld");
    public static final EmployeePreferredLanguageValue NNO = new EmployeePreferredLanguageValue("nno");
    public static final EmployeePreferredLanguageValue NOR = new EmployeePreferredLanguageValue("nor");
    public static final EmployeePreferredLanguageValue NBL = new EmployeePreferredLanguageValue("nbl");
    public static final EmployeePreferredLanguageValue NYA = new EmployeePreferredLanguageValue("nya");
    public static final EmployeePreferredLanguageValue PAN = new EmployeePreferredLanguageValue("pan");
    public static final EmployeePreferredLanguageValue POL = new EmployeePreferredLanguageValue("pol");
    public static final EmployeePreferredLanguageValue PUS = new EmployeePreferredLanguageValue("pus");
    public static final EmployeePreferredLanguageValue POR = new EmployeePreferredLanguageValue("por");
    public static final EmployeePreferredLanguageValue RAR = new EmployeePreferredLanguageValue("rar");
    public static final EmployeePreferredLanguageValue ROH = new EmployeePreferredLanguageValue("roh");
    public static final EmployeePreferredLanguageValue RUP = new EmployeePreferredLanguageValue("rup");
    public static final EmployeePreferredLanguageValue RON = new EmployeePreferredLanguageValue("ron");
    public static final EmployeePreferredLanguageValue RUS = new EmployeePreferredLanguageValue("rus");
    public static final EmployeePreferredLanguageValue KIN = new EmployeePreferredLanguageValue("kin");
    public static final EmployeePreferredLanguageValue SAG = new EmployeePreferredLanguageValue("sag");
    public static final EmployeePreferredLanguageValue SIN = new EmployeePreferredLanguageValue("sin");
    public static final EmployeePreferredLanguageValue SLK = new EmployeePreferredLanguageValue("slk");
    public static final EmployeePreferredLanguageValue SMO = new EmployeePreferredLanguageValue("smo");
    public static final EmployeePreferredLanguageValue SNA = new EmployeePreferredLanguageValue("sna");
    public static final EmployeePreferredLanguageValue SOM = new EmployeePreferredLanguageValue("som");
    public static final EmployeePreferredLanguageValue SQI = new EmployeePreferredLanguageValue("sqi");
    public static final EmployeePreferredLanguageValue SRP = new EmployeePreferredLanguageValue("srp");
    public static final EmployeePreferredLanguageValue SSW = new EmployeePreferredLanguageValue("ssw");
    public static final EmployeePreferredLanguageValue SWE = new EmployeePreferredLanguageValue("swe");
    public static final EmployeePreferredLanguageValue SWA = new EmployeePreferredLanguageValue("swa");
    public static final EmployeePreferredLanguageValue TAM = new EmployeePreferredLanguageValue("tam");
    public static final EmployeePreferredLanguageValue TGK = new EmployeePreferredLanguageValue("tgk");
    public static final EmployeePreferredLanguageValue THA = new EmployeePreferredLanguageValue("tha");
    public static final EmployeePreferredLanguageValue TIR = new EmployeePreferredLanguageValue("tir");
    public static final EmployeePreferredLanguageValue TIG = new EmployeePreferredLanguageValue("tig");
    public static final EmployeePreferredLanguageValue ZHO = new EmployeePreferredLanguageValue("zho");
    public static final EmployeePreferredLanguageValue UNMAPPED_VALUE = new EmployeePreferredLanguageValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, EmployeePreferredLanguageValue> values = createValuesMap();
    private static final Map<String, EmployeePreferredLanguageValueEnum> enums = createEnumsMap();

    private final String value;

    private EmployeePreferredLanguageValue(String value) {
        this.value = value;
    }

    /**
     * Returns a EmployeePreferredLanguageValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as EmployeePreferredLanguageValue
     */ 
    public static EmployeePreferredLanguageValue of(String value) {
        synchronized (EmployeePreferredLanguageValue.class) {
            return values.computeIfAbsent(value, v -> new EmployeePreferredLanguageValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<EmployeePreferredLanguageValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        EmployeePreferredLanguageValue other = (EmployeePreferredLanguageValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "EmployeePreferredLanguageValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static EmployeePreferredLanguageValue[] values() {
        synchronized (EmployeePreferredLanguageValue.class) {
            return values.values().toArray(new EmployeePreferredLanguageValue[] {});
        }
    }

    private static final Map<String, EmployeePreferredLanguageValue> createValuesMap() {
        Map<String, EmployeePreferredLanguageValue> map = new LinkedHashMap<>();
        map.put("aar", AAR);
        map.put("afr", AFR);
        map.put("amh", AMH);
        map.put("ara", ARA);
        map.put("aym", AYM);
        map.put("aze", AZE);
        map.put("bel", BEL);
        map.put("bul", BUL);
        map.put("bis", BIS);
        map.put("ben", BEN);
        map.put("bos", BOS);
        map.put("byn", BYN);
        map.put("cat", CAT);
        map.put("cha", CHA);
        map.put("ces", CES);
        map.put("deu", DEU);
        map.put("div", DIV);
        map.put("dzo", DZO);
        map.put("ell", ELL);
        map.put("eng", ENG);
        map.put("spa", SPA);
        map.put("est", EST);
        map.put("fas", FAS);
        map.put("fan", FAN);
        map.put("ful", FUL);
        map.put("fin", FIN);
        map.put("fij", FIJ);
        map.put("fao", FAO);
        map.put("fra", FRA);
        map.put("gle", GLE);
        map.put("grn", GRN);
        map.put("glv", GLV);
        map.put("heb", HEB);
        map.put("hin", HIN);
        map.put("hrv", HRV);
        map.put("hat", HAT);
        map.put("hun", HUN);
        map.put("hye", HYE);
        map.put("ind", IND);
        map.put("isl", ISL);
        map.put("ita", ITA);
        map.put("jpn", JPN);
        map.put("kat", KAT);
        map.put("kon", KON);
        map.put("kaz", KAZ);
        map.put("kal", KAL);
        map.put("khm", KHM);
        map.put("kor", KOR);
        map.put("kur", KUR);
        map.put("kir", KIR);
        map.put("lat", LAT);
        map.put("ltz", LTZ);
        map.put("lin", LIN);
        map.put("lao", LAO);
        map.put("lit", LIT);
        map.put("lub", LUB);
        map.put("lav", LAV);
        map.put("mlg", MLG);
        map.put("mah", MAH);
        map.put("mri", MRI);
        map.put("mkd", MKD);
        map.put("msa", MSA);
        map.put("mlt", MLT);
        map.put("mya", MYA);
        map.put("nob", NOB);
        map.put("nep", NEP);
        map.put("nld", NLD);
        map.put("nno", NNO);
        map.put("nor", NOR);
        map.put("nbl", NBL);
        map.put("nya", NYA);
        map.put("pan", PAN);
        map.put("pol", POL);
        map.put("pus", PUS);
        map.put("por", POR);
        map.put("rar", RAR);
        map.put("roh", ROH);
        map.put("rup", RUP);
        map.put("ron", RON);
        map.put("rus", RUS);
        map.put("kin", KIN);
        map.put("sag", SAG);
        map.put("sin", SIN);
        map.put("slk", SLK);
        map.put("smo", SMO);
        map.put("sna", SNA);
        map.put("som", SOM);
        map.put("sqi", SQI);
        map.put("srp", SRP);
        map.put("ssw", SSW);
        map.put("swe", SWE);
        map.put("swa", SWA);
        map.put("tam", TAM);
        map.put("tgk", TGK);
        map.put("tha", THA);
        map.put("tir", TIR);
        map.put("tig", TIG);
        map.put("zho", ZHO);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, EmployeePreferredLanguageValueEnum> createEnumsMap() {
        Map<String, EmployeePreferredLanguageValueEnum> map = new HashMap<>();
        map.put("aar", EmployeePreferredLanguageValueEnum.AAR);
        map.put("afr", EmployeePreferredLanguageValueEnum.AFR);
        map.put("amh", EmployeePreferredLanguageValueEnum.AMH);
        map.put("ara", EmployeePreferredLanguageValueEnum.ARA);
        map.put("aym", EmployeePreferredLanguageValueEnum.AYM);
        map.put("aze", EmployeePreferredLanguageValueEnum.AZE);
        map.put("bel", EmployeePreferredLanguageValueEnum.BEL);
        map.put("bul", EmployeePreferredLanguageValueEnum.BUL);
        map.put("bis", EmployeePreferredLanguageValueEnum.BIS);
        map.put("ben", EmployeePreferredLanguageValueEnum.BEN);
        map.put("bos", EmployeePreferredLanguageValueEnum.BOS);
        map.put("byn", EmployeePreferredLanguageValueEnum.BYN);
        map.put("cat", EmployeePreferredLanguageValueEnum.CAT);
        map.put("cha", EmployeePreferredLanguageValueEnum.CHA);
        map.put("ces", EmployeePreferredLanguageValueEnum.CES);
        map.put("deu", EmployeePreferredLanguageValueEnum.DEU);
        map.put("div", EmployeePreferredLanguageValueEnum.DIV);
        map.put("dzo", EmployeePreferredLanguageValueEnum.DZO);
        map.put("ell", EmployeePreferredLanguageValueEnum.ELL);
        map.put("eng", EmployeePreferredLanguageValueEnum.ENG);
        map.put("spa", EmployeePreferredLanguageValueEnum.SPA);
        map.put("est", EmployeePreferredLanguageValueEnum.EST);
        map.put("fas", EmployeePreferredLanguageValueEnum.FAS);
        map.put("fan", EmployeePreferredLanguageValueEnum.FAN);
        map.put("ful", EmployeePreferredLanguageValueEnum.FUL);
        map.put("fin", EmployeePreferredLanguageValueEnum.FIN);
        map.put("fij", EmployeePreferredLanguageValueEnum.FIJ);
        map.put("fao", EmployeePreferredLanguageValueEnum.FAO);
        map.put("fra", EmployeePreferredLanguageValueEnum.FRA);
        map.put("gle", EmployeePreferredLanguageValueEnum.GLE);
        map.put("grn", EmployeePreferredLanguageValueEnum.GRN);
        map.put("glv", EmployeePreferredLanguageValueEnum.GLV);
        map.put("heb", EmployeePreferredLanguageValueEnum.HEB);
        map.put("hin", EmployeePreferredLanguageValueEnum.HIN);
        map.put("hrv", EmployeePreferredLanguageValueEnum.HRV);
        map.put("hat", EmployeePreferredLanguageValueEnum.HAT);
        map.put("hun", EmployeePreferredLanguageValueEnum.HUN);
        map.put("hye", EmployeePreferredLanguageValueEnum.HYE);
        map.put("ind", EmployeePreferredLanguageValueEnum.IND);
        map.put("isl", EmployeePreferredLanguageValueEnum.ISL);
        map.put("ita", EmployeePreferredLanguageValueEnum.ITA);
        map.put("jpn", EmployeePreferredLanguageValueEnum.JPN);
        map.put("kat", EmployeePreferredLanguageValueEnum.KAT);
        map.put("kon", EmployeePreferredLanguageValueEnum.KON);
        map.put("kaz", EmployeePreferredLanguageValueEnum.KAZ);
        map.put("kal", EmployeePreferredLanguageValueEnum.KAL);
        map.put("khm", EmployeePreferredLanguageValueEnum.KHM);
        map.put("kor", EmployeePreferredLanguageValueEnum.KOR);
        map.put("kur", EmployeePreferredLanguageValueEnum.KUR);
        map.put("kir", EmployeePreferredLanguageValueEnum.KIR);
        map.put("lat", EmployeePreferredLanguageValueEnum.LAT);
        map.put("ltz", EmployeePreferredLanguageValueEnum.LTZ);
        map.put("lin", EmployeePreferredLanguageValueEnum.LIN);
        map.put("lao", EmployeePreferredLanguageValueEnum.LAO);
        map.put("lit", EmployeePreferredLanguageValueEnum.LIT);
        map.put("lub", EmployeePreferredLanguageValueEnum.LUB);
        map.put("lav", EmployeePreferredLanguageValueEnum.LAV);
        map.put("mlg", EmployeePreferredLanguageValueEnum.MLG);
        map.put("mah", EmployeePreferredLanguageValueEnum.MAH);
        map.put("mri", EmployeePreferredLanguageValueEnum.MRI);
        map.put("mkd", EmployeePreferredLanguageValueEnum.MKD);
        map.put("msa", EmployeePreferredLanguageValueEnum.MSA);
        map.put("mlt", EmployeePreferredLanguageValueEnum.MLT);
        map.put("mya", EmployeePreferredLanguageValueEnum.MYA);
        map.put("nob", EmployeePreferredLanguageValueEnum.NOB);
        map.put("nep", EmployeePreferredLanguageValueEnum.NEP);
        map.put("nld", EmployeePreferredLanguageValueEnum.NLD);
        map.put("nno", EmployeePreferredLanguageValueEnum.NNO);
        map.put("nor", EmployeePreferredLanguageValueEnum.NOR);
        map.put("nbl", EmployeePreferredLanguageValueEnum.NBL);
        map.put("nya", EmployeePreferredLanguageValueEnum.NYA);
        map.put("pan", EmployeePreferredLanguageValueEnum.PAN);
        map.put("pol", EmployeePreferredLanguageValueEnum.POL);
        map.put("pus", EmployeePreferredLanguageValueEnum.PUS);
        map.put("por", EmployeePreferredLanguageValueEnum.POR);
        map.put("rar", EmployeePreferredLanguageValueEnum.RAR);
        map.put("roh", EmployeePreferredLanguageValueEnum.ROH);
        map.put("rup", EmployeePreferredLanguageValueEnum.RUP);
        map.put("ron", EmployeePreferredLanguageValueEnum.RON);
        map.put("rus", EmployeePreferredLanguageValueEnum.RUS);
        map.put("kin", EmployeePreferredLanguageValueEnum.KIN);
        map.put("sag", EmployeePreferredLanguageValueEnum.SAG);
        map.put("sin", EmployeePreferredLanguageValueEnum.SIN);
        map.put("slk", EmployeePreferredLanguageValueEnum.SLK);
        map.put("smo", EmployeePreferredLanguageValueEnum.SMO);
        map.put("sna", EmployeePreferredLanguageValueEnum.SNA);
        map.put("som", EmployeePreferredLanguageValueEnum.SOM);
        map.put("sqi", EmployeePreferredLanguageValueEnum.SQI);
        map.put("srp", EmployeePreferredLanguageValueEnum.SRP);
        map.put("ssw", EmployeePreferredLanguageValueEnum.SSW);
        map.put("swe", EmployeePreferredLanguageValueEnum.SWE);
        map.put("swa", EmployeePreferredLanguageValueEnum.SWA);
        map.put("tam", EmployeePreferredLanguageValueEnum.TAM);
        map.put("tgk", EmployeePreferredLanguageValueEnum.TGK);
        map.put("tha", EmployeePreferredLanguageValueEnum.THA);
        map.put("tir", EmployeePreferredLanguageValueEnum.TIR);
        map.put("tig", EmployeePreferredLanguageValueEnum.TIG);
        map.put("zho", EmployeePreferredLanguageValueEnum.ZHO);
        map.put("unmapped_value", EmployeePreferredLanguageValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<EmployeePreferredLanguageValue> {

        protected _Serializer() {
            super(EmployeePreferredLanguageValue.class);
        }

        @Override
        public void serialize(EmployeePreferredLanguageValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<EmployeePreferredLanguageValue> {

        protected _Deserializer() {
            super(EmployeePreferredLanguageValue.class);
        }

        @Override
        public EmployeePreferredLanguageValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return EmployeePreferredLanguageValue.of(v);
        }
    }
    
    public enum EmployeePreferredLanguageValueEnum {

        AAR("aar"),
        AFR("afr"),
        AMH("amh"),
        ARA("ara"),
        AYM("aym"),
        AZE("aze"),
        BEL("bel"),
        BUL("bul"),
        BIS("bis"),
        BEN("ben"),
        BOS("bos"),
        BYN("byn"),
        CAT("cat"),
        CHA("cha"),
        CES("ces"),
        DEU("deu"),
        DIV("div"),
        DZO("dzo"),
        ELL("ell"),
        ENG("eng"),
        SPA("spa"),
        EST("est"),
        FAS("fas"),
        FAN("fan"),
        FUL("ful"),
        FIN("fin"),
        FIJ("fij"),
        FAO("fao"),
        FRA("fra"),
        GLE("gle"),
        GRN("grn"),
        GLV("glv"),
        HEB("heb"),
        HIN("hin"),
        HRV("hrv"),
        HAT("hat"),
        HUN("hun"),
        HYE("hye"),
        IND("ind"),
        ISL("isl"),
        ITA("ita"),
        JPN("jpn"),
        KAT("kat"),
        KON("kon"),
        KAZ("kaz"),
        KAL("kal"),
        KHM("khm"),
        KOR("kor"),
        KUR("kur"),
        KIR("kir"),
        LAT("lat"),
        LTZ("ltz"),
        LIN("lin"),
        LAO("lao"),
        LIT("lit"),
        LUB("lub"),
        LAV("lav"),
        MLG("mlg"),
        MAH("mah"),
        MRI("mri"),
        MKD("mkd"),
        MSA("msa"),
        MLT("mlt"),
        MYA("mya"),
        NOB("nob"),
        NEP("nep"),
        NLD("nld"),
        NNO("nno"),
        NOR("nor"),
        NBL("nbl"),
        NYA("nya"),
        PAN("pan"),
        POL("pol"),
        PUS("pus"),
        POR("por"),
        RAR("rar"),
        ROH("roh"),
        RUP("rup"),
        RON("ron"),
        RUS("rus"),
        KIN("kin"),
        SAG("sag"),
        SIN("sin"),
        SLK("slk"),
        SMO("smo"),
        SNA("sna"),
        SOM("som"),
        SQI("sqi"),
        SRP("srp"),
        SSW("ssw"),
        SWE("swe"),
        SWA("swa"),
        TAM("tam"),
        TGK("tgk"),
        THA("tha"),
        TIR("tir"),
        TIG("tig"),
        ZHO("zho"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private EmployeePreferredLanguageValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}
