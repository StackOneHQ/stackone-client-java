/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

public class HrisCreateWorkEligibilityRequestDto {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    private JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoDocument> document;

    /**
     * The country code of the issued by authority
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issued_by")
    private JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoIssuedBy> issuedBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_type")
    private JsonNullable<String> subType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_from")
    private JsonNullable<OffsetDateTime> validFrom;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_to")
    private JsonNullable<OffsetDateTime> validTo;

    /**
     * Value to pass through to the provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passthrough")
    private JsonNullable<? extends Map<String, Object>> passthrough;

    @JsonCreator
    public HrisCreateWorkEligibilityRequestDto(
            @JsonProperty("document") JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoDocument> document,
            @JsonProperty("issued_by") JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoIssuedBy> issuedBy,
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("sub_type") JsonNullable<String> subType,
            @JsonProperty("type") JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoType> type,
            @JsonProperty("valid_from") JsonNullable<OffsetDateTime> validFrom,
            @JsonProperty("valid_to") JsonNullable<OffsetDateTime> validTo,
            @JsonProperty("passthrough") JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(issuedBy, "issuedBy");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(subType, "subType");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(validFrom, "validFrom");
        Utils.checkNotNull(validTo, "validTo");
        Utils.checkNotNull(passthrough, "passthrough");
        this.document = document;
        this.issuedBy = issuedBy;
        this.number = number;
        this.subType = subType;
        this.type = type;
        this.validFrom = validFrom;
        this.validTo = validTo;
        this.passthrough = passthrough;
    }
    
    public HrisCreateWorkEligibilityRequestDto() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateWorkEligibilityRequestDtoDocument> document() {
        return (JsonNullable<HrisCreateWorkEligibilityRequestDtoDocument>) document;
    }

    /**
     * The country code of the issued by authority
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateWorkEligibilityRequestDtoIssuedBy> issuedBy() {
        return (JsonNullable<HrisCreateWorkEligibilityRequestDtoIssuedBy>) issuedBy;
    }

    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    @JsonIgnore
    public JsonNullable<String> subType() {
        return subType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateWorkEligibilityRequestDtoType> type() {
        return (JsonNullable<HrisCreateWorkEligibilityRequestDtoType>) type;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> validFrom() {
        return validFrom;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> validTo() {
        return validTo;
    }

    /**
     * Value to pass through to the provider
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> passthrough() {
        return (JsonNullable<Map<String, Object>>) passthrough;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public HrisCreateWorkEligibilityRequestDto withDocument(HrisCreateWorkEligibilityRequestDtoDocument document) {
        Utils.checkNotNull(document, "document");
        this.document = JsonNullable.of(document);
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withDocument(JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoDocument> document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    /**
     * The country code of the issued by authority
     */
    public HrisCreateWorkEligibilityRequestDto withIssuedBy(HrisCreateWorkEligibilityRequestDtoIssuedBy issuedBy) {
        Utils.checkNotNull(issuedBy, "issuedBy");
        this.issuedBy = JsonNullable.of(issuedBy);
        return this;
    }

    /**
     * The country code of the issued by authority
     */
    public HrisCreateWorkEligibilityRequestDto withIssuedBy(JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoIssuedBy> issuedBy) {
        Utils.checkNotNull(issuedBy, "issuedBy");
        this.issuedBy = issuedBy;
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withSubType(String subType) {
        Utils.checkNotNull(subType, "subType");
        this.subType = JsonNullable.of(subType);
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withSubType(JsonNullable<String> subType) {
        Utils.checkNotNull(subType, "subType");
        this.subType = subType;
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withType(HrisCreateWorkEligibilityRequestDtoType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withType(JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withValidFrom(OffsetDateTime validFrom) {
        Utils.checkNotNull(validFrom, "validFrom");
        this.validFrom = JsonNullable.of(validFrom);
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withValidFrom(JsonNullable<OffsetDateTime> validFrom) {
        Utils.checkNotNull(validFrom, "validFrom");
        this.validFrom = validFrom;
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withValidTo(OffsetDateTime validTo) {
        Utils.checkNotNull(validTo, "validTo");
        this.validTo = JsonNullable.of(validTo);
        return this;
    }

    public HrisCreateWorkEligibilityRequestDto withValidTo(JsonNullable<OffsetDateTime> validTo) {
        Utils.checkNotNull(validTo, "validTo");
        this.validTo = validTo;
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisCreateWorkEligibilityRequestDto withPassthrough(Map<String, Object> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = JsonNullable.of(passthrough);
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisCreateWorkEligibilityRequestDto withPassthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = passthrough;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisCreateWorkEligibilityRequestDto other = (HrisCreateWorkEligibilityRequestDto) o;
        return 
            Utils.enhancedDeepEquals(this.document, other.document) &&
            Utils.enhancedDeepEquals(this.issuedBy, other.issuedBy) &&
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.subType, other.subType) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.validFrom, other.validFrom) &&
            Utils.enhancedDeepEquals(this.validTo, other.validTo) &&
            Utils.enhancedDeepEquals(this.passthrough, other.passthrough);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            document,
            issuedBy,
            number,
            subType,
            type,
            validFrom,
            validTo,
            passthrough);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisCreateWorkEligibilityRequestDto.class,
                "document", document,
                "issuedBy", issuedBy,
                "number", number,
                "subType", subType,
                "type", type,
                "validFrom", validFrom,
                "validTo", validTo,
                "passthrough", passthrough);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoDocument> document = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoIssuedBy> issuedBy = JsonNullable.undefined();
 
        private JsonNullable<String> number = JsonNullable.undefined();
 
        private JsonNullable<String> subType = JsonNullable.undefined();
 
        private JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoType> type = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> validFrom = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> validTo = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> passthrough = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder document(HrisCreateWorkEligibilityRequestDtoDocument document) {
            Utils.checkNotNull(document, "document");
            this.document = JsonNullable.of(document);
            return this;
        }

        public Builder document(JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoDocument> document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        /**
         * The country code of the issued by authority
         */
        public Builder issuedBy(HrisCreateWorkEligibilityRequestDtoIssuedBy issuedBy) {
            Utils.checkNotNull(issuedBy, "issuedBy");
            this.issuedBy = JsonNullable.of(issuedBy);
            return this;
        }

        /**
         * The country code of the issued by authority
         */
        public Builder issuedBy(JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoIssuedBy> issuedBy) {
            Utils.checkNotNull(issuedBy, "issuedBy");
            this.issuedBy = issuedBy;
            return this;
        }

        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        public Builder subType(String subType) {
            Utils.checkNotNull(subType, "subType");
            this.subType = JsonNullable.of(subType);
            return this;
        }

        public Builder subType(JsonNullable<String> subType) {
            Utils.checkNotNull(subType, "subType");
            this.subType = subType;
            return this;
        }

        public Builder type(HrisCreateWorkEligibilityRequestDtoType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        public Builder type(JsonNullable<? extends HrisCreateWorkEligibilityRequestDtoType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder validFrom(OffsetDateTime validFrom) {
            Utils.checkNotNull(validFrom, "validFrom");
            this.validFrom = JsonNullable.of(validFrom);
            return this;
        }

        public Builder validFrom(JsonNullable<OffsetDateTime> validFrom) {
            Utils.checkNotNull(validFrom, "validFrom");
            this.validFrom = validFrom;
            return this;
        }

        public Builder validTo(OffsetDateTime validTo) {
            Utils.checkNotNull(validTo, "validTo");
            this.validTo = JsonNullable.of(validTo);
            return this;
        }

        public Builder validTo(JsonNullable<OffsetDateTime> validTo) {
            Utils.checkNotNull(validTo, "validTo");
            this.validTo = validTo;
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(Map<String, Object> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = JsonNullable.of(passthrough);
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = passthrough;
            return this;
        }
        
        public HrisCreateWorkEligibilityRequestDto build() {
            return new HrisCreateWorkEligibilityRequestDto(
                document,
                issuedBy,
                number,
                subType,
                type,
                validFrom,
                validTo,
                passthrough);
        }
    }
}
