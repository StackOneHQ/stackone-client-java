/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * JournalLineValue
 * 
 * <p>Type of account
 */
@JsonDeserialize(using = JournalLineValue._Deserializer.class)
@JsonSerialize(using = JournalLineValue._Serializer.class)
public class JournalLineValue {

    public static final JournalLineValue ASSET = new JournalLineValue("asset");
    public static final JournalLineValue LIABILITY = new JournalLineValue("liability");
    public static final JournalLineValue EQUITY = new JournalLineValue("equity");
    public static final JournalLineValue REVENUE = new JournalLineValue("revenue");
    public static final JournalLineValue EXPENSE = new JournalLineValue("expense");
    public static final JournalLineValue UNMAPPED_VALUE = new JournalLineValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, JournalLineValue> values = createValuesMap();
    private static final Map<String, JournalLineValueEnum> enums = createEnumsMap();

    private final String value;

    private JournalLineValue(String value) {
        this.value = value;
    }

    /**
     * Returns a JournalLineValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as JournalLineValue
     */ 
    public static JournalLineValue of(String value) {
        synchronized (JournalLineValue.class) {
            return values.computeIfAbsent(value, v -> new JournalLineValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<JournalLineValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        JournalLineValue other = (JournalLineValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "JournalLineValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static JournalLineValue[] values() {
        synchronized (JournalLineValue.class) {
            return values.values().toArray(new JournalLineValue[] {});
        }
    }

    private static final Map<String, JournalLineValue> createValuesMap() {
        Map<String, JournalLineValue> map = new LinkedHashMap<>();
        map.put("asset", ASSET);
        map.put("liability", LIABILITY);
        map.put("equity", EQUITY);
        map.put("revenue", REVENUE);
        map.put("expense", EXPENSE);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, JournalLineValueEnum> createEnumsMap() {
        Map<String, JournalLineValueEnum> map = new HashMap<>();
        map.put("asset", JournalLineValueEnum.ASSET);
        map.put("liability", JournalLineValueEnum.LIABILITY);
        map.put("equity", JournalLineValueEnum.EQUITY);
        map.put("revenue", JournalLineValueEnum.REVENUE);
        map.put("expense", JournalLineValueEnum.EXPENSE);
        map.put("unmapped_value", JournalLineValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<JournalLineValue> {

        protected _Serializer() {
            super(JournalLineValue.class);
        }

        @Override
        public void serialize(JournalLineValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<JournalLineValue> {

        protected _Deserializer() {
            super(JournalLineValue.class);
        }

        @Override
        public JournalLineValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return JournalLineValue.of(v);
        }
    }
    
    public enum JournalLineValueEnum {

        ASSET("asset"),
        LIABILITY("liability"),
        EQUITY("equity"),
        REVENUE("revenue"),
        EXPENSE("expense"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private JournalLineValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

