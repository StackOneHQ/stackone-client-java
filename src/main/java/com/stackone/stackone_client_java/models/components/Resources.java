/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Resources
 * 
 * <p>Resources for this provider, such as image assets
 */
public class Resources {
    /**
     * Image assets for this provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    private JsonNullable<? extends Images> images;

    @JsonCreator
    public Resources(
            @JsonProperty("images") JsonNullable<? extends Images> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
    }
    
    public Resources() {
        this(JsonNullable.undefined());
    }

    /**
     * Image assets for this provider
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Images> images() {
        return (JsonNullable<Images>) images;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Image assets for this provider
     */
    public Resources withImages(Images images) {
        Utils.checkNotNull(images, "images");
        this.images = JsonNullable.of(images);
        return this;
    }

    /**
     * Image assets for this provider
     */
    public Resources withImages(JsonNullable<? extends Images> images) {
        Utils.checkNotNull(images, "images");
        this.images = images;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Resources other = (Resources) o;
        return 
            Utils.enhancedDeepEquals(this.images, other.images);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            images);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Resources.class,
                "images", images);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Images> images = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Image assets for this provider
         */
        public Builder images(Images images) {
            Utils.checkNotNull(images, "images");
            this.images = JsonNullable.of(images);
            return this;
        }

        /**
         * Image assets for this provider
         */
        public Builder images(JsonNullable<? extends Images> images) {
            Utils.checkNotNull(images, "images");
            this.images = images;
            return this;
        }

        public Resources build() {

            return new Resources(
                images);
        }

    }
}
