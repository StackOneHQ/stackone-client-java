/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class LmsUpsertCourseRequestDto {

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_custom_fields")
    private JsonNullable<? extends Map<String, Object>> unifiedCustomFields;

    /**
     * The external ID associated with this course
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_reference")
    private JsonNullable<String> externalReference;

    /**
     * The title of the course
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The description of the course
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * The languages associated with this course
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languages")
    private JsonNullable<? extends List<LanguageEnum>> languages;

    /**
     * The URL of the thumbnail image associated with the course.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_url")
    private JsonNullable<String> coverUrl;

    /**
     * The redirect URL of the course.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * Whether the course is active and available for users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The duration of the course following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private JsonNullable<String> duration;

    /**
     * The categories associated with this content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    private JsonNullable<? extends List<CreateCategoriesApiModel>> categories;

    /**
     * The skills associated with this content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skills")
    private JsonNullable<? extends List<CreateSkillsApiModel>> skills;

    /**
     * The content associated with this course
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private JsonNullable<? extends List<CreateContentApiModel>> content;

    /**
     * The localization data for this course
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localizations")
    private JsonNullable<? extends List<LocalizationModel>> localizations;

    @JsonCreator
    public LmsUpsertCourseRequestDto(
            @JsonProperty("unified_custom_fields") JsonNullable<? extends Map<String, Object>> unifiedCustomFields,
            @JsonProperty("external_reference") JsonNullable<String> externalReference,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("languages") JsonNullable<? extends List<LanguageEnum>> languages,
            @JsonProperty("cover_url") JsonNullable<String> coverUrl,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("duration") JsonNullable<String> duration,
            @JsonProperty("categories") JsonNullable<? extends List<CreateCategoriesApiModel>> categories,
            @JsonProperty("skills") JsonNullable<? extends List<CreateSkillsApiModel>> skills,
            @JsonProperty("content") JsonNullable<? extends List<CreateContentApiModel>> content,
            @JsonProperty("localizations") JsonNullable<? extends List<LocalizationModel>> localizations) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        Utils.checkNotNull(externalReference, "externalReference");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(languages, "languages");
        Utils.checkNotNull(coverUrl, "coverUrl");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(skills, "skills");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(localizations, "localizations");
        this.unifiedCustomFields = unifiedCustomFields;
        this.externalReference = externalReference;
        this.title = title;
        this.description = description;
        this.languages = languages;
        this.coverUrl = coverUrl;
        this.url = url;
        this.active = active;
        this.duration = duration;
        this.categories = categories;
        this.skills = skills;
        this.content = content;
        this.localizations = localizations;
    }
    
    public LmsUpsertCourseRequestDto() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> unifiedCustomFields() {
        return (JsonNullable<Map<String, Object>>) unifiedCustomFields;
    }

    /**
     * The external ID associated with this course
     */
    @JsonIgnore
    public JsonNullable<String> externalReference() {
        return externalReference;
    }

    /**
     * The title of the course
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The description of the course
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * The languages associated with this course
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LanguageEnum>> languages() {
        return (JsonNullable<List<LanguageEnum>>) languages;
    }

    /**
     * The URL of the thumbnail image associated with the course.
     */
    @JsonIgnore
    public JsonNullable<String> coverUrl() {
        return coverUrl;
    }

    /**
     * The redirect URL of the course.
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * Whether the course is active and available for users.
     */
    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * The duration of the course following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
     */
    @JsonIgnore
    public JsonNullable<String> duration() {
        return duration;
    }

    /**
     * The categories associated with this content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateCategoriesApiModel>> categories() {
        return (JsonNullable<List<CreateCategoriesApiModel>>) categories;
    }

    /**
     * The skills associated with this content
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateSkillsApiModel>> skills() {
        return (JsonNullable<List<CreateSkillsApiModel>>) skills;
    }

    /**
     * The content associated with this course
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateContentApiModel>> content() {
        return (JsonNullable<List<CreateContentApiModel>>) content;
    }

    /**
     * The localization data for this course
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<LocalizationModel>> localizations() {
        return (JsonNullable<List<LocalizationModel>>) localizations;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public LmsUpsertCourseRequestDto withUnifiedCustomFields(Map<String, Object> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public LmsUpsertCourseRequestDto withUnifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = unifiedCustomFields;
        return this;
    }

    /**
     * The external ID associated with this course
     */
    public LmsUpsertCourseRequestDto withExternalReference(String externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = JsonNullable.of(externalReference);
        return this;
    }

    /**
     * The external ID associated with this course
     */
    public LmsUpsertCourseRequestDto withExternalReference(JsonNullable<String> externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = externalReference;
        return this;
    }

    /**
     * The title of the course
     */
    public LmsUpsertCourseRequestDto withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The title of the course
     */
    public LmsUpsertCourseRequestDto withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The description of the course
     */
    public LmsUpsertCourseRequestDto withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the course
     */
    public LmsUpsertCourseRequestDto withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The languages associated with this course
     */
    public LmsUpsertCourseRequestDto withLanguages(List<LanguageEnum> languages) {
        Utils.checkNotNull(languages, "languages");
        this.languages = JsonNullable.of(languages);
        return this;
    }

    /**
     * The languages associated with this course
     */
    public LmsUpsertCourseRequestDto withLanguages(JsonNullable<? extends List<LanguageEnum>> languages) {
        Utils.checkNotNull(languages, "languages");
        this.languages = languages;
        return this;
    }

    /**
     * The URL of the thumbnail image associated with the course.
     */
    public LmsUpsertCourseRequestDto withCoverUrl(String coverUrl) {
        Utils.checkNotNull(coverUrl, "coverUrl");
        this.coverUrl = JsonNullable.of(coverUrl);
        return this;
    }

    /**
     * The URL of the thumbnail image associated with the course.
     */
    public LmsUpsertCourseRequestDto withCoverUrl(JsonNullable<String> coverUrl) {
        Utils.checkNotNull(coverUrl, "coverUrl");
        this.coverUrl = coverUrl;
        return this;
    }

    /**
     * The redirect URL of the course.
     */
    public LmsUpsertCourseRequestDto withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The redirect URL of the course.
     */
    public LmsUpsertCourseRequestDto withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Whether the course is active and available for users.
     */
    public LmsUpsertCourseRequestDto withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    /**
     * Whether the course is active and available for users.
     */
    public LmsUpsertCourseRequestDto withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The duration of the course following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
     */
    public LmsUpsertCourseRequestDto withDuration(String duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = JsonNullable.of(duration);
        return this;
    }

    /**
     * The duration of the course following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
     */
    public LmsUpsertCourseRequestDto withDuration(JsonNullable<String> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * The categories associated with this content
     */
    public LmsUpsertCourseRequestDto withCategories(List<CreateCategoriesApiModel> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = JsonNullable.of(categories);
        return this;
    }

    /**
     * The categories associated with this content
     */
    public LmsUpsertCourseRequestDto withCategories(JsonNullable<? extends List<CreateCategoriesApiModel>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * The skills associated with this content
     */
    public LmsUpsertCourseRequestDto withSkills(List<CreateSkillsApiModel> skills) {
        Utils.checkNotNull(skills, "skills");
        this.skills = JsonNullable.of(skills);
        return this;
    }

    /**
     * The skills associated with this content
     */
    public LmsUpsertCourseRequestDto withSkills(JsonNullable<? extends List<CreateSkillsApiModel>> skills) {
        Utils.checkNotNull(skills, "skills");
        this.skills = skills;
        return this;
    }

    /**
     * The content associated with this course
     */
    public LmsUpsertCourseRequestDto withContent(List<CreateContentApiModel> content) {
        Utils.checkNotNull(content, "content");
        this.content = JsonNullable.of(content);
        return this;
    }

    /**
     * The content associated with this course
     */
    public LmsUpsertCourseRequestDto withContent(JsonNullable<? extends List<CreateContentApiModel>> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * The localization data for this course
     */
    public LmsUpsertCourseRequestDto withLocalizations(List<LocalizationModel> localizations) {
        Utils.checkNotNull(localizations, "localizations");
        this.localizations = JsonNullable.of(localizations);
        return this;
    }

    /**
     * The localization data for this course
     */
    public LmsUpsertCourseRequestDto withLocalizations(JsonNullable<? extends List<LocalizationModel>> localizations) {
        Utils.checkNotNull(localizations, "localizations");
        this.localizations = localizations;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LmsUpsertCourseRequestDto other = (LmsUpsertCourseRequestDto) o;
        return 
            Objects.deepEquals(this.unifiedCustomFields, other.unifiedCustomFields) &&
            Objects.deepEquals(this.externalReference, other.externalReference) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.languages, other.languages) &&
            Objects.deepEquals(this.coverUrl, other.coverUrl) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.duration, other.duration) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.skills, other.skills) &&
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.localizations, other.localizations);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            unifiedCustomFields,
            externalReference,
            title,
            description,
            languages,
            coverUrl,
            url,
            active,
            duration,
            categories,
            skills,
            content,
            localizations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LmsUpsertCourseRequestDto.class,
                "unifiedCustomFields", unifiedCustomFields,
                "externalReference", externalReference,
                "title", title,
                "description", description,
                "languages", languages,
                "coverUrl", coverUrl,
                "url", url,
                "active", active,
                "duration", duration,
                "categories", categories,
                "skills", skills,
                "content", content,
                "localizations", localizations);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Map<String, Object>> unifiedCustomFields = JsonNullable.undefined();
 
        private JsonNullable<String> externalReference = JsonNullable.undefined();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LanguageEnum>> languages = JsonNullable.undefined();
 
        private JsonNullable<String> coverUrl = JsonNullable.undefined();
 
        private JsonNullable<String> url = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private JsonNullable<String> duration = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CreateCategoriesApiModel>> categories = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CreateSkillsApiModel>> skills = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CreateContentApiModel>> content = JsonNullable.undefined();
 
        private JsonNullable<? extends List<LocalizationModel>> localizations = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(Map<String, Object> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = unifiedCustomFields;
            return this;
        }

        /**
         * The external ID associated with this course
         */
        public Builder externalReference(String externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = JsonNullable.of(externalReference);
            return this;
        }

        /**
         * The external ID associated with this course
         */
        public Builder externalReference(JsonNullable<String> externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = externalReference;
            return this;
        }

        /**
         * The title of the course
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The title of the course
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The description of the course
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the course
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The languages associated with this course
         */
        public Builder languages(List<LanguageEnum> languages) {
            Utils.checkNotNull(languages, "languages");
            this.languages = JsonNullable.of(languages);
            return this;
        }

        /**
         * The languages associated with this course
         */
        public Builder languages(JsonNullable<? extends List<LanguageEnum>> languages) {
            Utils.checkNotNull(languages, "languages");
            this.languages = languages;
            return this;
        }

        /**
         * The URL of the thumbnail image associated with the course.
         */
        public Builder coverUrl(String coverUrl) {
            Utils.checkNotNull(coverUrl, "coverUrl");
            this.coverUrl = JsonNullable.of(coverUrl);
            return this;
        }

        /**
         * The URL of the thumbnail image associated with the course.
         */
        public Builder coverUrl(JsonNullable<String> coverUrl) {
            Utils.checkNotNull(coverUrl, "coverUrl");
            this.coverUrl = coverUrl;
            return this;
        }

        /**
         * The redirect URL of the course.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The redirect URL of the course.
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Whether the course is active and available for users.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * Whether the course is active and available for users.
         */
        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The duration of the course following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
         */
        public Builder duration(String duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = JsonNullable.of(duration);
            return this;
        }

        /**
         * The duration of the course following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string
         */
        public Builder duration(JsonNullable<String> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * The categories associated with this content
         */
        public Builder categories(List<CreateCategoriesApiModel> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = JsonNullable.of(categories);
            return this;
        }

        /**
         * The categories associated with this content
         */
        public Builder categories(JsonNullable<? extends List<CreateCategoriesApiModel>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * The skills associated with this content
         */
        public Builder skills(List<CreateSkillsApiModel> skills) {
            Utils.checkNotNull(skills, "skills");
            this.skills = JsonNullable.of(skills);
            return this;
        }

        /**
         * The skills associated with this content
         */
        public Builder skills(JsonNullable<? extends List<CreateSkillsApiModel>> skills) {
            Utils.checkNotNull(skills, "skills");
            this.skills = skills;
            return this;
        }

        /**
         * The content associated with this course
         */
        public Builder content(List<CreateContentApiModel> content) {
            Utils.checkNotNull(content, "content");
            this.content = JsonNullable.of(content);
            return this;
        }

        /**
         * The content associated with this course
         */
        public Builder content(JsonNullable<? extends List<CreateContentApiModel>> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        /**
         * The localization data for this course
         */
        public Builder localizations(List<LocalizationModel> localizations) {
            Utils.checkNotNull(localizations, "localizations");
            this.localizations = JsonNullable.of(localizations);
            return this;
        }

        /**
         * The localization data for this course
         */
        public Builder localizations(JsonNullable<? extends List<LocalizationModel>> localizations) {
            Utils.checkNotNull(localizations, "localizations");
            this.localizations = localizations;
            return this;
        }
        
        public LmsUpsertCourseRequestDto build() {
            return new LmsUpsertCourseRequestDto(
                unifiedCustomFields,
                externalReference,
                title,
                description,
                languages,
                coverUrl,
                url,
                active,
                duration,
                categories,
                skills,
                content,
                localizations);
        }
    }
}

