/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TicketingReadTicketStatus
 * 
 * <p>Current status of the ticket
 */
public class TicketingReadTicketStatus {
    /**
     * The id of the ticket status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The type of this status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends TicketingReadTicketStatusType> type;

    /**
     * The name of the ticket status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonCreator
    public TicketingReadTicketStatus(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("type") JsonNullable<? extends TicketingReadTicketStatusType> type,
            @JsonProperty("name") JsonNullable<String> name) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(name, "name");
        this.id = id;
        this.type = type;
        this.name = name;
    }
    
    public TicketingReadTicketStatus() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The id of the ticket status.
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The type of this status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TicketingReadTicketStatusType> type() {
        return (JsonNullable<TicketingReadTicketStatusType>) type;
    }

    /**
     * The name of the ticket status.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The id of the ticket status.
     */
    public TicketingReadTicketStatus withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The id of the ticket status.
     */
    public TicketingReadTicketStatus withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The type of this status
     */
    public TicketingReadTicketStatus withType(TicketingReadTicketStatusType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of this status
     */
    public TicketingReadTicketStatus withType(JsonNullable<? extends TicketingReadTicketStatusType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The name of the ticket status.
     */
    public TicketingReadTicketStatus withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the ticket status.
     */
    public TicketingReadTicketStatus withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TicketingReadTicketStatus other = (TicketingReadTicketStatus) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TicketingReadTicketStatus.class,
                "id", id,
                "type", type,
                "name", name);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id = JsonNullable.undefined();

        private JsonNullable<? extends TicketingReadTicketStatusType> type = JsonNullable.undefined();

        private JsonNullable<String> name = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The id of the ticket status.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The id of the ticket status.
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The type of this status
         */
        public Builder type(TicketingReadTicketStatusType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of this status
         */
        public Builder type(JsonNullable<? extends TicketingReadTicketStatusType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The name of the ticket status.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the ticket status.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public TicketingReadTicketStatus build() {

            return new TicketingReadTicketStatus(
                id, type, name);
        }

    }
}
