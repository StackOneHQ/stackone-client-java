/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class LmsCreateAssignmentRequestDto {

    /**
     * Value to pass through to the provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passthrough")
    private JsonNullable<? extends Map<String, Object>> passthrough;

    /**
     * The external reference associated with this assignment
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_reference")
    @Deprecated
    private JsonNullable<String> externalReference;

    /**
     * The learning_object_id associated with this assignment. This is not required unless specified in an integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("learning_object_id")
    private JsonNullable<String> learningObjectId;

    /**
     * The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("learning_object_external_reference")
    private JsonNullable<String> learningObjectExternalReference;

    /**
     * The progress associated with this assigment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progress")
    private JsonNullable<Double> progress;

    /**
     * The date the assignment was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<String> createdAt;

    /**
     * The date the assignment is due to be completed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<String> dueDate;

    /**
     * The status of the assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends LmsCreateAssignmentRequestDtoStatus> status;

    @JsonCreator
    public LmsCreateAssignmentRequestDto(
            @JsonProperty("passthrough") JsonNullable<? extends Map<String, Object>> passthrough,
            @JsonProperty("external_reference") JsonNullable<String> externalReference,
            @JsonProperty("learning_object_id") JsonNullable<String> learningObjectId,
            @JsonProperty("learning_object_external_reference") JsonNullable<String> learningObjectExternalReference,
            @JsonProperty("progress") JsonNullable<Double> progress,
            @JsonProperty("created_at") JsonNullable<String> createdAt,
            @JsonProperty("due_date") JsonNullable<String> dueDate,
            @JsonProperty("status") JsonNullable<? extends LmsCreateAssignmentRequestDtoStatus> status) {
        Utils.checkNotNull(passthrough, "passthrough");
        Utils.checkNotNull(externalReference, "externalReference");
        Utils.checkNotNull(learningObjectId, "learningObjectId");
        Utils.checkNotNull(learningObjectExternalReference, "learningObjectExternalReference");
        Utils.checkNotNull(progress, "progress");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(status, "status");
        this.passthrough = passthrough;
        this.externalReference = externalReference;
        this.learningObjectId = learningObjectId;
        this.learningObjectExternalReference = learningObjectExternalReference;
        this.progress = progress;
        this.createdAt = createdAt;
        this.dueDate = dueDate;
        this.status = status;
    }
    
    public LmsCreateAssignmentRequestDto() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Value to pass through to the provider
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> passthrough() {
        return (JsonNullable<Map<String, Object>>) passthrough;
    }

    /**
     * The external reference associated with this assignment
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> externalReference() {
        return externalReference;
    }

    /**
     * The learning_object_id associated with this assignment. This is not required unless specified in an integration.
     */
    @JsonIgnore
    public JsonNullable<String> learningObjectId() {
        return learningObjectId;
    }

    /**
     * The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments.
     */
    @JsonIgnore
    public JsonNullable<String> learningObjectExternalReference() {
        return learningObjectExternalReference;
    }

    /**
     * The progress associated with this assigment
     */
    @JsonIgnore
    public JsonNullable<Double> progress() {
        return progress;
    }

    /**
     * The date the assignment was created
     */
    @JsonIgnore
    public JsonNullable<String> createdAt() {
        return createdAt;
    }

    /**
     * The date the assignment is due to be completed
     */
    @JsonIgnore
    public JsonNullable<String> dueDate() {
        return dueDate;
    }

    /**
     * The status of the assignment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<LmsCreateAssignmentRequestDtoStatus> status() {
        return (JsonNullable<LmsCreateAssignmentRequestDtoStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Value to pass through to the provider
     */
    public LmsCreateAssignmentRequestDto withPassthrough(Map<String, Object> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = JsonNullable.of(passthrough);
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public LmsCreateAssignmentRequestDto withPassthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = passthrough;
        return this;
    }

    /**
     * The external reference associated with this assignment
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public LmsCreateAssignmentRequestDto withExternalReference(String externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = JsonNullable.of(externalReference);
        return this;
    }

    /**
     * The external reference associated with this assignment
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public LmsCreateAssignmentRequestDto withExternalReference(JsonNullable<String> externalReference) {
        Utils.checkNotNull(externalReference, "externalReference");
        this.externalReference = externalReference;
        return this;
    }

    /**
     * The learning_object_id associated with this assignment. This is not required unless specified in an integration.
     */
    public LmsCreateAssignmentRequestDto withLearningObjectId(String learningObjectId) {
        Utils.checkNotNull(learningObjectId, "learningObjectId");
        this.learningObjectId = JsonNullable.of(learningObjectId);
        return this;
    }

    /**
     * The learning_object_id associated with this assignment. This is not required unless specified in an integration.
     */
    public LmsCreateAssignmentRequestDto withLearningObjectId(JsonNullable<String> learningObjectId) {
        Utils.checkNotNull(learningObjectId, "learningObjectId");
        this.learningObjectId = learningObjectId;
        return this;
    }

    /**
     * The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments.
     */
    public LmsCreateAssignmentRequestDto withLearningObjectExternalReference(String learningObjectExternalReference) {
        Utils.checkNotNull(learningObjectExternalReference, "learningObjectExternalReference");
        this.learningObjectExternalReference = JsonNullable.of(learningObjectExternalReference);
        return this;
    }

    /**
     * The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments.
     */
    public LmsCreateAssignmentRequestDto withLearningObjectExternalReference(JsonNullable<String> learningObjectExternalReference) {
        Utils.checkNotNull(learningObjectExternalReference, "learningObjectExternalReference");
        this.learningObjectExternalReference = learningObjectExternalReference;
        return this;
    }

    /**
     * The progress associated with this assigment
     */
    public LmsCreateAssignmentRequestDto withProgress(double progress) {
        Utils.checkNotNull(progress, "progress");
        this.progress = JsonNullable.of(progress);
        return this;
    }

    /**
     * The progress associated with this assigment
     */
    public LmsCreateAssignmentRequestDto withProgress(JsonNullable<Double> progress) {
        Utils.checkNotNull(progress, "progress");
        this.progress = progress;
        return this;
    }

    /**
     * The date the assignment was created
     */
    public LmsCreateAssignmentRequestDto withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date the assignment was created
     */
    public LmsCreateAssignmentRequestDto withCreatedAt(JsonNullable<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The date the assignment is due to be completed
     */
    public LmsCreateAssignmentRequestDto withDueDate(String dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }

    /**
     * The date the assignment is due to be completed
     */
    public LmsCreateAssignmentRequestDto withDueDate(JsonNullable<String> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * The status of the assignment
     */
    public LmsCreateAssignmentRequestDto withStatus(LmsCreateAssignmentRequestDtoStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The status of the assignment
     */
    public LmsCreateAssignmentRequestDto withStatus(JsonNullable<? extends LmsCreateAssignmentRequestDtoStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LmsCreateAssignmentRequestDto other = (LmsCreateAssignmentRequestDto) o;
        return 
            Objects.deepEquals(this.passthrough, other.passthrough) &&
            Objects.deepEquals(this.externalReference, other.externalReference) &&
            Objects.deepEquals(this.learningObjectId, other.learningObjectId) &&
            Objects.deepEquals(this.learningObjectExternalReference, other.learningObjectExternalReference) &&
            Objects.deepEquals(this.progress, other.progress) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.dueDate, other.dueDate) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            passthrough,
            externalReference,
            learningObjectId,
            learningObjectExternalReference,
            progress,
            createdAt,
            dueDate,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LmsCreateAssignmentRequestDto.class,
                "passthrough", passthrough,
                "externalReference", externalReference,
                "learningObjectId", learningObjectId,
                "learningObjectExternalReference", learningObjectExternalReference,
                "progress", progress,
                "createdAt", createdAt,
                "dueDate", dueDate,
                "status", status);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Map<String, Object>> passthrough = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> externalReference = JsonNullable.undefined();
 
        private JsonNullable<String> learningObjectId = JsonNullable.undefined();
 
        private JsonNullable<String> learningObjectExternalReference = JsonNullable.undefined();
 
        private JsonNullable<Double> progress = JsonNullable.undefined();
 
        private JsonNullable<String> createdAt = JsonNullable.undefined();
 
        private JsonNullable<String> dueDate = JsonNullable.undefined();
 
        private JsonNullable<? extends LmsCreateAssignmentRequestDtoStatus> status = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(Map<String, Object> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = JsonNullable.of(passthrough);
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = passthrough;
            return this;
        }

        /**
         * The external reference associated with this assignment
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder externalReference(String externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = JsonNullable.of(externalReference);
            return this;
        }

        /**
         * The external reference associated with this assignment
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder externalReference(JsonNullable<String> externalReference) {
            Utils.checkNotNull(externalReference, "externalReference");
            this.externalReference = externalReference;
            return this;
        }

        /**
         * The learning_object_id associated with this assignment. This is not required unless specified in an integration.
         */
        public Builder learningObjectId(String learningObjectId) {
            Utils.checkNotNull(learningObjectId, "learningObjectId");
            this.learningObjectId = JsonNullable.of(learningObjectId);
            return this;
        }

        /**
         * The learning_object_id associated with this assignment. This is not required unless specified in an integration.
         */
        public Builder learningObjectId(JsonNullable<String> learningObjectId) {
            Utils.checkNotNull(learningObjectId, "learningObjectId");
            this.learningObjectId = learningObjectId;
            return this;
        }

        /**
         * The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments.
         */
        public Builder learningObjectExternalReference(String learningObjectExternalReference) {
            Utils.checkNotNull(learningObjectExternalReference, "learningObjectExternalReference");
            this.learningObjectExternalReference = JsonNullable.of(learningObjectExternalReference);
            return this;
        }

        /**
         * The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments.
         */
        public Builder learningObjectExternalReference(JsonNullable<String> learningObjectExternalReference) {
            Utils.checkNotNull(learningObjectExternalReference, "learningObjectExternalReference");
            this.learningObjectExternalReference = learningObjectExternalReference;
            return this;
        }

        /**
         * The progress associated with this assigment
         */
        public Builder progress(double progress) {
            Utils.checkNotNull(progress, "progress");
            this.progress = JsonNullable.of(progress);
            return this;
        }

        /**
         * The progress associated with this assigment
         */
        public Builder progress(JsonNullable<Double> progress) {
            Utils.checkNotNull(progress, "progress");
            this.progress = progress;
            return this;
        }

        /**
         * The date the assignment was created
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date the assignment was created
         */
        public Builder createdAt(JsonNullable<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The date the assignment is due to be completed
         */
        public Builder dueDate(String dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * The date the assignment is due to be completed
         */
        public Builder dueDate(JsonNullable<String> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }

        /**
         * The status of the assignment
         */
        public Builder status(LmsCreateAssignmentRequestDtoStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The status of the assignment
         */
        public Builder status(JsonNullable<? extends LmsCreateAssignmentRequestDtoStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public LmsCreateAssignmentRequestDto build() {
            return new LmsCreateAssignmentRequestDto(
                passthrough,
                externalReference,
                learningObjectId,
                learningObjectExternalReference,
                progress,
                createdAt,
                dueDate,
                status);
        }
    }
}

