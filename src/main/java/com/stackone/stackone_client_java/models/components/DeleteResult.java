/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;

public class DeleteResult {

    @JsonProperty("statusCode")
    private double statusCode;

    @JsonProperty("message")
    private String message;

    @JsonProperty("timestamp")
    private OffsetDateTime timestamp;

    @JsonCreator
    public DeleteResult(
            @JsonProperty("statusCode") double statusCode,
            @JsonProperty("message") String message,
            @JsonProperty("timestamp") OffsetDateTime timestamp) {
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(timestamp, "timestamp");
        this.statusCode = statusCode;
        this.message = message;
        this.timestamp = timestamp;
    }

    @JsonIgnore
    public double statusCode() {
        return statusCode;
    }

    @JsonIgnore
    public String message() {
        return message;
    }

    @JsonIgnore
    public OffsetDateTime timestamp() {
        return timestamp;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DeleteResult withStatusCode(double statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    public DeleteResult withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public DeleteResult withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteResult other = (DeleteResult) o;
        return 
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.message, other.message) &&
            Utils.enhancedDeepEquals(this.timestamp, other.timestamp);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            statusCode,
            message,
            timestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteResult.class,
                "statusCode", statusCode,
                "message", message,
                "timestamp", timestamp);
    }
    
    public final static class Builder {
 
        private Double statusCode;
 
        private String message;
 
        private OffsetDateTime timestamp;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder statusCode(double statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }
        
        public DeleteResult build() {
            return new DeleteResult(
                statusCode,
                message,
                timestamp);
        }
    }
}
