/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class UnifiedLogs {
    /**
     * The request ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_id")
    private JsonNullable<String> requestId;

    /**
     * The event ISO8601 date string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_datetime")
    private JsonNullable<OffsetDateTime> eventDatetime;

    /**
     * The request start time ISO8601 date string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_time")
    private JsonNullable<OffsetDateTime> startTime;

    /**
     * The request end time ISO8601 date string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_time")
    private JsonNullable<OffsetDateTime> endTime;

    /**
     * The account ID of the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private JsonNullable<String> accountId;

    /**
     * The project ID of the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    private JsonNullable<String> projectId;

    /**
     * The requested HTTP method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_method")
    private JsonNullable<String> httpMethod;

    /**
     * The requested path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    private JsonNullable<String> path;

    /**
     * The requested URL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The requests response status code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<Double> status;

    /**
     * The request duration in milliseconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private JsonNullable<Double> duration;

    /**
     * The request success flag
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private JsonNullable<Boolean> success;

    /**
     * The requested provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private JsonNullable<String> provider;

    /**
     * The requested service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    private JsonNullable<String> service;

    /**
     * The requested resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private JsonNullable<String> resource;

    /**
     * The requested child resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_resource")
    private JsonNullable<String> childResource;

    /**
     * The requested sub resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_resource")
    private JsonNullable<String> subResource;

    /**
     * The requested action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private JsonNullable<String> action;

    /**
     * The asynchronous worker flag
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_worker")
    private JsonNullable<Boolean> isWorker;

    /**
     * The requests source type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_type")
    private JsonNullable<String> sourceType;

    /**
     * The requests source value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_value")
    private JsonNullable<String> sourceValue;

    /**
     * The requests source ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private JsonNullable<String> sourceId;

    /**
     * The advanced log request data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request")
    private JsonNullable<? extends Request> request;

    /**
     * The advanced log response data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response")
    private JsonNullable<? extends Response> response;

    /**
     * The list of provider requests
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("step_requests")
    private JsonNullable<? extends List<StepLog>> stepRequests;

    @JsonCreator
    public UnifiedLogs(
            @JsonProperty("request_id") JsonNullable<String> requestId,
            @JsonProperty("event_datetime") JsonNullable<OffsetDateTime> eventDatetime,
            @JsonProperty("start_time") JsonNullable<OffsetDateTime> startTime,
            @JsonProperty("end_time") JsonNullable<OffsetDateTime> endTime,
            @JsonProperty("account_id") JsonNullable<String> accountId,
            @JsonProperty("project_id") JsonNullable<String> projectId,
            @JsonProperty("http_method") JsonNullable<String> httpMethod,
            @JsonProperty("path") JsonNullable<String> path,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("status") JsonNullable<Double> status,
            @JsonProperty("duration") JsonNullable<Double> duration,
            @JsonProperty("success") JsonNullable<Boolean> success,
            @JsonProperty("provider") JsonNullable<String> provider,
            @JsonProperty("service") JsonNullable<String> service,
            @JsonProperty("resource") JsonNullable<String> resource,
            @JsonProperty("child_resource") JsonNullable<String> childResource,
            @JsonProperty("sub_resource") JsonNullable<String> subResource,
            @JsonProperty("action") JsonNullable<String> action,
            @JsonProperty("is_worker") JsonNullable<Boolean> isWorker,
            @JsonProperty("source_type") JsonNullable<String> sourceType,
            @JsonProperty("source_value") JsonNullable<String> sourceValue,
            @JsonProperty("source_id") JsonNullable<String> sourceId,
            @JsonProperty("request") JsonNullable<? extends Request> request,
            @JsonProperty("response") JsonNullable<? extends Response> response,
            @JsonProperty("step_requests") JsonNullable<? extends List<StepLog>> stepRequests) {
        Utils.checkNotNull(requestId, "requestId");
        Utils.checkNotNull(eventDatetime, "eventDatetime");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(httpMethod, "httpMethod");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(service, "service");
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(childResource, "childResource");
        Utils.checkNotNull(subResource, "subResource");
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(isWorker, "isWorker");
        Utils.checkNotNull(sourceType, "sourceType");
        Utils.checkNotNull(sourceValue, "sourceValue");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(request, "request");
        Utils.checkNotNull(response, "response");
        Utils.checkNotNull(stepRequests, "stepRequests");
        this.requestId = requestId;
        this.eventDatetime = eventDatetime;
        this.startTime = startTime;
        this.endTime = endTime;
        this.accountId = accountId;
        this.projectId = projectId;
        this.httpMethod = httpMethod;
        this.path = path;
        this.url = url;
        this.status = status;
        this.duration = duration;
        this.success = success;
        this.provider = provider;
        this.service = service;
        this.resource = resource;
        this.childResource = childResource;
        this.subResource = subResource;
        this.action = action;
        this.isWorker = isWorker;
        this.sourceType = sourceType;
        this.sourceValue = sourceValue;
        this.sourceId = sourceId;
        this.request = request;
        this.response = response;
        this.stepRequests = stepRequests;
    }
    
    public UnifiedLogs() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The request ID
     */
    @JsonIgnore
    public JsonNullable<String> requestId() {
        return requestId;
    }

    /**
     * The event ISO8601 date string
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> eventDatetime() {
        return eventDatetime;
    }

    /**
     * The request start time ISO8601 date string
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startTime() {
        return startTime;
    }

    /**
     * The request end time ISO8601 date string
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> endTime() {
        return endTime;
    }

    /**
     * The account ID of the request
     */
    @JsonIgnore
    public JsonNullable<String> accountId() {
        return accountId;
    }

    /**
     * The project ID of the request
     */
    @JsonIgnore
    public JsonNullable<String> projectId() {
        return projectId;
    }

    /**
     * The requested HTTP method
     */
    @JsonIgnore
    public JsonNullable<String> httpMethod() {
        return httpMethod;
    }

    /**
     * The requested path
     */
    @JsonIgnore
    public JsonNullable<String> path() {
        return path;
    }

    /**
     * The requested URL
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * The requests response status code
     */
    @JsonIgnore
    public JsonNullable<Double> status() {
        return status;
    }

    /**
     * The request duration in milliseconds
     */
    @JsonIgnore
    public JsonNullable<Double> duration() {
        return duration;
    }

    /**
     * The request success flag
     */
    @JsonIgnore
    public JsonNullable<Boolean> success() {
        return success;
    }

    /**
     * The requested provider
     */
    @JsonIgnore
    public JsonNullable<String> provider() {
        return provider;
    }

    /**
     * The requested service
     */
    @JsonIgnore
    public JsonNullable<String> service() {
        return service;
    }

    /**
     * The requested resource
     */
    @JsonIgnore
    public JsonNullable<String> resource() {
        return resource;
    }

    /**
     * The requested child resource
     */
    @JsonIgnore
    public JsonNullable<String> childResource() {
        return childResource;
    }

    /**
     * The requested sub resource
     */
    @JsonIgnore
    public JsonNullable<String> subResource() {
        return subResource;
    }

    /**
     * The requested action
     */
    @JsonIgnore
    public JsonNullable<String> action() {
        return action;
    }

    /**
     * The asynchronous worker flag
     */
    @JsonIgnore
    public JsonNullable<Boolean> isWorker() {
        return isWorker;
    }

    /**
     * The requests source type
     */
    @JsonIgnore
    public JsonNullable<String> sourceType() {
        return sourceType;
    }

    /**
     * The requests source value
     */
    @JsonIgnore
    public JsonNullable<String> sourceValue() {
        return sourceValue;
    }

    /**
     * The requests source ID
     */
    @JsonIgnore
    public JsonNullable<String> sourceId() {
        return sourceId;
    }

    /**
     * The advanced log request data
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Request> request() {
        return (JsonNullable<Request>) request;
    }

    /**
     * The advanced log response data
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Response> response() {
        return (JsonNullable<Response>) response;
    }

    /**
     * The list of provider requests
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<StepLog>> stepRequests() {
        return (JsonNullable<List<StepLog>>) stepRequests;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The request ID
     */
    public UnifiedLogs withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = JsonNullable.of(requestId);
        return this;
    }

    /**
     * The request ID
     */
    public UnifiedLogs withRequestId(JsonNullable<String> requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }

    /**
     * The event ISO8601 date string
     */
    public UnifiedLogs withEventDatetime(OffsetDateTime eventDatetime) {
        Utils.checkNotNull(eventDatetime, "eventDatetime");
        this.eventDatetime = JsonNullable.of(eventDatetime);
        return this;
    }

    /**
     * The event ISO8601 date string
     */
    public UnifiedLogs withEventDatetime(JsonNullable<OffsetDateTime> eventDatetime) {
        Utils.checkNotNull(eventDatetime, "eventDatetime");
        this.eventDatetime = eventDatetime;
        return this;
    }

    /**
     * The request start time ISO8601 date string
     */
    public UnifiedLogs withStartTime(OffsetDateTime startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = JsonNullable.of(startTime);
        return this;
    }

    /**
     * The request start time ISO8601 date string
     */
    public UnifiedLogs withStartTime(JsonNullable<OffsetDateTime> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * The request end time ISO8601 date string
     */
    public UnifiedLogs withEndTime(OffsetDateTime endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = JsonNullable.of(endTime);
        return this;
    }

    /**
     * The request end time ISO8601 date string
     */
    public UnifiedLogs withEndTime(JsonNullable<OffsetDateTime> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    /**
     * The account ID of the request
     */
    public UnifiedLogs withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = JsonNullable.of(accountId);
        return this;
    }

    /**
     * The account ID of the request
     */
    public UnifiedLogs withAccountId(JsonNullable<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The project ID of the request
     */
    public UnifiedLogs withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = JsonNullable.of(projectId);
        return this;
    }

    /**
     * The project ID of the request
     */
    public UnifiedLogs withProjectId(JsonNullable<String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * The requested HTTP method
     */
    public UnifiedLogs withHttpMethod(String httpMethod) {
        Utils.checkNotNull(httpMethod, "httpMethod");
        this.httpMethod = JsonNullable.of(httpMethod);
        return this;
    }

    /**
     * The requested HTTP method
     */
    public UnifiedLogs withHttpMethod(JsonNullable<String> httpMethod) {
        Utils.checkNotNull(httpMethod, "httpMethod");
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * The requested path
     */
    public UnifiedLogs withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = JsonNullable.of(path);
        return this;
    }

    /**
     * The requested path
     */
    public UnifiedLogs withPath(JsonNullable<String> path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * The requested URL
     */
    public UnifiedLogs withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The requested URL
     */
    public UnifiedLogs withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The requests response status code
     */
    public UnifiedLogs withStatus(double status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The requests response status code
     */
    public UnifiedLogs withStatus(JsonNullable<Double> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The request duration in milliseconds
     */
    public UnifiedLogs withDuration(double duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = JsonNullable.of(duration);
        return this;
    }

    /**
     * The request duration in milliseconds
     */
    public UnifiedLogs withDuration(JsonNullable<Double> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * The request success flag
     */
    public UnifiedLogs withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = JsonNullable.of(success);
        return this;
    }

    /**
     * The request success flag
     */
    public UnifiedLogs withSuccess(JsonNullable<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * The requested provider
     */
    public UnifiedLogs withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = JsonNullable.of(provider);
        return this;
    }

    /**
     * The requested provider
     */
    public UnifiedLogs withProvider(JsonNullable<String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * The requested service
     */
    public UnifiedLogs withService(String service) {
        Utils.checkNotNull(service, "service");
        this.service = JsonNullable.of(service);
        return this;
    }

    /**
     * The requested service
     */
    public UnifiedLogs withService(JsonNullable<String> service) {
        Utils.checkNotNull(service, "service");
        this.service = service;
        return this;
    }

    /**
     * The requested resource
     */
    public UnifiedLogs withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = JsonNullable.of(resource);
        return this;
    }

    /**
     * The requested resource
     */
    public UnifiedLogs withResource(JsonNullable<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The requested child resource
     */
    public UnifiedLogs withChildResource(String childResource) {
        Utils.checkNotNull(childResource, "childResource");
        this.childResource = JsonNullable.of(childResource);
        return this;
    }

    /**
     * The requested child resource
     */
    public UnifiedLogs withChildResource(JsonNullable<String> childResource) {
        Utils.checkNotNull(childResource, "childResource");
        this.childResource = childResource;
        return this;
    }

    /**
     * The requested sub resource
     */
    public UnifiedLogs withSubResource(String subResource) {
        Utils.checkNotNull(subResource, "subResource");
        this.subResource = JsonNullable.of(subResource);
        return this;
    }

    /**
     * The requested sub resource
     */
    public UnifiedLogs withSubResource(JsonNullable<String> subResource) {
        Utils.checkNotNull(subResource, "subResource");
        this.subResource = subResource;
        return this;
    }

    /**
     * The requested action
     */
    public UnifiedLogs withAction(String action) {
        Utils.checkNotNull(action, "action");
        this.action = JsonNullable.of(action);
        return this;
    }

    /**
     * The requested action
     */
    public UnifiedLogs withAction(JsonNullable<String> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    /**
     * The asynchronous worker flag
     */
    public UnifiedLogs withIsWorker(boolean isWorker) {
        Utils.checkNotNull(isWorker, "isWorker");
        this.isWorker = JsonNullable.of(isWorker);
        return this;
    }

    /**
     * The asynchronous worker flag
     */
    public UnifiedLogs withIsWorker(JsonNullable<Boolean> isWorker) {
        Utils.checkNotNull(isWorker, "isWorker");
        this.isWorker = isWorker;
        return this;
    }

    /**
     * The requests source type
     */
    public UnifiedLogs withSourceType(String sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = JsonNullable.of(sourceType);
        return this;
    }

    /**
     * The requests source type
     */
    public UnifiedLogs withSourceType(JsonNullable<String> sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    /**
     * The requests source value
     */
    public UnifiedLogs withSourceValue(String sourceValue) {
        Utils.checkNotNull(sourceValue, "sourceValue");
        this.sourceValue = JsonNullable.of(sourceValue);
        return this;
    }

    /**
     * The requests source value
     */
    public UnifiedLogs withSourceValue(JsonNullable<String> sourceValue) {
        Utils.checkNotNull(sourceValue, "sourceValue");
        this.sourceValue = sourceValue;
        return this;
    }

    /**
     * The requests source ID
     */
    public UnifiedLogs withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = JsonNullable.of(sourceId);
        return this;
    }

    /**
     * The requests source ID
     */
    public UnifiedLogs withSourceId(JsonNullable<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    /**
     * The advanced log request data
     */
    public UnifiedLogs withRequest(Request request) {
        Utils.checkNotNull(request, "request");
        this.request = JsonNullable.of(request);
        return this;
    }

    /**
     * The advanced log request data
     */
    public UnifiedLogs withRequest(JsonNullable<? extends Request> request) {
        Utils.checkNotNull(request, "request");
        this.request = request;
        return this;
    }

    /**
     * The advanced log response data
     */
    public UnifiedLogs withResponse(Response response) {
        Utils.checkNotNull(response, "response");
        this.response = JsonNullable.of(response);
        return this;
    }

    /**
     * The advanced log response data
     */
    public UnifiedLogs withResponse(JsonNullable<? extends Response> response) {
        Utils.checkNotNull(response, "response");
        this.response = response;
        return this;
    }

    /**
     * The list of provider requests
     */
    public UnifiedLogs withStepRequests(List<StepLog> stepRequests) {
        Utils.checkNotNull(stepRequests, "stepRequests");
        this.stepRequests = JsonNullable.of(stepRequests);
        return this;
    }

    /**
     * The list of provider requests
     */
    public UnifiedLogs withStepRequests(JsonNullable<? extends List<StepLog>> stepRequests) {
        Utils.checkNotNull(stepRequests, "stepRequests");
        this.stepRequests = stepRequests;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedLogs other = (UnifiedLogs) o;
        return 
            Utils.enhancedDeepEquals(this.requestId, other.requestId) &&
            Utils.enhancedDeepEquals(this.eventDatetime, other.eventDatetime) &&
            Utils.enhancedDeepEquals(this.startTime, other.startTime) &&
            Utils.enhancedDeepEquals(this.endTime, other.endTime) &&
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.projectId, other.projectId) &&
            Utils.enhancedDeepEquals(this.httpMethod, other.httpMethod) &&
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.duration, other.duration) &&
            Utils.enhancedDeepEquals(this.success, other.success) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.service, other.service) &&
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.childResource, other.childResource) &&
            Utils.enhancedDeepEquals(this.subResource, other.subResource) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.isWorker, other.isWorker) &&
            Utils.enhancedDeepEquals(this.sourceType, other.sourceType) &&
            Utils.enhancedDeepEquals(this.sourceValue, other.sourceValue) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.request, other.request) &&
            Utils.enhancedDeepEquals(this.response, other.response) &&
            Utils.enhancedDeepEquals(this.stepRequests, other.stepRequests);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            requestId, eventDatetime, startTime,
            endTime, accountId, projectId,
            httpMethod, path, url,
            status, duration, success,
            provider, service, resource,
            childResource, subResource, action,
            isWorker, sourceType, sourceValue,
            sourceId, request, response,
            stepRequests);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnifiedLogs.class,
                "requestId", requestId,
                "eventDatetime", eventDatetime,
                "startTime", startTime,
                "endTime", endTime,
                "accountId", accountId,
                "projectId", projectId,
                "httpMethod", httpMethod,
                "path", path,
                "url", url,
                "status", status,
                "duration", duration,
                "success", success,
                "provider", provider,
                "service", service,
                "resource", resource,
                "childResource", childResource,
                "subResource", subResource,
                "action", action,
                "isWorker", isWorker,
                "sourceType", sourceType,
                "sourceValue", sourceValue,
                "sourceId", sourceId,
                "request", request,
                "response", response,
                "stepRequests", stepRequests);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> requestId = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> eventDatetime = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> startTime = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> endTime = JsonNullable.undefined();

        private JsonNullable<String> accountId = JsonNullable.undefined();

        private JsonNullable<String> projectId = JsonNullable.undefined();

        private JsonNullable<String> httpMethod = JsonNullable.undefined();

        private JsonNullable<String> path = JsonNullable.undefined();

        private JsonNullable<String> url = JsonNullable.undefined();

        private JsonNullable<Double> status = JsonNullable.undefined();

        private JsonNullable<Double> duration = JsonNullable.undefined();

        private JsonNullable<Boolean> success = JsonNullable.undefined();

        private JsonNullable<String> provider = JsonNullable.undefined();

        private JsonNullable<String> service = JsonNullable.undefined();

        private JsonNullable<String> resource = JsonNullable.undefined();

        private JsonNullable<String> childResource = JsonNullable.undefined();

        private JsonNullable<String> subResource = JsonNullable.undefined();

        private JsonNullable<String> action = JsonNullable.undefined();

        private JsonNullable<Boolean> isWorker = JsonNullable.undefined();

        private JsonNullable<String> sourceType = JsonNullable.undefined();

        private JsonNullable<String> sourceValue = JsonNullable.undefined();

        private JsonNullable<String> sourceId = JsonNullable.undefined();

        private JsonNullable<? extends Request> request = JsonNullable.undefined();

        private JsonNullable<? extends Response> response = JsonNullable.undefined();

        private JsonNullable<? extends List<StepLog>> stepRequests = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The request ID
         */
        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = JsonNullable.of(requestId);
            return this;
        }

        /**
         * The request ID
         */
        public Builder requestId(JsonNullable<String> requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }


        /**
         * The event ISO8601 date string
         */
        public Builder eventDatetime(OffsetDateTime eventDatetime) {
            Utils.checkNotNull(eventDatetime, "eventDatetime");
            this.eventDatetime = JsonNullable.of(eventDatetime);
            return this;
        }

        /**
         * The event ISO8601 date string
         */
        public Builder eventDatetime(JsonNullable<OffsetDateTime> eventDatetime) {
            Utils.checkNotNull(eventDatetime, "eventDatetime");
            this.eventDatetime = eventDatetime;
            return this;
        }


        /**
         * The request start time ISO8601 date string
         */
        public Builder startTime(OffsetDateTime startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = JsonNullable.of(startTime);
            return this;
        }

        /**
         * The request start time ISO8601 date string
         */
        public Builder startTime(JsonNullable<OffsetDateTime> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }


        /**
         * The request end time ISO8601 date string
         */
        public Builder endTime(OffsetDateTime endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = JsonNullable.of(endTime);
            return this;
        }

        /**
         * The request end time ISO8601 date string
         */
        public Builder endTime(JsonNullable<OffsetDateTime> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }


        /**
         * The account ID of the request
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = JsonNullable.of(accountId);
            return this;
        }

        /**
         * The account ID of the request
         */
        public Builder accountId(JsonNullable<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * The project ID of the request
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = JsonNullable.of(projectId);
            return this;
        }

        /**
         * The project ID of the request
         */
        public Builder projectId(JsonNullable<String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }


        /**
         * The requested HTTP method
         */
        public Builder httpMethod(String httpMethod) {
            Utils.checkNotNull(httpMethod, "httpMethod");
            this.httpMethod = JsonNullable.of(httpMethod);
            return this;
        }

        /**
         * The requested HTTP method
         */
        public Builder httpMethod(JsonNullable<String> httpMethod) {
            Utils.checkNotNull(httpMethod, "httpMethod");
            this.httpMethod = httpMethod;
            return this;
        }


        /**
         * The requested path
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = JsonNullable.of(path);
            return this;
        }

        /**
         * The requested path
         */
        public Builder path(JsonNullable<String> path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }


        /**
         * The requested URL
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The requested URL
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The requests response status code
         */
        public Builder status(double status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The requests response status code
         */
        public Builder status(JsonNullable<Double> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The request duration in milliseconds
         */
        public Builder duration(double duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = JsonNullable.of(duration);
            return this;
        }

        /**
         * The request duration in milliseconds
         */
        public Builder duration(JsonNullable<Double> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }


        /**
         * The request success flag
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = JsonNullable.of(success);
            return this;
        }

        /**
         * The request success flag
         */
        public Builder success(JsonNullable<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }


        /**
         * The requested provider
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = JsonNullable.of(provider);
            return this;
        }

        /**
         * The requested provider
         */
        public Builder provider(JsonNullable<String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        /**
         * The requested service
         */
        public Builder service(String service) {
            Utils.checkNotNull(service, "service");
            this.service = JsonNullable.of(service);
            return this;
        }

        /**
         * The requested service
         */
        public Builder service(JsonNullable<String> service) {
            Utils.checkNotNull(service, "service");
            this.service = service;
            return this;
        }


        /**
         * The requested resource
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = JsonNullable.of(resource);
            return this;
        }

        /**
         * The requested resource
         */
        public Builder resource(JsonNullable<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The requested child resource
         */
        public Builder childResource(String childResource) {
            Utils.checkNotNull(childResource, "childResource");
            this.childResource = JsonNullable.of(childResource);
            return this;
        }

        /**
         * The requested child resource
         */
        public Builder childResource(JsonNullable<String> childResource) {
            Utils.checkNotNull(childResource, "childResource");
            this.childResource = childResource;
            return this;
        }


        /**
         * The requested sub resource
         */
        public Builder subResource(String subResource) {
            Utils.checkNotNull(subResource, "subResource");
            this.subResource = JsonNullable.of(subResource);
            return this;
        }

        /**
         * The requested sub resource
         */
        public Builder subResource(JsonNullable<String> subResource) {
            Utils.checkNotNull(subResource, "subResource");
            this.subResource = subResource;
            return this;
        }


        /**
         * The requested action
         */
        public Builder action(String action) {
            Utils.checkNotNull(action, "action");
            this.action = JsonNullable.of(action);
            return this;
        }

        /**
         * The requested action
         */
        public Builder action(JsonNullable<String> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }


        /**
         * The asynchronous worker flag
         */
        public Builder isWorker(boolean isWorker) {
            Utils.checkNotNull(isWorker, "isWorker");
            this.isWorker = JsonNullable.of(isWorker);
            return this;
        }

        /**
         * The asynchronous worker flag
         */
        public Builder isWorker(JsonNullable<Boolean> isWorker) {
            Utils.checkNotNull(isWorker, "isWorker");
            this.isWorker = isWorker;
            return this;
        }


        /**
         * The requests source type
         */
        public Builder sourceType(String sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = JsonNullable.of(sourceType);
            return this;
        }

        /**
         * The requests source type
         */
        public Builder sourceType(JsonNullable<String> sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }


        /**
         * The requests source value
         */
        public Builder sourceValue(String sourceValue) {
            Utils.checkNotNull(sourceValue, "sourceValue");
            this.sourceValue = JsonNullable.of(sourceValue);
            return this;
        }

        /**
         * The requests source value
         */
        public Builder sourceValue(JsonNullable<String> sourceValue) {
            Utils.checkNotNull(sourceValue, "sourceValue");
            this.sourceValue = sourceValue;
            return this;
        }


        /**
         * The requests source ID
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = JsonNullable.of(sourceId);
            return this;
        }

        /**
         * The requests source ID
         */
        public Builder sourceId(JsonNullable<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }


        /**
         * The advanced log request data
         */
        public Builder request(Request request) {
            Utils.checkNotNull(request, "request");
            this.request = JsonNullable.of(request);
            return this;
        }

        /**
         * The advanced log request data
         */
        public Builder request(JsonNullable<? extends Request> request) {
            Utils.checkNotNull(request, "request");
            this.request = request;
            return this;
        }


        /**
         * The advanced log response data
         */
        public Builder response(Response response) {
            Utils.checkNotNull(response, "response");
            this.response = JsonNullable.of(response);
            return this;
        }

        /**
         * The advanced log response data
         */
        public Builder response(JsonNullable<? extends Response> response) {
            Utils.checkNotNull(response, "response");
            this.response = response;
            return this;
        }


        /**
         * The list of provider requests
         */
        public Builder stepRequests(List<StepLog> stepRequests) {
            Utils.checkNotNull(stepRequests, "stepRequests");
            this.stepRequests = JsonNullable.of(stepRequests);
            return this;
        }

        /**
         * The list of provider requests
         */
        public Builder stepRequests(JsonNullable<? extends List<StepLog>> stepRequests) {
            Utils.checkNotNull(stepRequests, "stepRequests");
            this.stepRequests = stepRequests;
            return this;
        }

        public UnifiedLogs build() {

            return new UnifiedLogs(
                requestId, eventDatetime, startTime,
                endTime, accountId, projectId,
                httpMethod, path, url,
                status, duration, success,
                provider, service, resource,
                childResource, subResource, action,
                isWorker, sourceType, sourceValue,
                sourceId, request, response,
                stepRequests);
        }

    }
}
