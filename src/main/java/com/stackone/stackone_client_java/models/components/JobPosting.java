/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

public class JobPosting {

    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Provider's unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_id")
    private JsonNullable<String> remoteId;

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_custom_fields")
    private JsonNullable<? extends Map<String, Object>> unifiedCustomFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    private JsonNullable<? extends List<JobPostingLocation>> locations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal")
    private JsonNullable<? extends Internal> internal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends JobPostingStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    private JsonNullable<String> jobId;

    /**
     * Provider's unique identifier of the job posting
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_job_posting_id")
    private JsonNullable<String> remoteJobPostingId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private JsonNullable<? extends JobPostingContent> content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensation")
    private JsonNullable<? extends List<JobPostingCompensation>> compensation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_type")
    private JsonNullable<? extends JobPostingEmploymentType> employmentType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_contract_type")
    private JsonNullable<? extends JobPostingEmploymentContractType> employmentContractType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_url")
    private JsonNullable<String> externalUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_apply_url")
    private JsonNullable<String> externalApplyUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("questionnaires")
    private JsonNullable<? extends List<JobPostingQuestionnaire>> questionnaires;

    /**
     * The posting start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<OffsetDateTime> startDate;

    /**
     * Date of creation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * Date of last update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public JobPosting(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("remote_id") JsonNullable<String> remoteId,
            @JsonProperty("unified_custom_fields") JsonNullable<? extends Map<String, Object>> unifiedCustomFields,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("locations") JsonNullable<? extends List<JobPostingLocation>> locations,
            @JsonProperty("internal") JsonNullable<? extends Internal> internal,
            @JsonProperty("status") JsonNullable<? extends JobPostingStatus> status,
            @JsonProperty("job_id") JsonNullable<String> jobId,
            @JsonProperty("remote_job_posting_id") JsonNullable<String> remoteJobPostingId,
            @JsonProperty("content") JsonNullable<? extends JobPostingContent> content,
            @JsonProperty("compensation") JsonNullable<? extends List<JobPostingCompensation>> compensation,
            @JsonProperty("employment_type") JsonNullable<? extends JobPostingEmploymentType> employmentType,
            @JsonProperty("employment_contract_type") JsonNullable<? extends JobPostingEmploymentContractType> employmentContractType,
            @JsonProperty("external_url") JsonNullable<String> externalUrl,
            @JsonProperty("external_apply_url") JsonNullable<String> externalApplyUrl,
            @JsonProperty("questionnaires") JsonNullable<? extends List<JobPostingQuestionnaire>> questionnaires,
            @JsonProperty("start_date") JsonNullable<OffsetDateTime> startDate,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(remoteId, "remoteId");
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(locations, "locations");
        Utils.checkNotNull(internal, "internal");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(remoteJobPostingId, "remoteJobPostingId");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(compensation, "compensation");
        Utils.checkNotNull(employmentType, "employmentType");
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        Utils.checkNotNull(externalUrl, "externalUrl");
        Utils.checkNotNull(externalApplyUrl, "externalApplyUrl");
        Utils.checkNotNull(questionnaires, "questionnaires");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.remoteId = remoteId;
        this.unifiedCustomFields = unifiedCustomFields;
        this.title = title;
        this.locations = locations;
        this.internal = internal;
        this.status = status;
        this.jobId = jobId;
        this.remoteJobPostingId = remoteJobPostingId;
        this.content = content;
        this.compensation = compensation;
        this.employmentType = employmentType;
        this.employmentContractType = employmentContractType;
        this.externalUrl = externalUrl;
        this.externalApplyUrl = externalApplyUrl;
        this.questionnaires = questionnaires;
        this.startDate = startDate;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public JobPosting() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Provider's unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> remoteId() {
        return remoteId;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> unifiedCustomFields() {
        return (JsonNullable<Map<String, Object>>) unifiedCustomFields;
    }

    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<JobPostingLocation>> locations() {
        return (JsonNullable<List<JobPostingLocation>>) locations;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Internal> internal() {
        return (JsonNullable<Internal>) internal;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobPostingStatus> status() {
        return (JsonNullable<JobPostingStatus>) status;
    }

    @JsonIgnore
    public JsonNullable<String> jobId() {
        return jobId;
    }

    /**
     * Provider's unique identifier of the job posting
     */
    @JsonIgnore
    public JsonNullable<String> remoteJobPostingId() {
        return remoteJobPostingId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobPostingContent> content() {
        return (JsonNullable<JobPostingContent>) content;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<JobPostingCompensation>> compensation() {
        return (JsonNullable<List<JobPostingCompensation>>) compensation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobPostingEmploymentType> employmentType() {
        return (JsonNullable<JobPostingEmploymentType>) employmentType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobPostingEmploymentContractType> employmentContractType() {
        return (JsonNullable<JobPostingEmploymentContractType>) employmentContractType;
    }

    @JsonIgnore
    public JsonNullable<String> externalUrl() {
        return externalUrl;
    }

    @JsonIgnore
    public JsonNullable<String> externalApplyUrl() {
        return externalApplyUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<JobPostingQuestionnaire>> questionnaires() {
        return (JsonNullable<List<JobPostingQuestionnaire>>) questionnaires;
    }

    /**
     * The posting start date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * Date of creation
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Date of last update
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier
     */
    public JobPosting withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public JobPosting withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public JobPosting withRemoteId(String remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = JsonNullable.of(remoteId);
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public JobPosting withRemoteId(JsonNullable<String> remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = remoteId;
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public JobPosting withUnifiedCustomFields(Map<String, Object> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public JobPosting withUnifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = unifiedCustomFields;
        return this;
    }

    public JobPosting withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    public JobPosting withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public JobPosting withLocations(List<JobPostingLocation> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = JsonNullable.of(locations);
        return this;
    }

    public JobPosting withLocations(JsonNullable<? extends List<JobPostingLocation>> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = locations;
        return this;
    }

    public JobPosting withInternal(Internal internal) {
        Utils.checkNotNull(internal, "internal");
        this.internal = JsonNullable.of(internal);
        return this;
    }

    public JobPosting withInternal(JsonNullable<? extends Internal> internal) {
        Utils.checkNotNull(internal, "internal");
        this.internal = internal;
        return this;
    }

    public JobPosting withStatus(JobPostingStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    public JobPosting withStatus(JsonNullable<? extends JobPostingStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public JobPosting withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = JsonNullable.of(jobId);
        return this;
    }

    public JobPosting withJobId(JsonNullable<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    /**
     * Provider's unique identifier of the job posting
     */
    public JobPosting withRemoteJobPostingId(String remoteJobPostingId) {
        Utils.checkNotNull(remoteJobPostingId, "remoteJobPostingId");
        this.remoteJobPostingId = JsonNullable.of(remoteJobPostingId);
        return this;
    }

    /**
     * Provider's unique identifier of the job posting
     */
    public JobPosting withRemoteJobPostingId(JsonNullable<String> remoteJobPostingId) {
        Utils.checkNotNull(remoteJobPostingId, "remoteJobPostingId");
        this.remoteJobPostingId = remoteJobPostingId;
        return this;
    }

    public JobPosting withContent(JobPostingContent content) {
        Utils.checkNotNull(content, "content");
        this.content = JsonNullable.of(content);
        return this;
    }

    public JobPosting withContent(JsonNullable<? extends JobPostingContent> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public JobPosting withCompensation(List<JobPostingCompensation> compensation) {
        Utils.checkNotNull(compensation, "compensation");
        this.compensation = JsonNullable.of(compensation);
        return this;
    }

    public JobPosting withCompensation(JsonNullable<? extends List<JobPostingCompensation>> compensation) {
        Utils.checkNotNull(compensation, "compensation");
        this.compensation = compensation;
        return this;
    }

    public JobPosting withEmploymentType(JobPostingEmploymentType employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = JsonNullable.of(employmentType);
        return this;
    }

    public JobPosting withEmploymentType(JsonNullable<? extends JobPostingEmploymentType> employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = employmentType;
        return this;
    }

    public JobPosting withEmploymentContractType(JobPostingEmploymentContractType employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = JsonNullable.of(employmentContractType);
        return this;
    }

    public JobPosting withEmploymentContractType(JsonNullable<? extends JobPostingEmploymentContractType> employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = employmentContractType;
        return this;
    }

    public JobPosting withExternalUrl(String externalUrl) {
        Utils.checkNotNull(externalUrl, "externalUrl");
        this.externalUrl = JsonNullable.of(externalUrl);
        return this;
    }

    public JobPosting withExternalUrl(JsonNullable<String> externalUrl) {
        Utils.checkNotNull(externalUrl, "externalUrl");
        this.externalUrl = externalUrl;
        return this;
    }

    public JobPosting withExternalApplyUrl(String externalApplyUrl) {
        Utils.checkNotNull(externalApplyUrl, "externalApplyUrl");
        this.externalApplyUrl = JsonNullable.of(externalApplyUrl);
        return this;
    }

    public JobPosting withExternalApplyUrl(JsonNullable<String> externalApplyUrl) {
        Utils.checkNotNull(externalApplyUrl, "externalApplyUrl");
        this.externalApplyUrl = externalApplyUrl;
        return this;
    }

    public JobPosting withQuestionnaires(List<JobPostingQuestionnaire> questionnaires) {
        Utils.checkNotNull(questionnaires, "questionnaires");
        this.questionnaires = JsonNullable.of(questionnaires);
        return this;
    }

    public JobPosting withQuestionnaires(JsonNullable<? extends List<JobPostingQuestionnaire>> questionnaires) {
        Utils.checkNotNull(questionnaires, "questionnaires");
        this.questionnaires = questionnaires;
        return this;
    }

    /**
     * The posting start date
     */
    public JobPosting withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * The posting start date
     */
    public JobPosting withStartDate(JsonNullable<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Date of creation
     */
    public JobPosting withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * Date of creation
     */
    public JobPosting withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Date of last update
     */
    public JobPosting withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * Date of last update
     */
    public JobPosting withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobPosting other = (JobPosting) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.remoteId, other.remoteId) &&
            Utils.enhancedDeepEquals(this.unifiedCustomFields, other.unifiedCustomFields) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.locations, other.locations) &&
            Utils.enhancedDeepEquals(this.internal, other.internal) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.jobId, other.jobId) &&
            Utils.enhancedDeepEquals(this.remoteJobPostingId, other.remoteJobPostingId) &&
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.compensation, other.compensation) &&
            Utils.enhancedDeepEquals(this.employmentType, other.employmentType) &&
            Utils.enhancedDeepEquals(this.employmentContractType, other.employmentContractType) &&
            Utils.enhancedDeepEquals(this.externalUrl, other.externalUrl) &&
            Utils.enhancedDeepEquals(this.externalApplyUrl, other.externalApplyUrl) &&
            Utils.enhancedDeepEquals(this.questionnaires, other.questionnaires) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            remoteId,
            unifiedCustomFields,
            title,
            locations,
            internal,
            status,
            jobId,
            remoteJobPostingId,
            content,
            compensation,
            employmentType,
            employmentContractType,
            externalUrl,
            externalApplyUrl,
            questionnaires,
            startDate,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JobPosting.class,
                "id", id,
                "remoteId", remoteId,
                "unifiedCustomFields", unifiedCustomFields,
                "title", title,
                "locations", locations,
                "internal", internal,
                "status", status,
                "jobId", jobId,
                "remoteJobPostingId", remoteJobPostingId,
                "content", content,
                "compensation", compensation,
                "employmentType", employmentType,
                "employmentContractType", employmentContractType,
                "externalUrl", externalUrl,
                "externalApplyUrl", externalApplyUrl,
                "questionnaires", questionnaires,
                "startDate", startDate,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> remoteId = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> unifiedCustomFields = JsonNullable.undefined();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<? extends List<JobPostingLocation>> locations = JsonNullable.undefined();
 
        private JsonNullable<? extends Internal> internal = JsonNullable.undefined();
 
        private JsonNullable<? extends JobPostingStatus> status = JsonNullable.undefined();
 
        private JsonNullable<String> jobId = JsonNullable.undefined();
 
        private JsonNullable<String> remoteJobPostingId = JsonNullable.undefined();
 
        private JsonNullable<? extends JobPostingContent> content = JsonNullable.undefined();
 
        private JsonNullable<? extends List<JobPostingCompensation>> compensation = JsonNullable.undefined();
 
        private JsonNullable<? extends JobPostingEmploymentType> employmentType = JsonNullable.undefined();
 
        private JsonNullable<? extends JobPostingEmploymentContractType> employmentContractType = JsonNullable.undefined();
 
        private JsonNullable<String> externalUrl = JsonNullable.undefined();
 
        private JsonNullable<String> externalApplyUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends List<JobPostingQuestionnaire>> questionnaires = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> startDate = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(String remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = JsonNullable.of(remoteId);
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(JsonNullable<String> remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = remoteId;
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(Map<String, Object> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = unifiedCustomFields;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder locations(List<JobPostingLocation> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = JsonNullable.of(locations);
            return this;
        }

        public Builder locations(JsonNullable<? extends List<JobPostingLocation>> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = locations;
            return this;
        }

        public Builder internal(Internal internal) {
            Utils.checkNotNull(internal, "internal");
            this.internal = JsonNullable.of(internal);
            return this;
        }

        public Builder internal(JsonNullable<? extends Internal> internal) {
            Utils.checkNotNull(internal, "internal");
            this.internal = internal;
            return this;
        }

        public Builder status(JobPostingStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder status(JsonNullable<? extends JobPostingStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = JsonNullable.of(jobId);
            return this;
        }

        public Builder jobId(JsonNullable<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        /**
         * Provider's unique identifier of the job posting
         */
        public Builder remoteJobPostingId(String remoteJobPostingId) {
            Utils.checkNotNull(remoteJobPostingId, "remoteJobPostingId");
            this.remoteJobPostingId = JsonNullable.of(remoteJobPostingId);
            return this;
        }

        /**
         * Provider's unique identifier of the job posting
         */
        public Builder remoteJobPostingId(JsonNullable<String> remoteJobPostingId) {
            Utils.checkNotNull(remoteJobPostingId, "remoteJobPostingId");
            this.remoteJobPostingId = remoteJobPostingId;
            return this;
        }

        public Builder content(JobPostingContent content) {
            Utils.checkNotNull(content, "content");
            this.content = JsonNullable.of(content);
            return this;
        }

        public Builder content(JsonNullable<? extends JobPostingContent> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder compensation(List<JobPostingCompensation> compensation) {
            Utils.checkNotNull(compensation, "compensation");
            this.compensation = JsonNullable.of(compensation);
            return this;
        }

        public Builder compensation(JsonNullable<? extends List<JobPostingCompensation>> compensation) {
            Utils.checkNotNull(compensation, "compensation");
            this.compensation = compensation;
            return this;
        }

        public Builder employmentType(JobPostingEmploymentType employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = JsonNullable.of(employmentType);
            return this;
        }

        public Builder employmentType(JsonNullable<? extends JobPostingEmploymentType> employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = employmentType;
            return this;
        }

        public Builder employmentContractType(JobPostingEmploymentContractType employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = JsonNullable.of(employmentContractType);
            return this;
        }

        public Builder employmentContractType(JsonNullable<? extends JobPostingEmploymentContractType> employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = employmentContractType;
            return this;
        }

        public Builder externalUrl(String externalUrl) {
            Utils.checkNotNull(externalUrl, "externalUrl");
            this.externalUrl = JsonNullable.of(externalUrl);
            return this;
        }

        public Builder externalUrl(JsonNullable<String> externalUrl) {
            Utils.checkNotNull(externalUrl, "externalUrl");
            this.externalUrl = externalUrl;
            return this;
        }

        public Builder externalApplyUrl(String externalApplyUrl) {
            Utils.checkNotNull(externalApplyUrl, "externalApplyUrl");
            this.externalApplyUrl = JsonNullable.of(externalApplyUrl);
            return this;
        }

        public Builder externalApplyUrl(JsonNullable<String> externalApplyUrl) {
            Utils.checkNotNull(externalApplyUrl, "externalApplyUrl");
            this.externalApplyUrl = externalApplyUrl;
            return this;
        }

        public Builder questionnaires(List<JobPostingQuestionnaire> questionnaires) {
            Utils.checkNotNull(questionnaires, "questionnaires");
            this.questionnaires = JsonNullable.of(questionnaires);
            return this;
        }

        public Builder questionnaires(JsonNullable<? extends List<JobPostingQuestionnaire>> questionnaires) {
            Utils.checkNotNull(questionnaires, "questionnaires");
            this.questionnaires = questionnaires;
            return this;
        }

        /**
         * The posting start date
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The posting start date
         */
        public Builder startDate(JsonNullable<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Date of creation
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * Date of creation
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Date of last update
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * Date of last update
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public JobPosting build() {
            return new JobPosting(
                id,
                remoteId,
                unifiedCustomFields,
                title,
                locations,
                internal,
                status,
                jobId,
                remoteJobPostingId,
                content,
                compensation,
                employmentType,
                employmentContractType,
                externalUrl,
                externalApplyUrl,
                questionnaires,
                startDate,
                createdAt,
                updatedAt);
        }
    }
}
