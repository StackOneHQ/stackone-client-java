/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class ApplicationChangesDataModel {
    /**
     * Unique identifier of the interview stage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interview_stage_id")
    private JsonNullable<String> interviewStageId;

    /**
     * Unique identifiers of the rejection reasons
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejected_reason_ids")
    private JsonNullable<? extends List<String>> rejectedReasonIds;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_status")
    private JsonNullable<? extends ApplicationChangesDataModelApplicationStatus> applicationStatus;

    @JsonCreator
    public ApplicationChangesDataModel(
            @JsonProperty("interview_stage_id") JsonNullable<String> interviewStageId,
            @JsonProperty("rejected_reason_ids") JsonNullable<? extends List<String>> rejectedReasonIds,
            @JsonProperty("application_status") JsonNullable<? extends ApplicationChangesDataModelApplicationStatus> applicationStatus) {
        Utils.checkNotNull(interviewStageId, "interviewStageId");
        Utils.checkNotNull(rejectedReasonIds, "rejectedReasonIds");
        Utils.checkNotNull(applicationStatus, "applicationStatus");
        this.interviewStageId = interviewStageId;
        this.rejectedReasonIds = rejectedReasonIds;
        this.applicationStatus = applicationStatus;
    }
    
    public ApplicationChangesDataModel() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier of the interview stage
     */
    @JsonIgnore
    public JsonNullable<String> interviewStageId() {
        return interviewStageId;
    }

    /**
     * Unique identifiers of the rejection reasons
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> rejectedReasonIds() {
        return (JsonNullable<List<String>>) rejectedReasonIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ApplicationChangesDataModelApplicationStatus> applicationStatus() {
        return (JsonNullable<ApplicationChangesDataModelApplicationStatus>) applicationStatus;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier of the interview stage
     */
    public ApplicationChangesDataModel withInterviewStageId(String interviewStageId) {
        Utils.checkNotNull(interviewStageId, "interviewStageId");
        this.interviewStageId = JsonNullable.of(interviewStageId);
        return this;
    }

    /**
     * Unique identifier of the interview stage
     */
    public ApplicationChangesDataModel withInterviewStageId(JsonNullable<String> interviewStageId) {
        Utils.checkNotNull(interviewStageId, "interviewStageId");
        this.interviewStageId = interviewStageId;
        return this;
    }

    /**
     * Unique identifiers of the rejection reasons
     */
    public ApplicationChangesDataModel withRejectedReasonIds(List<String> rejectedReasonIds) {
        Utils.checkNotNull(rejectedReasonIds, "rejectedReasonIds");
        this.rejectedReasonIds = JsonNullable.of(rejectedReasonIds);
        return this;
    }

    /**
     * Unique identifiers of the rejection reasons
     */
    public ApplicationChangesDataModel withRejectedReasonIds(JsonNullable<? extends List<String>> rejectedReasonIds) {
        Utils.checkNotNull(rejectedReasonIds, "rejectedReasonIds");
        this.rejectedReasonIds = rejectedReasonIds;
        return this;
    }

    public ApplicationChangesDataModel withApplicationStatus(ApplicationChangesDataModelApplicationStatus applicationStatus) {
        Utils.checkNotNull(applicationStatus, "applicationStatus");
        this.applicationStatus = JsonNullable.of(applicationStatus);
        return this;
    }

    public ApplicationChangesDataModel withApplicationStatus(JsonNullable<? extends ApplicationChangesDataModelApplicationStatus> applicationStatus) {
        Utils.checkNotNull(applicationStatus, "applicationStatus");
        this.applicationStatus = applicationStatus;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationChangesDataModel other = (ApplicationChangesDataModel) o;
        return 
            Utils.enhancedDeepEquals(this.interviewStageId, other.interviewStageId) &&
            Utils.enhancedDeepEquals(this.rejectedReasonIds, other.rejectedReasonIds) &&
            Utils.enhancedDeepEquals(this.applicationStatus, other.applicationStatus);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            interviewStageId, rejectedReasonIds, applicationStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicationChangesDataModel.class,
                "interviewStageId", interviewStageId,
                "rejectedReasonIds", rejectedReasonIds,
                "applicationStatus", applicationStatus);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> interviewStageId = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> rejectedReasonIds = JsonNullable.undefined();

        private JsonNullable<? extends ApplicationChangesDataModelApplicationStatus> applicationStatus = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier of the interview stage
         */
        public Builder interviewStageId(String interviewStageId) {
            Utils.checkNotNull(interviewStageId, "interviewStageId");
            this.interviewStageId = JsonNullable.of(interviewStageId);
            return this;
        }

        /**
         * Unique identifier of the interview stage
         */
        public Builder interviewStageId(JsonNullable<String> interviewStageId) {
            Utils.checkNotNull(interviewStageId, "interviewStageId");
            this.interviewStageId = interviewStageId;
            return this;
        }


        /**
         * Unique identifiers of the rejection reasons
         */
        public Builder rejectedReasonIds(List<String> rejectedReasonIds) {
            Utils.checkNotNull(rejectedReasonIds, "rejectedReasonIds");
            this.rejectedReasonIds = JsonNullable.of(rejectedReasonIds);
            return this;
        }

        /**
         * Unique identifiers of the rejection reasons
         */
        public Builder rejectedReasonIds(JsonNullable<? extends List<String>> rejectedReasonIds) {
            Utils.checkNotNull(rejectedReasonIds, "rejectedReasonIds");
            this.rejectedReasonIds = rejectedReasonIds;
            return this;
        }


        public Builder applicationStatus(ApplicationChangesDataModelApplicationStatus applicationStatus) {
            Utils.checkNotNull(applicationStatus, "applicationStatus");
            this.applicationStatus = JsonNullable.of(applicationStatus);
            return this;
        }

        public Builder applicationStatus(JsonNullable<? extends ApplicationChangesDataModelApplicationStatus> applicationStatus) {
            Utils.checkNotNull(applicationStatus, "applicationStatus");
            this.applicationStatus = applicationStatus;
            return this;
        }

        public ApplicationChangesDataModel build() {

            return new ApplicationChangesDataModel(
                interviewStageId, rejectedReasonIds, applicationStatus);
        }

    }
}
