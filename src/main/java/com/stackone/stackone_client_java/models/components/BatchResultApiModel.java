/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.stackone.stackone_client_java.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class BatchResultApiModel {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusCode")
    private JsonNullable<Double> statusCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private JsonNullable<String> message;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private JsonNullable<OffsetDateTime> timestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private JsonNullable<? extends List<List<String>>> errors;

    @JsonCreator
    public BatchResultApiModel(
            @JsonProperty("statusCode") JsonNullable<Double> statusCode,
            @JsonProperty("message") JsonNullable<String> message,
            @JsonProperty("timestamp") JsonNullable<OffsetDateTime> timestamp,
            @JsonProperty("errors") JsonNullable<? extends List<List<String>>> errors) {
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(errors, "errors");
        this.statusCode = statusCode;
        this.message = message;
        this.timestamp = timestamp;
        this.errors = errors;
    }
    
    public BatchResultApiModel() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<Double> statusCode() {
        return statusCode;
    }

    @JsonIgnore
    public JsonNullable<String> message() {
        return message;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> timestamp() {
        return timestamp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<List<String>>> errors() {
        return (JsonNullable<List<List<String>>>) errors;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public BatchResultApiModel withStatusCode(double statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = JsonNullable.of(statusCode);
        return this;
    }

    public BatchResultApiModel withStatusCode(JsonNullable<Double> statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    public BatchResultApiModel withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = JsonNullable.of(message);
        return this;
    }

    public BatchResultApiModel withMessage(JsonNullable<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public BatchResultApiModel withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = JsonNullable.of(timestamp);
        return this;
    }

    public BatchResultApiModel withTimestamp(JsonNullable<OffsetDateTime> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    public BatchResultApiModel withErrors(List<List<String>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = JsonNullable.of(errors);
        return this;
    }

    public BatchResultApiModel withErrors(JsonNullable<? extends List<List<String>>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BatchResultApiModel other = (BatchResultApiModel) o;
        return 
            Objects.deepEquals(this.statusCode, other.statusCode) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.timestamp, other.timestamp) &&
            Objects.deepEquals(this.errors, other.errors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            statusCode,
            message,
            timestamp,
            errors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BatchResultApiModel.class,
                "statusCode", statusCode,
                "message", message,
                "timestamp", timestamp,
                "errors", errors);
    }
    
    public final static class Builder {
 
        private JsonNullable<Double> statusCode = JsonNullable.undefined();
 
        private JsonNullable<String> message = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> timestamp = JsonNullable.undefined();
 
        private JsonNullable<? extends List<List<String>>> errors = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder statusCode(double statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = JsonNullable.of(statusCode);
            return this;
        }

        public Builder statusCode(JsonNullable<Double> statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = JsonNullable.of(message);
            return this;
        }

        public Builder message(JsonNullable<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = JsonNullable.of(timestamp);
            return this;
        }

        public Builder timestamp(JsonNullable<OffsetDateTime> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        public Builder errors(List<List<String>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = JsonNullable.of(errors);
            return this;
        }

        public Builder errors(JsonNullable<? extends List<List<String>>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }
        
        public BatchResultApiModel build() {
            return new BatchResultApiModel(
                statusCode,
                message,
                timestamp,
                errors);
        }
    }
}

