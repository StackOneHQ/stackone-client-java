/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * AccountingCompanyResultValue
 * 
 * <p>Default currency for the company
 */
@JsonDeserialize(using = AccountingCompanyResultValue._Deserializer.class)
@JsonSerialize(using = AccountingCompanyResultValue._Serializer.class)
public class AccountingCompanyResultValue {

    public static final AccountingCompanyResultValue AED = new AccountingCompanyResultValue("AED");
    public static final AccountingCompanyResultValue AFN = new AccountingCompanyResultValue("AFN");
    public static final AccountingCompanyResultValue ALL = new AccountingCompanyResultValue("ALL");
    public static final AccountingCompanyResultValue AMD = new AccountingCompanyResultValue("AMD");
    public static final AccountingCompanyResultValue ANG = new AccountingCompanyResultValue("ANG");
    public static final AccountingCompanyResultValue AOA = new AccountingCompanyResultValue("AOA");
    public static final AccountingCompanyResultValue ARS = new AccountingCompanyResultValue("ARS");
    public static final AccountingCompanyResultValue AUD = new AccountingCompanyResultValue("AUD");
    public static final AccountingCompanyResultValue AWG = new AccountingCompanyResultValue("AWG");
    public static final AccountingCompanyResultValue AZN = new AccountingCompanyResultValue("AZN");
    public static final AccountingCompanyResultValue BAM = new AccountingCompanyResultValue("BAM");
    public static final AccountingCompanyResultValue BBD = new AccountingCompanyResultValue("BBD");
    public static final AccountingCompanyResultValue BDT = new AccountingCompanyResultValue("BDT");
    public static final AccountingCompanyResultValue BGN = new AccountingCompanyResultValue("BGN");
    public static final AccountingCompanyResultValue BHD = new AccountingCompanyResultValue("BHD");
    public static final AccountingCompanyResultValue BIF = new AccountingCompanyResultValue("BIF");
    public static final AccountingCompanyResultValue BMD = new AccountingCompanyResultValue("BMD");
    public static final AccountingCompanyResultValue BND = new AccountingCompanyResultValue("BND");
    public static final AccountingCompanyResultValue BOB = new AccountingCompanyResultValue("BOB");
    public static final AccountingCompanyResultValue BRL = new AccountingCompanyResultValue("BRL");
    public static final AccountingCompanyResultValue BSD = new AccountingCompanyResultValue("BSD");
    public static final AccountingCompanyResultValue BTN = new AccountingCompanyResultValue("BTN");
    public static final AccountingCompanyResultValue BWP = new AccountingCompanyResultValue("BWP");
    public static final AccountingCompanyResultValue BYN = new AccountingCompanyResultValue("BYN");
    public static final AccountingCompanyResultValue BZD = new AccountingCompanyResultValue("BZD");
    public static final AccountingCompanyResultValue CAD = new AccountingCompanyResultValue("CAD");
    public static final AccountingCompanyResultValue CDF = new AccountingCompanyResultValue("CDF");
    public static final AccountingCompanyResultValue CHF = new AccountingCompanyResultValue("CHF");
    public static final AccountingCompanyResultValue CLP = new AccountingCompanyResultValue("CLP");
    public static final AccountingCompanyResultValue CNY = new AccountingCompanyResultValue("CNY");
    public static final AccountingCompanyResultValue COP = new AccountingCompanyResultValue("COP");
    public static final AccountingCompanyResultValue CRC = new AccountingCompanyResultValue("CRC");
    public static final AccountingCompanyResultValue CUC = new AccountingCompanyResultValue("CUC");
    public static final AccountingCompanyResultValue CUP = new AccountingCompanyResultValue("CUP");
    public static final AccountingCompanyResultValue CVE = new AccountingCompanyResultValue("CVE");
    public static final AccountingCompanyResultValue CZK = new AccountingCompanyResultValue("CZK");
    public static final AccountingCompanyResultValue DJF = new AccountingCompanyResultValue("DJF");
    public static final AccountingCompanyResultValue DKK = new AccountingCompanyResultValue("DKK");
    public static final AccountingCompanyResultValue DOP = new AccountingCompanyResultValue("DOP");
    public static final AccountingCompanyResultValue DZD = new AccountingCompanyResultValue("DZD");
    public static final AccountingCompanyResultValue EGP = new AccountingCompanyResultValue("EGP");
    public static final AccountingCompanyResultValue ERN = new AccountingCompanyResultValue("ERN");
    public static final AccountingCompanyResultValue ETB = new AccountingCompanyResultValue("ETB");
    public static final AccountingCompanyResultValue EUR = new AccountingCompanyResultValue("EUR");
    public static final AccountingCompanyResultValue FJD = new AccountingCompanyResultValue("FJD");
    public static final AccountingCompanyResultValue FKP = new AccountingCompanyResultValue("FKP");
    public static final AccountingCompanyResultValue GBP = new AccountingCompanyResultValue("GBP");
    public static final AccountingCompanyResultValue GEL = new AccountingCompanyResultValue("GEL");
    public static final AccountingCompanyResultValue GHS = new AccountingCompanyResultValue("GHS");
    public static final AccountingCompanyResultValue GIP = new AccountingCompanyResultValue("GIP");
    public static final AccountingCompanyResultValue GMD = new AccountingCompanyResultValue("GMD");
    public static final AccountingCompanyResultValue GNF = new AccountingCompanyResultValue("GNF");
    public static final AccountingCompanyResultValue GTQ = new AccountingCompanyResultValue("GTQ");
    public static final AccountingCompanyResultValue GYD = new AccountingCompanyResultValue("GYD");
    public static final AccountingCompanyResultValue HKD = new AccountingCompanyResultValue("HKD");
    public static final AccountingCompanyResultValue HNL = new AccountingCompanyResultValue("HNL");
    public static final AccountingCompanyResultValue HRK = new AccountingCompanyResultValue("HRK");
    public static final AccountingCompanyResultValue HTG = new AccountingCompanyResultValue("HTG");
    public static final AccountingCompanyResultValue HUF = new AccountingCompanyResultValue("HUF");
    public static final AccountingCompanyResultValue IDR = new AccountingCompanyResultValue("IDR");
    public static final AccountingCompanyResultValue ILS = new AccountingCompanyResultValue("ILS");
    public static final AccountingCompanyResultValue INR = new AccountingCompanyResultValue("INR");
    public static final AccountingCompanyResultValue IQD = new AccountingCompanyResultValue("IQD");
    public static final AccountingCompanyResultValue IRR = new AccountingCompanyResultValue("IRR");
    public static final AccountingCompanyResultValue ISK = new AccountingCompanyResultValue("ISK");
    public static final AccountingCompanyResultValue JMD = new AccountingCompanyResultValue("JMD");
    public static final AccountingCompanyResultValue JOD = new AccountingCompanyResultValue("JOD");
    public static final AccountingCompanyResultValue JPY = new AccountingCompanyResultValue("JPY");
    public static final AccountingCompanyResultValue KES = new AccountingCompanyResultValue("KES");
    public static final AccountingCompanyResultValue KGS = new AccountingCompanyResultValue("KGS");
    public static final AccountingCompanyResultValue KHR = new AccountingCompanyResultValue("KHR");
    public static final AccountingCompanyResultValue KMF = new AccountingCompanyResultValue("KMF");
    public static final AccountingCompanyResultValue KPW = new AccountingCompanyResultValue("KPW");
    public static final AccountingCompanyResultValue KRW = new AccountingCompanyResultValue("KRW");
    public static final AccountingCompanyResultValue KWD = new AccountingCompanyResultValue("KWD");
    public static final AccountingCompanyResultValue KYD = new AccountingCompanyResultValue("KYD");
    public static final AccountingCompanyResultValue KZT = new AccountingCompanyResultValue("KZT");
    public static final AccountingCompanyResultValue LAK = new AccountingCompanyResultValue("LAK");
    public static final AccountingCompanyResultValue LBP = new AccountingCompanyResultValue("LBP");
    public static final AccountingCompanyResultValue LKR = new AccountingCompanyResultValue("LKR");
    public static final AccountingCompanyResultValue LRD = new AccountingCompanyResultValue("LRD");
    public static final AccountingCompanyResultValue LSL = new AccountingCompanyResultValue("LSL");
    public static final AccountingCompanyResultValue LYD = new AccountingCompanyResultValue("LYD");
    public static final AccountingCompanyResultValue MAD = new AccountingCompanyResultValue("MAD");
    public static final AccountingCompanyResultValue MDL = new AccountingCompanyResultValue("MDL");
    public static final AccountingCompanyResultValue MGA = new AccountingCompanyResultValue("MGA");
    public static final AccountingCompanyResultValue MKD = new AccountingCompanyResultValue("MKD");
    public static final AccountingCompanyResultValue MMK = new AccountingCompanyResultValue("MMK");
    public static final AccountingCompanyResultValue MNT = new AccountingCompanyResultValue("MNT");
    public static final AccountingCompanyResultValue MOP = new AccountingCompanyResultValue("MOP");
    public static final AccountingCompanyResultValue MRU = new AccountingCompanyResultValue("MRU");
    public static final AccountingCompanyResultValue MUR = new AccountingCompanyResultValue("MUR");
    public static final AccountingCompanyResultValue MVR = new AccountingCompanyResultValue("MVR");
    public static final AccountingCompanyResultValue MWK = new AccountingCompanyResultValue("MWK");
    public static final AccountingCompanyResultValue MXN = new AccountingCompanyResultValue("MXN");
    public static final AccountingCompanyResultValue MYR = new AccountingCompanyResultValue("MYR");
    public static final AccountingCompanyResultValue MZN = new AccountingCompanyResultValue("MZN");
    public static final AccountingCompanyResultValue NAD = new AccountingCompanyResultValue("NAD");
    public static final AccountingCompanyResultValue NGN = new AccountingCompanyResultValue("NGN");
    public static final AccountingCompanyResultValue NIO = new AccountingCompanyResultValue("NIO");
    public static final AccountingCompanyResultValue NOK = new AccountingCompanyResultValue("NOK");
    public static final AccountingCompanyResultValue NPR = new AccountingCompanyResultValue("NPR");
    public static final AccountingCompanyResultValue NZD = new AccountingCompanyResultValue("NZD");
    public static final AccountingCompanyResultValue OMR = new AccountingCompanyResultValue("OMR");
    public static final AccountingCompanyResultValue PAB = new AccountingCompanyResultValue("PAB");
    public static final AccountingCompanyResultValue PEN = new AccountingCompanyResultValue("PEN");
    public static final AccountingCompanyResultValue PGK = new AccountingCompanyResultValue("PGK");
    public static final AccountingCompanyResultValue PHP = new AccountingCompanyResultValue("PHP");
    public static final AccountingCompanyResultValue PKR = new AccountingCompanyResultValue("PKR");
    public static final AccountingCompanyResultValue PLN = new AccountingCompanyResultValue("PLN");
    public static final AccountingCompanyResultValue PYG = new AccountingCompanyResultValue("PYG");
    public static final AccountingCompanyResultValue QAR = new AccountingCompanyResultValue("QAR");
    public static final AccountingCompanyResultValue RON = new AccountingCompanyResultValue("RON");
    public static final AccountingCompanyResultValue RSD = new AccountingCompanyResultValue("RSD");
    public static final AccountingCompanyResultValue RUB = new AccountingCompanyResultValue("RUB");
    public static final AccountingCompanyResultValue RWF = new AccountingCompanyResultValue("RWF");
    public static final AccountingCompanyResultValue SAR = new AccountingCompanyResultValue("SAR");
    public static final AccountingCompanyResultValue SBD = new AccountingCompanyResultValue("SBD");
    public static final AccountingCompanyResultValue SCR = new AccountingCompanyResultValue("SCR");
    public static final AccountingCompanyResultValue SDG = new AccountingCompanyResultValue("SDG");
    public static final AccountingCompanyResultValue SEK = new AccountingCompanyResultValue("SEK");
    public static final AccountingCompanyResultValue SGD = new AccountingCompanyResultValue("SGD");
    public static final AccountingCompanyResultValue SHP = new AccountingCompanyResultValue("SHP");
    public static final AccountingCompanyResultValue SLL = new AccountingCompanyResultValue("SLL");
    public static final AccountingCompanyResultValue SOS = new AccountingCompanyResultValue("SOS");
    public static final AccountingCompanyResultValue SRD = new AccountingCompanyResultValue("SRD");
    public static final AccountingCompanyResultValue SSP = new AccountingCompanyResultValue("SSP");
    public static final AccountingCompanyResultValue STN = new AccountingCompanyResultValue("STN");
    public static final AccountingCompanyResultValue SYP = new AccountingCompanyResultValue("SYP");
    public static final AccountingCompanyResultValue SZL = new AccountingCompanyResultValue("SZL");
    public static final AccountingCompanyResultValue THB = new AccountingCompanyResultValue("THB");
    public static final AccountingCompanyResultValue TJS = new AccountingCompanyResultValue("TJS");
    public static final AccountingCompanyResultValue TMT = new AccountingCompanyResultValue("TMT");
    public static final AccountingCompanyResultValue TND = new AccountingCompanyResultValue("TND");
    public static final AccountingCompanyResultValue TOP = new AccountingCompanyResultValue("TOP");
    public static final AccountingCompanyResultValue TRY = new AccountingCompanyResultValue("TRY");
    public static final AccountingCompanyResultValue TTD = new AccountingCompanyResultValue("TTD");
    public static final AccountingCompanyResultValue TWD = new AccountingCompanyResultValue("TWD");
    public static final AccountingCompanyResultValue TZS = new AccountingCompanyResultValue("TZS");
    public static final AccountingCompanyResultValue UAH = new AccountingCompanyResultValue("UAH");
    public static final AccountingCompanyResultValue UGX = new AccountingCompanyResultValue("UGX");
    public static final AccountingCompanyResultValue USD = new AccountingCompanyResultValue("USD");
    public static final AccountingCompanyResultValue UYU = new AccountingCompanyResultValue("UYU");
    public static final AccountingCompanyResultValue UZS = new AccountingCompanyResultValue("UZS");
    public static final AccountingCompanyResultValue VES = new AccountingCompanyResultValue("VES");
    public static final AccountingCompanyResultValue VND = new AccountingCompanyResultValue("VND");
    public static final AccountingCompanyResultValue VUV = new AccountingCompanyResultValue("VUV");
    public static final AccountingCompanyResultValue WST = new AccountingCompanyResultValue("WST");
    public static final AccountingCompanyResultValue XAF = new AccountingCompanyResultValue("XAF");
    public static final AccountingCompanyResultValue XCD = new AccountingCompanyResultValue("XCD");
    public static final AccountingCompanyResultValue XDR = new AccountingCompanyResultValue("XDR");
    public static final AccountingCompanyResultValue XOF = new AccountingCompanyResultValue("XOF");
    public static final AccountingCompanyResultValue XPF = new AccountingCompanyResultValue("XPF");
    public static final AccountingCompanyResultValue YER = new AccountingCompanyResultValue("YER");
    public static final AccountingCompanyResultValue ZAR = new AccountingCompanyResultValue("ZAR");
    public static final AccountingCompanyResultValue ZMW = new AccountingCompanyResultValue("ZMW");
    public static final AccountingCompanyResultValue ZWL = new AccountingCompanyResultValue("ZWL");
    public static final AccountingCompanyResultValue UNMAPPED_VALUE = new AccountingCompanyResultValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, AccountingCompanyResultValue> values = createValuesMap();
    private static final Map<String, AccountingCompanyResultValueEnum> enums = createEnumsMap();

    private final String value;

    private AccountingCompanyResultValue(String value) {
        this.value = value;
    }

    /**
     * Returns a AccountingCompanyResultValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as AccountingCompanyResultValue
     */ 
    public static AccountingCompanyResultValue of(String value) {
        synchronized (AccountingCompanyResultValue.class) {
            return values.computeIfAbsent(value, v -> new AccountingCompanyResultValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<AccountingCompanyResultValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        AccountingCompanyResultValue other = (AccountingCompanyResultValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "AccountingCompanyResultValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static AccountingCompanyResultValue[] values() {
        synchronized (AccountingCompanyResultValue.class) {
            return values.values().toArray(new AccountingCompanyResultValue[] {});
        }
    }

    private static final Map<String, AccountingCompanyResultValue> createValuesMap() {
        Map<String, AccountingCompanyResultValue> map = new LinkedHashMap<>();
        map.put("AED", AED);
        map.put("AFN", AFN);
        map.put("ALL", ALL);
        map.put("AMD", AMD);
        map.put("ANG", ANG);
        map.put("AOA", AOA);
        map.put("ARS", ARS);
        map.put("AUD", AUD);
        map.put("AWG", AWG);
        map.put("AZN", AZN);
        map.put("BAM", BAM);
        map.put("BBD", BBD);
        map.put("BDT", BDT);
        map.put("BGN", BGN);
        map.put("BHD", BHD);
        map.put("BIF", BIF);
        map.put("BMD", BMD);
        map.put("BND", BND);
        map.put("BOB", BOB);
        map.put("BRL", BRL);
        map.put("BSD", BSD);
        map.put("BTN", BTN);
        map.put("BWP", BWP);
        map.put("BYN", BYN);
        map.put("BZD", BZD);
        map.put("CAD", CAD);
        map.put("CDF", CDF);
        map.put("CHF", CHF);
        map.put("CLP", CLP);
        map.put("CNY", CNY);
        map.put("COP", COP);
        map.put("CRC", CRC);
        map.put("CUC", CUC);
        map.put("CUP", CUP);
        map.put("CVE", CVE);
        map.put("CZK", CZK);
        map.put("DJF", DJF);
        map.put("DKK", DKK);
        map.put("DOP", DOP);
        map.put("DZD", DZD);
        map.put("EGP", EGP);
        map.put("ERN", ERN);
        map.put("ETB", ETB);
        map.put("EUR", EUR);
        map.put("FJD", FJD);
        map.put("FKP", FKP);
        map.put("GBP", GBP);
        map.put("GEL", GEL);
        map.put("GHS", GHS);
        map.put("GIP", GIP);
        map.put("GMD", GMD);
        map.put("GNF", GNF);
        map.put("GTQ", GTQ);
        map.put("GYD", GYD);
        map.put("HKD", HKD);
        map.put("HNL", HNL);
        map.put("HRK", HRK);
        map.put("HTG", HTG);
        map.put("HUF", HUF);
        map.put("IDR", IDR);
        map.put("ILS", ILS);
        map.put("INR", INR);
        map.put("IQD", IQD);
        map.put("IRR", IRR);
        map.put("ISK", ISK);
        map.put("JMD", JMD);
        map.put("JOD", JOD);
        map.put("JPY", JPY);
        map.put("KES", KES);
        map.put("KGS", KGS);
        map.put("KHR", KHR);
        map.put("KMF", KMF);
        map.put("KPW", KPW);
        map.put("KRW", KRW);
        map.put("KWD", KWD);
        map.put("KYD", KYD);
        map.put("KZT", KZT);
        map.put("LAK", LAK);
        map.put("LBP", LBP);
        map.put("LKR", LKR);
        map.put("LRD", LRD);
        map.put("LSL", LSL);
        map.put("LYD", LYD);
        map.put("MAD", MAD);
        map.put("MDL", MDL);
        map.put("MGA", MGA);
        map.put("MKD", MKD);
        map.put("MMK", MMK);
        map.put("MNT", MNT);
        map.put("MOP", MOP);
        map.put("MRU", MRU);
        map.put("MUR", MUR);
        map.put("MVR", MVR);
        map.put("MWK", MWK);
        map.put("MXN", MXN);
        map.put("MYR", MYR);
        map.put("MZN", MZN);
        map.put("NAD", NAD);
        map.put("NGN", NGN);
        map.put("NIO", NIO);
        map.put("NOK", NOK);
        map.put("NPR", NPR);
        map.put("NZD", NZD);
        map.put("OMR", OMR);
        map.put("PAB", PAB);
        map.put("PEN", PEN);
        map.put("PGK", PGK);
        map.put("PHP", PHP);
        map.put("PKR", PKR);
        map.put("PLN", PLN);
        map.put("PYG", PYG);
        map.put("QAR", QAR);
        map.put("RON", RON);
        map.put("RSD", RSD);
        map.put("RUB", RUB);
        map.put("RWF", RWF);
        map.put("SAR", SAR);
        map.put("SBD", SBD);
        map.put("SCR", SCR);
        map.put("SDG", SDG);
        map.put("SEK", SEK);
        map.put("SGD", SGD);
        map.put("SHP", SHP);
        map.put("SLL", SLL);
        map.put("SOS", SOS);
        map.put("SRD", SRD);
        map.put("SSP", SSP);
        map.put("STN", STN);
        map.put("SYP", SYP);
        map.put("SZL", SZL);
        map.put("THB", THB);
        map.put("TJS", TJS);
        map.put("TMT", TMT);
        map.put("TND", TND);
        map.put("TOP", TOP);
        map.put("TRY", TRY);
        map.put("TTD", TTD);
        map.put("TWD", TWD);
        map.put("TZS", TZS);
        map.put("UAH", UAH);
        map.put("UGX", UGX);
        map.put("USD", USD);
        map.put("UYU", UYU);
        map.put("UZS", UZS);
        map.put("VES", VES);
        map.put("VND", VND);
        map.put("VUV", VUV);
        map.put("WST", WST);
        map.put("XAF", XAF);
        map.put("XCD", XCD);
        map.put("XDR", XDR);
        map.put("XOF", XOF);
        map.put("XPF", XPF);
        map.put("YER", YER);
        map.put("ZAR", ZAR);
        map.put("ZMW", ZMW);
        map.put("ZWL", ZWL);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, AccountingCompanyResultValueEnum> createEnumsMap() {
        Map<String, AccountingCompanyResultValueEnum> map = new HashMap<>();
        map.put("AED", AccountingCompanyResultValueEnum.AED);
        map.put("AFN", AccountingCompanyResultValueEnum.AFN);
        map.put("ALL", AccountingCompanyResultValueEnum.ALL);
        map.put("AMD", AccountingCompanyResultValueEnum.AMD);
        map.put("ANG", AccountingCompanyResultValueEnum.ANG);
        map.put("AOA", AccountingCompanyResultValueEnum.AOA);
        map.put("ARS", AccountingCompanyResultValueEnum.ARS);
        map.put("AUD", AccountingCompanyResultValueEnum.AUD);
        map.put("AWG", AccountingCompanyResultValueEnum.AWG);
        map.put("AZN", AccountingCompanyResultValueEnum.AZN);
        map.put("BAM", AccountingCompanyResultValueEnum.BAM);
        map.put("BBD", AccountingCompanyResultValueEnum.BBD);
        map.put("BDT", AccountingCompanyResultValueEnum.BDT);
        map.put("BGN", AccountingCompanyResultValueEnum.BGN);
        map.put("BHD", AccountingCompanyResultValueEnum.BHD);
        map.put("BIF", AccountingCompanyResultValueEnum.BIF);
        map.put("BMD", AccountingCompanyResultValueEnum.BMD);
        map.put("BND", AccountingCompanyResultValueEnum.BND);
        map.put("BOB", AccountingCompanyResultValueEnum.BOB);
        map.put("BRL", AccountingCompanyResultValueEnum.BRL);
        map.put("BSD", AccountingCompanyResultValueEnum.BSD);
        map.put("BTN", AccountingCompanyResultValueEnum.BTN);
        map.put("BWP", AccountingCompanyResultValueEnum.BWP);
        map.put("BYN", AccountingCompanyResultValueEnum.BYN);
        map.put("BZD", AccountingCompanyResultValueEnum.BZD);
        map.put("CAD", AccountingCompanyResultValueEnum.CAD);
        map.put("CDF", AccountingCompanyResultValueEnum.CDF);
        map.put("CHF", AccountingCompanyResultValueEnum.CHF);
        map.put("CLP", AccountingCompanyResultValueEnum.CLP);
        map.put("CNY", AccountingCompanyResultValueEnum.CNY);
        map.put("COP", AccountingCompanyResultValueEnum.COP);
        map.put("CRC", AccountingCompanyResultValueEnum.CRC);
        map.put("CUC", AccountingCompanyResultValueEnum.CUC);
        map.put("CUP", AccountingCompanyResultValueEnum.CUP);
        map.put("CVE", AccountingCompanyResultValueEnum.CVE);
        map.put("CZK", AccountingCompanyResultValueEnum.CZK);
        map.put("DJF", AccountingCompanyResultValueEnum.DJF);
        map.put("DKK", AccountingCompanyResultValueEnum.DKK);
        map.put("DOP", AccountingCompanyResultValueEnum.DOP);
        map.put("DZD", AccountingCompanyResultValueEnum.DZD);
        map.put("EGP", AccountingCompanyResultValueEnum.EGP);
        map.put("ERN", AccountingCompanyResultValueEnum.ERN);
        map.put("ETB", AccountingCompanyResultValueEnum.ETB);
        map.put("EUR", AccountingCompanyResultValueEnum.EUR);
        map.put("FJD", AccountingCompanyResultValueEnum.FJD);
        map.put("FKP", AccountingCompanyResultValueEnum.FKP);
        map.put("GBP", AccountingCompanyResultValueEnum.GBP);
        map.put("GEL", AccountingCompanyResultValueEnum.GEL);
        map.put("GHS", AccountingCompanyResultValueEnum.GHS);
        map.put("GIP", AccountingCompanyResultValueEnum.GIP);
        map.put("GMD", AccountingCompanyResultValueEnum.GMD);
        map.put("GNF", AccountingCompanyResultValueEnum.GNF);
        map.put("GTQ", AccountingCompanyResultValueEnum.GTQ);
        map.put("GYD", AccountingCompanyResultValueEnum.GYD);
        map.put("HKD", AccountingCompanyResultValueEnum.HKD);
        map.put("HNL", AccountingCompanyResultValueEnum.HNL);
        map.put("HRK", AccountingCompanyResultValueEnum.HRK);
        map.put("HTG", AccountingCompanyResultValueEnum.HTG);
        map.put("HUF", AccountingCompanyResultValueEnum.HUF);
        map.put("IDR", AccountingCompanyResultValueEnum.IDR);
        map.put("ILS", AccountingCompanyResultValueEnum.ILS);
        map.put("INR", AccountingCompanyResultValueEnum.INR);
        map.put("IQD", AccountingCompanyResultValueEnum.IQD);
        map.put("IRR", AccountingCompanyResultValueEnum.IRR);
        map.put("ISK", AccountingCompanyResultValueEnum.ISK);
        map.put("JMD", AccountingCompanyResultValueEnum.JMD);
        map.put("JOD", AccountingCompanyResultValueEnum.JOD);
        map.put("JPY", AccountingCompanyResultValueEnum.JPY);
        map.put("KES", AccountingCompanyResultValueEnum.KES);
        map.put("KGS", AccountingCompanyResultValueEnum.KGS);
        map.put("KHR", AccountingCompanyResultValueEnum.KHR);
        map.put("KMF", AccountingCompanyResultValueEnum.KMF);
        map.put("KPW", AccountingCompanyResultValueEnum.KPW);
        map.put("KRW", AccountingCompanyResultValueEnum.KRW);
        map.put("KWD", AccountingCompanyResultValueEnum.KWD);
        map.put("KYD", AccountingCompanyResultValueEnum.KYD);
        map.put("KZT", AccountingCompanyResultValueEnum.KZT);
        map.put("LAK", AccountingCompanyResultValueEnum.LAK);
        map.put("LBP", AccountingCompanyResultValueEnum.LBP);
        map.put("LKR", AccountingCompanyResultValueEnum.LKR);
        map.put("LRD", AccountingCompanyResultValueEnum.LRD);
        map.put("LSL", AccountingCompanyResultValueEnum.LSL);
        map.put("LYD", AccountingCompanyResultValueEnum.LYD);
        map.put("MAD", AccountingCompanyResultValueEnum.MAD);
        map.put("MDL", AccountingCompanyResultValueEnum.MDL);
        map.put("MGA", AccountingCompanyResultValueEnum.MGA);
        map.put("MKD", AccountingCompanyResultValueEnum.MKD);
        map.put("MMK", AccountingCompanyResultValueEnum.MMK);
        map.put("MNT", AccountingCompanyResultValueEnum.MNT);
        map.put("MOP", AccountingCompanyResultValueEnum.MOP);
        map.put("MRU", AccountingCompanyResultValueEnum.MRU);
        map.put("MUR", AccountingCompanyResultValueEnum.MUR);
        map.put("MVR", AccountingCompanyResultValueEnum.MVR);
        map.put("MWK", AccountingCompanyResultValueEnum.MWK);
        map.put("MXN", AccountingCompanyResultValueEnum.MXN);
        map.put("MYR", AccountingCompanyResultValueEnum.MYR);
        map.put("MZN", AccountingCompanyResultValueEnum.MZN);
        map.put("NAD", AccountingCompanyResultValueEnum.NAD);
        map.put("NGN", AccountingCompanyResultValueEnum.NGN);
        map.put("NIO", AccountingCompanyResultValueEnum.NIO);
        map.put("NOK", AccountingCompanyResultValueEnum.NOK);
        map.put("NPR", AccountingCompanyResultValueEnum.NPR);
        map.put("NZD", AccountingCompanyResultValueEnum.NZD);
        map.put("OMR", AccountingCompanyResultValueEnum.OMR);
        map.put("PAB", AccountingCompanyResultValueEnum.PAB);
        map.put("PEN", AccountingCompanyResultValueEnum.PEN);
        map.put("PGK", AccountingCompanyResultValueEnum.PGK);
        map.put("PHP", AccountingCompanyResultValueEnum.PHP);
        map.put("PKR", AccountingCompanyResultValueEnum.PKR);
        map.put("PLN", AccountingCompanyResultValueEnum.PLN);
        map.put("PYG", AccountingCompanyResultValueEnum.PYG);
        map.put("QAR", AccountingCompanyResultValueEnum.QAR);
        map.put("RON", AccountingCompanyResultValueEnum.RON);
        map.put("RSD", AccountingCompanyResultValueEnum.RSD);
        map.put("RUB", AccountingCompanyResultValueEnum.RUB);
        map.put("RWF", AccountingCompanyResultValueEnum.RWF);
        map.put("SAR", AccountingCompanyResultValueEnum.SAR);
        map.put("SBD", AccountingCompanyResultValueEnum.SBD);
        map.put("SCR", AccountingCompanyResultValueEnum.SCR);
        map.put("SDG", AccountingCompanyResultValueEnum.SDG);
        map.put("SEK", AccountingCompanyResultValueEnum.SEK);
        map.put("SGD", AccountingCompanyResultValueEnum.SGD);
        map.put("SHP", AccountingCompanyResultValueEnum.SHP);
        map.put("SLL", AccountingCompanyResultValueEnum.SLL);
        map.put("SOS", AccountingCompanyResultValueEnum.SOS);
        map.put("SRD", AccountingCompanyResultValueEnum.SRD);
        map.put("SSP", AccountingCompanyResultValueEnum.SSP);
        map.put("STN", AccountingCompanyResultValueEnum.STN);
        map.put("SYP", AccountingCompanyResultValueEnum.SYP);
        map.put("SZL", AccountingCompanyResultValueEnum.SZL);
        map.put("THB", AccountingCompanyResultValueEnum.THB);
        map.put("TJS", AccountingCompanyResultValueEnum.TJS);
        map.put("TMT", AccountingCompanyResultValueEnum.TMT);
        map.put("TND", AccountingCompanyResultValueEnum.TND);
        map.put("TOP", AccountingCompanyResultValueEnum.TOP);
        map.put("TRY", AccountingCompanyResultValueEnum.TRY);
        map.put("TTD", AccountingCompanyResultValueEnum.TTD);
        map.put("TWD", AccountingCompanyResultValueEnum.TWD);
        map.put("TZS", AccountingCompanyResultValueEnum.TZS);
        map.put("UAH", AccountingCompanyResultValueEnum.UAH);
        map.put("UGX", AccountingCompanyResultValueEnum.UGX);
        map.put("USD", AccountingCompanyResultValueEnum.USD);
        map.put("UYU", AccountingCompanyResultValueEnum.UYU);
        map.put("UZS", AccountingCompanyResultValueEnum.UZS);
        map.put("VES", AccountingCompanyResultValueEnum.VES);
        map.put("VND", AccountingCompanyResultValueEnum.VND);
        map.put("VUV", AccountingCompanyResultValueEnum.VUV);
        map.put("WST", AccountingCompanyResultValueEnum.WST);
        map.put("XAF", AccountingCompanyResultValueEnum.XAF);
        map.put("XCD", AccountingCompanyResultValueEnum.XCD);
        map.put("XDR", AccountingCompanyResultValueEnum.XDR);
        map.put("XOF", AccountingCompanyResultValueEnum.XOF);
        map.put("XPF", AccountingCompanyResultValueEnum.XPF);
        map.put("YER", AccountingCompanyResultValueEnum.YER);
        map.put("ZAR", AccountingCompanyResultValueEnum.ZAR);
        map.put("ZMW", AccountingCompanyResultValueEnum.ZMW);
        map.put("ZWL", AccountingCompanyResultValueEnum.ZWL);
        map.put("unmapped_value", AccountingCompanyResultValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<AccountingCompanyResultValue> {

        protected _Serializer() {
            super(AccountingCompanyResultValue.class);
        }

        @Override
        public void serialize(AccountingCompanyResultValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<AccountingCompanyResultValue> {

        protected _Deserializer() {
            super(AccountingCompanyResultValue.class);
        }

        @Override
        public AccountingCompanyResultValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return AccountingCompanyResultValue.of(v);
        }
    }
    
    public enum AccountingCompanyResultValueEnum {

        AED("AED"),
        AFN("AFN"),
        ALL("ALL"),
        AMD("AMD"),
        ANG("ANG"),
        AOA("AOA"),
        ARS("ARS"),
        AUD("AUD"),
        AWG("AWG"),
        AZN("AZN"),
        BAM("BAM"),
        BBD("BBD"),
        BDT("BDT"),
        BGN("BGN"),
        BHD("BHD"),
        BIF("BIF"),
        BMD("BMD"),
        BND("BND"),
        BOB("BOB"),
        BRL("BRL"),
        BSD("BSD"),
        BTN("BTN"),
        BWP("BWP"),
        BYN("BYN"),
        BZD("BZD"),
        CAD("CAD"),
        CDF("CDF"),
        CHF("CHF"),
        CLP("CLP"),
        CNY("CNY"),
        COP("COP"),
        CRC("CRC"),
        CUC("CUC"),
        CUP("CUP"),
        CVE("CVE"),
        CZK("CZK"),
        DJF("DJF"),
        DKK("DKK"),
        DOP("DOP"),
        DZD("DZD"),
        EGP("EGP"),
        ERN("ERN"),
        ETB("ETB"),
        EUR("EUR"),
        FJD("FJD"),
        FKP("FKP"),
        GBP("GBP"),
        GEL("GEL"),
        GHS("GHS"),
        GIP("GIP"),
        GMD("GMD"),
        GNF("GNF"),
        GTQ("GTQ"),
        GYD("GYD"),
        HKD("HKD"),
        HNL("HNL"),
        HRK("HRK"),
        HTG("HTG"),
        HUF("HUF"),
        IDR("IDR"),
        ILS("ILS"),
        INR("INR"),
        IQD("IQD"),
        IRR("IRR"),
        ISK("ISK"),
        JMD("JMD"),
        JOD("JOD"),
        JPY("JPY"),
        KES("KES"),
        KGS("KGS"),
        KHR("KHR"),
        KMF("KMF"),
        KPW("KPW"),
        KRW("KRW"),
        KWD("KWD"),
        KYD("KYD"),
        KZT("KZT"),
        LAK("LAK"),
        LBP("LBP"),
        LKR("LKR"),
        LRD("LRD"),
        LSL("LSL"),
        LYD("LYD"),
        MAD("MAD"),
        MDL("MDL"),
        MGA("MGA"),
        MKD("MKD"),
        MMK("MMK"),
        MNT("MNT"),
        MOP("MOP"),
        MRU("MRU"),
        MUR("MUR"),
        MVR("MVR"),
        MWK("MWK"),
        MXN("MXN"),
        MYR("MYR"),
        MZN("MZN"),
        NAD("NAD"),
        NGN("NGN"),
        NIO("NIO"),
        NOK("NOK"),
        NPR("NPR"),
        NZD("NZD"),
        OMR("OMR"),
        PAB("PAB"),
        PEN("PEN"),
        PGK("PGK"),
        PHP("PHP"),
        PKR("PKR"),
        PLN("PLN"),
        PYG("PYG"),
        QAR("QAR"),
        RON("RON"),
        RSD("RSD"),
        RUB("RUB"),
        RWF("RWF"),
        SAR("SAR"),
        SBD("SBD"),
        SCR("SCR"),
        SDG("SDG"),
        SEK("SEK"),
        SGD("SGD"),
        SHP("SHP"),
        SLL("SLL"),
        SOS("SOS"),
        SRD("SRD"),
        SSP("SSP"),
        STN("STN"),
        SYP("SYP"),
        SZL("SZL"),
        THB("THB"),
        TJS("TJS"),
        TMT("TMT"),
        TND("TND"),
        TOP("TOP"),
        TRY("TRY"),
        TTD("TTD"),
        TWD("TWD"),
        TZS("TZS"),
        UAH("UAH"),
        UGX("UGX"),
        USD("USD"),
        UYU("UYU"),
        UZS("UZS"),
        VES("VES"),
        VND("VND"),
        VUV("VUV"),
        WST("WST"),
        XAF("XAF"),
        XCD("XCD"),
        XDR("XDR"),
        XOF("XOF"),
        XPF("XPF"),
        YER("YER"),
        ZAR("ZAR"),
        ZMW("ZMW"),
        ZWL("ZWL"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private AccountingCompanyResultValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

