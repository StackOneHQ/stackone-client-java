/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;


public class StepLog {
    /**
     * The request ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_id")
    private JsonNullable<String> requestId;

    /**
     * The request start time ISO8601 date string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_time")
    private JsonNullable<OffsetDateTime> startTime;

    /**
     * The request end time ISO8601 date string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_time")
    private JsonNullable<OffsetDateTime> endTime;

    /**
     * The account ID of the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private JsonNullable<String> accountId;

    /**
     * The project ID of the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    private JsonNullable<String> projectId;

    /**
     * The requested HTTP method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http_method")
    private JsonNullable<String> httpMethod;

    /**
     * The requested path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    private JsonNullable<String> path;

    /**
     * The requested URL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private JsonNullable<String> url;

    /**
     * The requests response status code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<Double> status;

    /**
     * The request duration in milliseconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private JsonNullable<Double> duration;

    /**
     * The request success flag
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private JsonNullable<Boolean> success;

    /**
     * The requested provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private JsonNullable<String> provider;

    /**
     * The requested service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    private JsonNullable<String> service;

    /**
     * The requested resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private JsonNullable<String> resource;

    /**
     * The requested child resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_resource")
    private JsonNullable<String> childResource;

    /**
     * The requested sub resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_resource")
    private JsonNullable<String> subResource;

    /**
     * The requested action
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private JsonNullable<String> action;

    /**
     * The asynchronous worker flag
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_worker")
    private JsonNullable<Boolean> isWorker;

    /**
     * The provider request ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * The advanced log request data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request")
    private JsonNullable<? extends StepLogRequest> request;

    /**
     * The advanced log response data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response")
    private JsonNullable<? extends StepLogResponse> response;

    @JsonCreator
    public StepLog(
            @JsonProperty("request_id") JsonNullable<String> requestId,
            @JsonProperty("start_time") JsonNullable<OffsetDateTime> startTime,
            @JsonProperty("end_time") JsonNullable<OffsetDateTime> endTime,
            @JsonProperty("account_id") JsonNullable<String> accountId,
            @JsonProperty("project_id") JsonNullable<String> projectId,
            @JsonProperty("http_method") JsonNullable<String> httpMethod,
            @JsonProperty("path") JsonNullable<String> path,
            @JsonProperty("url") JsonNullable<String> url,
            @JsonProperty("status") JsonNullable<Double> status,
            @JsonProperty("duration") JsonNullable<Double> duration,
            @JsonProperty("success") JsonNullable<Boolean> success,
            @JsonProperty("provider") JsonNullable<String> provider,
            @JsonProperty("service") JsonNullable<String> service,
            @JsonProperty("resource") JsonNullable<String> resource,
            @JsonProperty("child_resource") JsonNullable<String> childResource,
            @JsonProperty("sub_resource") JsonNullable<String> subResource,
            @JsonProperty("action") JsonNullable<String> action,
            @JsonProperty("is_worker") JsonNullable<Boolean> isWorker,
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("request") JsonNullable<? extends StepLogRequest> request,
            @JsonProperty("response") JsonNullable<? extends StepLogResponse> response) {
        Utils.checkNotNull(requestId, "requestId");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(httpMethod, "httpMethod");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(service, "service");
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(childResource, "childResource");
        Utils.checkNotNull(subResource, "subResource");
        Utils.checkNotNull(action, "action");
        Utils.checkNotNull(isWorker, "isWorker");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(request, "request");
        Utils.checkNotNull(response, "response");
        this.requestId = requestId;
        this.startTime = startTime;
        this.endTime = endTime;
        this.accountId = accountId;
        this.projectId = projectId;
        this.httpMethod = httpMethod;
        this.path = path;
        this.url = url;
        this.status = status;
        this.duration = duration;
        this.success = success;
        this.provider = provider;
        this.service = service;
        this.resource = resource;
        this.childResource = childResource;
        this.subResource = subResource;
        this.action = action;
        this.isWorker = isWorker;
        this.id = id;
        this.request = request;
        this.response = response;
    }
    
    public StepLog() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The request ID
     */
    @JsonIgnore
    public JsonNullable<String> requestId() {
        return requestId;
    }

    /**
     * The request start time ISO8601 date string
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startTime() {
        return startTime;
    }

    /**
     * The request end time ISO8601 date string
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> endTime() {
        return endTime;
    }

    /**
     * The account ID of the request
     */
    @JsonIgnore
    public JsonNullable<String> accountId() {
        return accountId;
    }

    /**
     * The project ID of the request
     */
    @JsonIgnore
    public JsonNullable<String> projectId() {
        return projectId;
    }

    /**
     * The requested HTTP method
     */
    @JsonIgnore
    public JsonNullable<String> httpMethod() {
        return httpMethod;
    }

    /**
     * The requested path
     */
    @JsonIgnore
    public JsonNullable<String> path() {
        return path;
    }

    /**
     * The requested URL
     */
    @JsonIgnore
    public JsonNullable<String> url() {
        return url;
    }

    /**
     * The requests response status code
     */
    @JsonIgnore
    public JsonNullable<Double> status() {
        return status;
    }

    /**
     * The request duration in milliseconds
     */
    @JsonIgnore
    public JsonNullable<Double> duration() {
        return duration;
    }

    /**
     * The request success flag
     */
    @JsonIgnore
    public JsonNullable<Boolean> success() {
        return success;
    }

    /**
     * The requested provider
     */
    @JsonIgnore
    public JsonNullable<String> provider() {
        return provider;
    }

    /**
     * The requested service
     */
    @JsonIgnore
    public JsonNullable<String> service() {
        return service;
    }

    /**
     * The requested resource
     */
    @JsonIgnore
    public JsonNullable<String> resource() {
        return resource;
    }

    /**
     * The requested child resource
     */
    @JsonIgnore
    public JsonNullable<String> childResource() {
        return childResource;
    }

    /**
     * The requested sub resource
     */
    @JsonIgnore
    public JsonNullable<String> subResource() {
        return subResource;
    }

    /**
     * The requested action
     */
    @JsonIgnore
    public JsonNullable<String> action() {
        return action;
    }

    /**
     * The asynchronous worker flag
     */
    @JsonIgnore
    public JsonNullable<Boolean> isWorker() {
        return isWorker;
    }

    /**
     * The provider request ID
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * The advanced log request data
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StepLogRequest> request() {
        return (JsonNullable<StepLogRequest>) request;
    }

    /**
     * The advanced log response data
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StepLogResponse> response() {
        return (JsonNullable<StepLogResponse>) response;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The request ID
     */
    public StepLog withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = JsonNullable.of(requestId);
        return this;
    }

    /**
     * The request ID
     */
    public StepLog withRequestId(JsonNullable<String> requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }

    /**
     * The request start time ISO8601 date string
     */
    public StepLog withStartTime(OffsetDateTime startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = JsonNullable.of(startTime);
        return this;
    }

    /**
     * The request start time ISO8601 date string
     */
    public StepLog withStartTime(JsonNullable<OffsetDateTime> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * The request end time ISO8601 date string
     */
    public StepLog withEndTime(OffsetDateTime endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = JsonNullable.of(endTime);
        return this;
    }

    /**
     * The request end time ISO8601 date string
     */
    public StepLog withEndTime(JsonNullable<OffsetDateTime> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    /**
     * The account ID of the request
     */
    public StepLog withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = JsonNullable.of(accountId);
        return this;
    }

    /**
     * The account ID of the request
     */
    public StepLog withAccountId(JsonNullable<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The project ID of the request
     */
    public StepLog withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = JsonNullable.of(projectId);
        return this;
    }

    /**
     * The project ID of the request
     */
    public StepLog withProjectId(JsonNullable<String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * The requested HTTP method
     */
    public StepLog withHttpMethod(String httpMethod) {
        Utils.checkNotNull(httpMethod, "httpMethod");
        this.httpMethod = JsonNullable.of(httpMethod);
        return this;
    }

    /**
     * The requested HTTP method
     */
    public StepLog withHttpMethod(JsonNullable<String> httpMethod) {
        Utils.checkNotNull(httpMethod, "httpMethod");
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * The requested path
     */
    public StepLog withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = JsonNullable.of(path);
        return this;
    }

    /**
     * The requested path
     */
    public StepLog withPath(JsonNullable<String> path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * The requested URL
     */
    public StepLog withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * The requested URL
     */
    public StepLog withUrl(JsonNullable<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The requests response status code
     */
    public StepLog withStatus(double status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * The requests response status code
     */
    public StepLog withStatus(JsonNullable<Double> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The request duration in milliseconds
     */
    public StepLog withDuration(double duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = JsonNullable.of(duration);
        return this;
    }

    /**
     * The request duration in milliseconds
     */
    public StepLog withDuration(JsonNullable<Double> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * The request success flag
     */
    public StepLog withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = JsonNullable.of(success);
        return this;
    }

    /**
     * The request success flag
     */
    public StepLog withSuccess(JsonNullable<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * The requested provider
     */
    public StepLog withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = JsonNullable.of(provider);
        return this;
    }

    /**
     * The requested provider
     */
    public StepLog withProvider(JsonNullable<String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * The requested service
     */
    public StepLog withService(String service) {
        Utils.checkNotNull(service, "service");
        this.service = JsonNullable.of(service);
        return this;
    }

    /**
     * The requested service
     */
    public StepLog withService(JsonNullable<String> service) {
        Utils.checkNotNull(service, "service");
        this.service = service;
        return this;
    }

    /**
     * The requested resource
     */
    public StepLog withResource(String resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = JsonNullable.of(resource);
        return this;
    }

    /**
     * The requested resource
     */
    public StepLog withResource(JsonNullable<String> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * The requested child resource
     */
    public StepLog withChildResource(String childResource) {
        Utils.checkNotNull(childResource, "childResource");
        this.childResource = JsonNullable.of(childResource);
        return this;
    }

    /**
     * The requested child resource
     */
    public StepLog withChildResource(JsonNullable<String> childResource) {
        Utils.checkNotNull(childResource, "childResource");
        this.childResource = childResource;
        return this;
    }

    /**
     * The requested sub resource
     */
    public StepLog withSubResource(String subResource) {
        Utils.checkNotNull(subResource, "subResource");
        this.subResource = JsonNullable.of(subResource);
        return this;
    }

    /**
     * The requested sub resource
     */
    public StepLog withSubResource(JsonNullable<String> subResource) {
        Utils.checkNotNull(subResource, "subResource");
        this.subResource = subResource;
        return this;
    }

    /**
     * The requested action
     */
    public StepLog withAction(String action) {
        Utils.checkNotNull(action, "action");
        this.action = JsonNullable.of(action);
        return this;
    }

    /**
     * The requested action
     */
    public StepLog withAction(JsonNullable<String> action) {
        Utils.checkNotNull(action, "action");
        this.action = action;
        return this;
    }

    /**
     * The asynchronous worker flag
     */
    public StepLog withIsWorker(boolean isWorker) {
        Utils.checkNotNull(isWorker, "isWorker");
        this.isWorker = JsonNullable.of(isWorker);
        return this;
    }

    /**
     * The asynchronous worker flag
     */
    public StepLog withIsWorker(JsonNullable<Boolean> isWorker) {
        Utils.checkNotNull(isWorker, "isWorker");
        this.isWorker = isWorker;
        return this;
    }

    /**
     * The provider request ID
     */
    public StepLog withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The provider request ID
     */
    public StepLog withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The advanced log request data
     */
    public StepLog withRequest(StepLogRequest request) {
        Utils.checkNotNull(request, "request");
        this.request = JsonNullable.of(request);
        return this;
    }

    /**
     * The advanced log request data
     */
    public StepLog withRequest(JsonNullable<? extends StepLogRequest> request) {
        Utils.checkNotNull(request, "request");
        this.request = request;
        return this;
    }

    /**
     * The advanced log response data
     */
    public StepLog withResponse(StepLogResponse response) {
        Utils.checkNotNull(response, "response");
        this.response = JsonNullable.of(response);
        return this;
    }

    /**
     * The advanced log response data
     */
    public StepLog withResponse(JsonNullable<? extends StepLogResponse> response) {
        Utils.checkNotNull(response, "response");
        this.response = response;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StepLog other = (StepLog) o;
        return 
            Utils.enhancedDeepEquals(this.requestId, other.requestId) &&
            Utils.enhancedDeepEquals(this.startTime, other.startTime) &&
            Utils.enhancedDeepEquals(this.endTime, other.endTime) &&
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.projectId, other.projectId) &&
            Utils.enhancedDeepEquals(this.httpMethod, other.httpMethod) &&
            Utils.enhancedDeepEquals(this.path, other.path) &&
            Utils.enhancedDeepEquals(this.url, other.url) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.duration, other.duration) &&
            Utils.enhancedDeepEquals(this.success, other.success) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.service, other.service) &&
            Utils.enhancedDeepEquals(this.resource, other.resource) &&
            Utils.enhancedDeepEquals(this.childResource, other.childResource) &&
            Utils.enhancedDeepEquals(this.subResource, other.subResource) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.isWorker, other.isWorker) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.request, other.request) &&
            Utils.enhancedDeepEquals(this.response, other.response);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            requestId, startTime, endTime,
            accountId, projectId, httpMethod,
            path, url, status,
            duration, success, provider,
            service, resource, childResource,
            subResource, action, isWorker,
            id, request, response);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StepLog.class,
                "requestId", requestId,
                "startTime", startTime,
                "endTime", endTime,
                "accountId", accountId,
                "projectId", projectId,
                "httpMethod", httpMethod,
                "path", path,
                "url", url,
                "status", status,
                "duration", duration,
                "success", success,
                "provider", provider,
                "service", service,
                "resource", resource,
                "childResource", childResource,
                "subResource", subResource,
                "action", action,
                "isWorker", isWorker,
                "id", id,
                "request", request,
                "response", response);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> requestId = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> startTime = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> endTime = JsonNullable.undefined();

        private JsonNullable<String> accountId = JsonNullable.undefined();

        private JsonNullable<String> projectId = JsonNullable.undefined();

        private JsonNullable<String> httpMethod = JsonNullable.undefined();

        private JsonNullable<String> path = JsonNullable.undefined();

        private JsonNullable<String> url = JsonNullable.undefined();

        private JsonNullable<Double> status = JsonNullable.undefined();

        private JsonNullable<Double> duration = JsonNullable.undefined();

        private JsonNullable<Boolean> success = JsonNullable.undefined();

        private JsonNullable<String> provider = JsonNullable.undefined();

        private JsonNullable<String> service = JsonNullable.undefined();

        private JsonNullable<String> resource = JsonNullable.undefined();

        private JsonNullable<String> childResource = JsonNullable.undefined();

        private JsonNullable<String> subResource = JsonNullable.undefined();

        private JsonNullable<String> action = JsonNullable.undefined();

        private JsonNullable<Boolean> isWorker = JsonNullable.undefined();

        private JsonNullable<String> id = JsonNullable.undefined();

        private JsonNullable<? extends StepLogRequest> request = JsonNullable.undefined();

        private JsonNullable<? extends StepLogResponse> response = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The request ID
         */
        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = JsonNullable.of(requestId);
            return this;
        }

        /**
         * The request ID
         */
        public Builder requestId(JsonNullable<String> requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }


        /**
         * The request start time ISO8601 date string
         */
        public Builder startTime(OffsetDateTime startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = JsonNullable.of(startTime);
            return this;
        }

        /**
         * The request start time ISO8601 date string
         */
        public Builder startTime(JsonNullable<OffsetDateTime> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }


        /**
         * The request end time ISO8601 date string
         */
        public Builder endTime(OffsetDateTime endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = JsonNullable.of(endTime);
            return this;
        }

        /**
         * The request end time ISO8601 date string
         */
        public Builder endTime(JsonNullable<OffsetDateTime> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }


        /**
         * The account ID of the request
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = JsonNullable.of(accountId);
            return this;
        }

        /**
         * The account ID of the request
         */
        public Builder accountId(JsonNullable<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * The project ID of the request
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = JsonNullable.of(projectId);
            return this;
        }

        /**
         * The project ID of the request
         */
        public Builder projectId(JsonNullable<String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }


        /**
         * The requested HTTP method
         */
        public Builder httpMethod(String httpMethod) {
            Utils.checkNotNull(httpMethod, "httpMethod");
            this.httpMethod = JsonNullable.of(httpMethod);
            return this;
        }

        /**
         * The requested HTTP method
         */
        public Builder httpMethod(JsonNullable<String> httpMethod) {
            Utils.checkNotNull(httpMethod, "httpMethod");
            this.httpMethod = httpMethod;
            return this;
        }


        /**
         * The requested path
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = JsonNullable.of(path);
            return this;
        }

        /**
         * The requested path
         */
        public Builder path(JsonNullable<String> path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }


        /**
         * The requested URL
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * The requested URL
         */
        public Builder url(JsonNullable<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }


        /**
         * The requests response status code
         */
        public Builder status(double status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * The requests response status code
         */
        public Builder status(JsonNullable<Double> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The request duration in milliseconds
         */
        public Builder duration(double duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = JsonNullable.of(duration);
            return this;
        }

        /**
         * The request duration in milliseconds
         */
        public Builder duration(JsonNullable<Double> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }


        /**
         * The request success flag
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = JsonNullable.of(success);
            return this;
        }

        /**
         * The request success flag
         */
        public Builder success(JsonNullable<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }


        /**
         * The requested provider
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = JsonNullable.of(provider);
            return this;
        }

        /**
         * The requested provider
         */
        public Builder provider(JsonNullable<String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        /**
         * The requested service
         */
        public Builder service(String service) {
            Utils.checkNotNull(service, "service");
            this.service = JsonNullable.of(service);
            return this;
        }

        /**
         * The requested service
         */
        public Builder service(JsonNullable<String> service) {
            Utils.checkNotNull(service, "service");
            this.service = service;
            return this;
        }


        /**
         * The requested resource
         */
        public Builder resource(String resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = JsonNullable.of(resource);
            return this;
        }

        /**
         * The requested resource
         */
        public Builder resource(JsonNullable<String> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }


        /**
         * The requested child resource
         */
        public Builder childResource(String childResource) {
            Utils.checkNotNull(childResource, "childResource");
            this.childResource = JsonNullable.of(childResource);
            return this;
        }

        /**
         * The requested child resource
         */
        public Builder childResource(JsonNullable<String> childResource) {
            Utils.checkNotNull(childResource, "childResource");
            this.childResource = childResource;
            return this;
        }


        /**
         * The requested sub resource
         */
        public Builder subResource(String subResource) {
            Utils.checkNotNull(subResource, "subResource");
            this.subResource = JsonNullable.of(subResource);
            return this;
        }

        /**
         * The requested sub resource
         */
        public Builder subResource(JsonNullable<String> subResource) {
            Utils.checkNotNull(subResource, "subResource");
            this.subResource = subResource;
            return this;
        }


        /**
         * The requested action
         */
        public Builder action(String action) {
            Utils.checkNotNull(action, "action");
            this.action = JsonNullable.of(action);
            return this;
        }

        /**
         * The requested action
         */
        public Builder action(JsonNullable<String> action) {
            Utils.checkNotNull(action, "action");
            this.action = action;
            return this;
        }


        /**
         * The asynchronous worker flag
         */
        public Builder isWorker(boolean isWorker) {
            Utils.checkNotNull(isWorker, "isWorker");
            this.isWorker = JsonNullable.of(isWorker);
            return this;
        }

        /**
         * The asynchronous worker flag
         */
        public Builder isWorker(JsonNullable<Boolean> isWorker) {
            Utils.checkNotNull(isWorker, "isWorker");
            this.isWorker = isWorker;
            return this;
        }


        /**
         * The provider request ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The provider request ID
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The advanced log request data
         */
        public Builder request(StepLogRequest request) {
            Utils.checkNotNull(request, "request");
            this.request = JsonNullable.of(request);
            return this;
        }

        /**
         * The advanced log request data
         */
        public Builder request(JsonNullable<? extends StepLogRequest> request) {
            Utils.checkNotNull(request, "request");
            this.request = request;
            return this;
        }


        /**
         * The advanced log response data
         */
        public Builder response(StepLogResponse response) {
            Utils.checkNotNull(response, "response");
            this.response = JsonNullable.of(response);
            return this;
        }

        /**
         * The advanced log response data
         */
        public Builder response(JsonNullable<? extends StepLogResponse> response) {
            Utils.checkNotNull(response, "response");
            this.response = response;
            return this;
        }

        public StepLog build() {

            return new StepLog(
                requestId, startTime, endTime,
                accountId, projectId, httpMethod,
                path, url, status,
                duration, success, provider,
                service, resource, childResource,
                subResource, action, isWorker,
                id, request, response);
        }

    }
}
