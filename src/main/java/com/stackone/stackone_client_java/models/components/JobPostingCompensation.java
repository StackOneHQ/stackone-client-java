/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class JobPostingCompensation {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends JobPostingCompensationType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_period")
    private JsonNullable<? extends JobPostingCompensationPayPeriod> payPeriod;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_frequency")
    private JsonNullable<? extends JobPostingCompensationPayFrequency> payFrequency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<String> value;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min_value")
    private JsonNullable<String> minValue;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_value")
    private JsonNullable<String> maxValue;

    @JsonCreator
    public JobPostingCompensation(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("type") JsonNullable<? extends JobPostingCompensationType> type,
            @JsonProperty("pay_period") JsonNullable<? extends JobPostingCompensationPayPeriod> payPeriod,
            @JsonProperty("pay_frequency") JsonNullable<? extends JobPostingCompensationPayFrequency> payFrequency,
            @JsonProperty("currency") JsonNullable<String> currency,
            @JsonProperty("value") JsonNullable<String> value,
            @JsonProperty("min_value") JsonNullable<String> minValue,
            @JsonProperty("max_value") JsonNullable<String> maxValue) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(payPeriod, "payPeriod");
        Utils.checkNotNull(payFrequency, "payFrequency");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(minValue, "minValue");
        Utils.checkNotNull(maxValue, "maxValue");
        this.name = name;
        this.type = type;
        this.payPeriod = payPeriod;
        this.payFrequency = payFrequency;
        this.currency = currency;
        this.value = value;
        this.minValue = minValue;
        this.maxValue = maxValue;
    }
    
    public JobPostingCompensation() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobPostingCompensationType> type() {
        return (JsonNullable<JobPostingCompensationType>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobPostingCompensationPayPeriod> payPeriod() {
        return (JsonNullable<JobPostingCompensationPayPeriod>) payPeriod;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobPostingCompensationPayFrequency> payFrequency() {
        return (JsonNullable<JobPostingCompensationPayFrequency>) payFrequency;
    }

    @JsonIgnore
    public JsonNullable<String> currency() {
        return currency;
    }

    @JsonIgnore
    public JsonNullable<String> value() {
        return value;
    }

    @JsonIgnore
    public JsonNullable<String> minValue() {
        return minValue;
    }

    @JsonIgnore
    public JsonNullable<String> maxValue() {
        return maxValue;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public JobPostingCompensation withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public JobPostingCompensation withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public JobPostingCompensation withType(JobPostingCompensationType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    public JobPostingCompensation withType(JsonNullable<? extends JobPostingCompensationType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public JobPostingCompensation withPayPeriod(JobPostingCompensationPayPeriod payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = JsonNullable.of(payPeriod);
        return this;
    }

    public JobPostingCompensation withPayPeriod(JsonNullable<? extends JobPostingCompensationPayPeriod> payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = payPeriod;
        return this;
    }

    public JobPostingCompensation withPayFrequency(JobPostingCompensationPayFrequency payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = JsonNullable.of(payFrequency);
        return this;
    }

    public JobPostingCompensation withPayFrequency(JsonNullable<? extends JobPostingCompensationPayFrequency> payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = payFrequency;
        return this;
    }

    public JobPostingCompensation withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    public JobPostingCompensation withCurrency(JsonNullable<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public JobPostingCompensation withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = JsonNullable.of(value);
        return this;
    }

    public JobPostingCompensation withValue(JsonNullable<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    public JobPostingCompensation withMinValue(String minValue) {
        Utils.checkNotNull(minValue, "minValue");
        this.minValue = JsonNullable.of(minValue);
        return this;
    }

    public JobPostingCompensation withMinValue(JsonNullable<String> minValue) {
        Utils.checkNotNull(minValue, "minValue");
        this.minValue = minValue;
        return this;
    }

    public JobPostingCompensation withMaxValue(String maxValue) {
        Utils.checkNotNull(maxValue, "maxValue");
        this.maxValue = JsonNullable.of(maxValue);
        return this;
    }

    public JobPostingCompensation withMaxValue(JsonNullable<String> maxValue) {
        Utils.checkNotNull(maxValue, "maxValue");
        this.maxValue = maxValue;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobPostingCompensation other = (JobPostingCompensation) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.payPeriod, other.payPeriod) &&
            Objects.deepEquals(this.payFrequency, other.payFrequency) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.minValue, other.minValue) &&
            Objects.deepEquals(this.maxValue, other.maxValue);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            type,
            payPeriod,
            payFrequency,
            currency,
            value,
            minValue,
            maxValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JobPostingCompensation.class,
                "name", name,
                "type", type,
                "payPeriod", payPeriod,
                "payFrequency", payFrequency,
                "currency", currency,
                "value", value,
                "minValue", minValue,
                "maxValue", maxValue);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends JobPostingCompensationType> type = JsonNullable.undefined();
 
        private JsonNullable<? extends JobPostingCompensationPayPeriod> payPeriod = JsonNullable.undefined();
 
        private JsonNullable<? extends JobPostingCompensationPayFrequency> payFrequency = JsonNullable.undefined();
 
        private JsonNullable<String> currency = JsonNullable.undefined();
 
        private JsonNullable<String> value = JsonNullable.undefined();
 
        private JsonNullable<String> minValue = JsonNullable.undefined();
 
        private JsonNullable<String> maxValue = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder type(JobPostingCompensationType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        public Builder type(JsonNullable<? extends JobPostingCompensationType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder payPeriod(JobPostingCompensationPayPeriod payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = JsonNullable.of(payPeriod);
            return this;
        }

        public Builder payPeriod(JsonNullable<? extends JobPostingCompensationPayPeriod> payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = payPeriod;
            return this;
        }

        public Builder payFrequency(JobPostingCompensationPayFrequency payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = JsonNullable.of(payFrequency);
            return this;
        }

        public Builder payFrequency(JsonNullable<? extends JobPostingCompensationPayFrequency> payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = payFrequency;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        public Builder currency(JsonNullable<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = JsonNullable.of(value);
            return this;
        }

        public Builder value(JsonNullable<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public Builder minValue(String minValue) {
            Utils.checkNotNull(minValue, "minValue");
            this.minValue = JsonNullable.of(minValue);
            return this;
        }

        public Builder minValue(JsonNullable<String> minValue) {
            Utils.checkNotNull(minValue, "minValue");
            this.minValue = minValue;
            return this;
        }

        public Builder maxValue(String maxValue) {
            Utils.checkNotNull(maxValue, "maxValue");
            this.maxValue = JsonNullable.of(maxValue);
            return this;
        }

        public Builder maxValue(JsonNullable<String> maxValue) {
            Utils.checkNotNull(maxValue, "maxValue");
            this.maxValue = maxValue;
            return this;
        }
        
        public JobPostingCompensation build() {
            return new JobPostingCompensation(
                name,
                type,
                payPeriod,
                payFrequency,
                currency,
                value,
                minValue,
                maxValue);
        }
    }
}
