/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * UpdateEmployeeApiModelEmploymentPayFrequencyValue - The pay frequency of the job postings.
 */
@JsonDeserialize(using = UpdateEmployeeApiModelEmploymentPayFrequencyValue._Deserializer.class)
@JsonSerialize(using = UpdateEmployeeApiModelEmploymentPayFrequencyValue._Serializer.class)
public class UpdateEmployeeApiModelEmploymentPayFrequencyValue {

    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue HOURLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("hourly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue WEEKLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("weekly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue BI_WEEKLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("bi_weekly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue FOUR_WEEKLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("four_weekly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue SEMI_MONTHLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("semi_monthly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue MONTHLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("monthly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue BI_MONTHLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("bi_monthly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue QUARTERLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("quarterly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue SEMI_ANNUALLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("semi_annually");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue YEARLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("yearly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue THIRTEEN_MONTHLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("thirteen_monthly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue PRO_RATA = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("pro_rata");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue UNMAPPED_VALUE = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("unmapped_value");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue HALF_YEARLY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("half_yearly");
    public static final UpdateEmployeeApiModelEmploymentPayFrequencyValue DAILY = new UpdateEmployeeApiModelEmploymentPayFrequencyValue("daily");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, UpdateEmployeeApiModelEmploymentPayFrequencyValue> values = createValuesMap();
    private static final Map<String, UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum> enums = createEnumsMap();

    private final String value;

    private UpdateEmployeeApiModelEmploymentPayFrequencyValue(String value) {
        this.value = value;
    }

    /**
     * Returns a UpdateEmployeeApiModelEmploymentPayFrequencyValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as UpdateEmployeeApiModelEmploymentPayFrequencyValue
     */ 
    public static UpdateEmployeeApiModelEmploymentPayFrequencyValue of(String value) {
        synchronized (UpdateEmployeeApiModelEmploymentPayFrequencyValue.class) {
            return values.computeIfAbsent(value, v -> new UpdateEmployeeApiModelEmploymentPayFrequencyValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        UpdateEmployeeApiModelEmploymentPayFrequencyValue other = (UpdateEmployeeApiModelEmploymentPayFrequencyValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "UpdateEmployeeApiModelEmploymentPayFrequencyValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static UpdateEmployeeApiModelEmploymentPayFrequencyValue[] values() {
        synchronized (UpdateEmployeeApiModelEmploymentPayFrequencyValue.class) {
            return values.values().toArray(new UpdateEmployeeApiModelEmploymentPayFrequencyValue[] {});
        }
    }

    private static final Map<String, UpdateEmployeeApiModelEmploymentPayFrequencyValue> createValuesMap() {
        Map<String, UpdateEmployeeApiModelEmploymentPayFrequencyValue> map = new LinkedHashMap<>();
        map.put("hourly", HOURLY);
        map.put("weekly", WEEKLY);
        map.put("bi_weekly", BI_WEEKLY);
        map.put("four_weekly", FOUR_WEEKLY);
        map.put("semi_monthly", SEMI_MONTHLY);
        map.put("monthly", MONTHLY);
        map.put("bi_monthly", BI_MONTHLY);
        map.put("quarterly", QUARTERLY);
        map.put("semi_annually", SEMI_ANNUALLY);
        map.put("yearly", YEARLY);
        map.put("thirteen_monthly", THIRTEEN_MONTHLY);
        map.put("pro_rata", PRO_RATA);
        map.put("unmapped_value", UNMAPPED_VALUE);
        map.put("half_yearly", HALF_YEARLY);
        map.put("daily", DAILY);
        return map;
    }

    private static final Map<String, UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum> createEnumsMap() {
        Map<String, UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum> map = new HashMap<>();
        map.put("hourly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.HOURLY);
        map.put("weekly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.WEEKLY);
        map.put("bi_weekly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.BI_WEEKLY);
        map.put("four_weekly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.FOUR_WEEKLY);
        map.put("semi_monthly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.SEMI_MONTHLY);
        map.put("monthly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.MONTHLY);
        map.put("bi_monthly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.BI_MONTHLY);
        map.put("quarterly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.QUARTERLY);
        map.put("semi_annually", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.SEMI_ANNUALLY);
        map.put("yearly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.YEARLY);
        map.put("thirteen_monthly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.THIRTEEN_MONTHLY);
        map.put("pro_rata", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.PRO_RATA);
        map.put("unmapped_value", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.UNMAPPED_VALUE);
        map.put("half_yearly", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.HALF_YEARLY);
        map.put("daily", UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum.DAILY);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<UpdateEmployeeApiModelEmploymentPayFrequencyValue> {

        protected _Serializer() {
            super(UpdateEmployeeApiModelEmploymentPayFrequencyValue.class);
        }

        @Override
        public void serialize(UpdateEmployeeApiModelEmploymentPayFrequencyValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<UpdateEmployeeApiModelEmploymentPayFrequencyValue> {

        protected _Deserializer() {
            super(UpdateEmployeeApiModelEmploymentPayFrequencyValue.class);
        }

        @Override
        public UpdateEmployeeApiModelEmploymentPayFrequencyValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return UpdateEmployeeApiModelEmploymentPayFrequencyValue.of(v);
        }
    }
    
    public enum UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum {

        HOURLY("hourly"),
        WEEKLY("weekly"),
        BI_WEEKLY("bi_weekly"),
        FOUR_WEEKLY("four_weekly"),
        SEMI_MONTHLY("semi_monthly"),
        MONTHLY("monthly"),
        BI_MONTHLY("bi_monthly"),
        QUARTERLY("quarterly"),
        SEMI_ANNUALLY("semi_annually"),
        YEARLY("yearly"),
        THIRTEEN_MONTHLY("thirteen_monthly"),
        PRO_RATA("pro_rata"),
        UNMAPPED_VALUE("unmapped_value"),
        HALF_YEARLY("half_yearly"),
        DAILY("daily"),;

        private final String value;

        private UpdateEmployeeApiModelEmploymentPayFrequencyValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}
