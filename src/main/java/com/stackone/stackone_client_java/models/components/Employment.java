/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.stackone.stackone_client_java.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class Employment {

    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Provider's unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_id")
    private JsonNullable<String> remoteId;

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_custom_fields")
    private JsonNullable<? extends Map<String, Object>> unifiedCustomFields;

    /**
     * The employee ID associated with this employment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_id")
    private JsonNullable<String> employeeId;

    /**
     * Provider's unique identifier of the employee associated with this employment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_employee_id")
    private JsonNullable<String> remoteEmployeeId;

    /**
     * The job title of the employee
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_title")
    @Deprecated
    private JsonNullable<String> jobTitle;

    /**
     * The pay rate for the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_rate")
    private JsonNullable<String> payRate;

    /**
     * The pay period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_period")
    private JsonNullable<? extends PayPeriod> payPeriod;

    /**
     * The pay frequency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_frequency")
    private JsonNullable<? extends PayFrequency> payFrequency;

    /**
     * The currency used for pay
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_currency")
    private JsonNullable<String> payCurrency;

    /**
     * The effective date of the employment contract
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_date")
    private JsonNullable<OffsetDateTime> effectiveDate;

    /**
     * The type of employment (e.g., contractor, permanent)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_type")
    @Deprecated
    private JsonNullable<? extends EmploymentEmploymentType> employmentType;

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_contract_type")
    @Deprecated
    private JsonNullable<? extends EmploymentEmploymentContractType> employmentContractType;

    /**
     * The time worked for the employee in ISO 8601 duration format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_worked")
    private JsonNullable<String> timeWorked;

    /**
     * The created_at date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The updated_at date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    /**
     * The start_date of employment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<OffsetDateTime> startDate;

    /**
     * The end_date of employment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<OffsetDateTime> endDate;

    /**
     * The employment active status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private JsonNullable<Boolean> active;

    /**
     * The employee department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private JsonNullable<? extends Department> department;

    /**
     * The employee cost_center
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_center")
    @Deprecated
    private JsonNullable<? extends CostCenter> costCenter;

    /**
     * The employee cost_centers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_centers")
    private JsonNullable<? extends List<HRISCostCenter>> costCenters;

    /**
     * The employee division
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division")
    private JsonNullable<? extends Division> division;

    /**
     * The job of employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job")
    private JsonNullable<? extends EmploymentJob> job;

    /**
     * The type of employment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends EmploymentType1> type;

    /**
     * The employment work schedule type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contract_type")
    private JsonNullable<? extends ContractType> contractType;

    /**
     * The employee manager
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private JsonNullable<? extends List<EmploymentManagerApiModel>> manager;

    @JsonCreator
    public Employment(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("remote_id") JsonNullable<String> remoteId,
            @JsonProperty("unified_custom_fields") JsonNullable<? extends Map<String, Object>> unifiedCustomFields,
            @JsonProperty("employee_id") JsonNullable<String> employeeId,
            @JsonProperty("remote_employee_id") JsonNullable<String> remoteEmployeeId,
            @JsonProperty("job_title") JsonNullable<String> jobTitle,
            @JsonProperty("pay_rate") JsonNullable<String> payRate,
            @JsonProperty("pay_period") JsonNullable<? extends PayPeriod> payPeriod,
            @JsonProperty("pay_frequency") JsonNullable<? extends PayFrequency> payFrequency,
            @JsonProperty("pay_currency") JsonNullable<String> payCurrency,
            @JsonProperty("effective_date") JsonNullable<OffsetDateTime> effectiveDate,
            @JsonProperty("employment_type") JsonNullable<? extends EmploymentEmploymentType> employmentType,
            @JsonProperty("employment_contract_type") JsonNullable<? extends EmploymentEmploymentContractType> employmentContractType,
            @JsonProperty("time_worked") JsonNullable<String> timeWorked,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt,
            @JsonProperty("start_date") JsonNullable<OffsetDateTime> startDate,
            @JsonProperty("end_date") JsonNullable<OffsetDateTime> endDate,
            @JsonProperty("active") JsonNullable<Boolean> active,
            @JsonProperty("department") JsonNullable<? extends Department> department,
            @JsonProperty("cost_center") JsonNullable<? extends CostCenter> costCenter,
            @JsonProperty("cost_centers") JsonNullable<? extends List<HRISCostCenter>> costCenters,
            @JsonProperty("division") JsonNullable<? extends Division> division,
            @JsonProperty("job") JsonNullable<? extends EmploymentJob> job,
            @JsonProperty("type") JsonNullable<? extends EmploymentType1> type,
            @JsonProperty("contract_type") JsonNullable<? extends ContractType> contractType,
            @JsonProperty("manager") JsonNullable<? extends List<EmploymentManagerApiModel>> manager) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(remoteId, "remoteId");
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        Utils.checkNotNull(employeeId, "employeeId");
        Utils.checkNotNull(remoteEmployeeId, "remoteEmployeeId");
        Utils.checkNotNull(jobTitle, "jobTitle");
        Utils.checkNotNull(payRate, "payRate");
        Utils.checkNotNull(payPeriod, "payPeriod");
        Utils.checkNotNull(payFrequency, "payFrequency");
        Utils.checkNotNull(payCurrency, "payCurrency");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(employmentType, "employmentType");
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        Utils.checkNotNull(timeWorked, "timeWorked");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(costCenter, "costCenter");
        Utils.checkNotNull(costCenters, "costCenters");
        Utils.checkNotNull(division, "division");
        Utils.checkNotNull(job, "job");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(contractType, "contractType");
        Utils.checkNotNull(manager, "manager");
        this.id = id;
        this.remoteId = remoteId;
        this.unifiedCustomFields = unifiedCustomFields;
        this.employeeId = employeeId;
        this.remoteEmployeeId = remoteEmployeeId;
        this.jobTitle = jobTitle;
        this.payRate = payRate;
        this.payPeriod = payPeriod;
        this.payFrequency = payFrequency;
        this.payCurrency = payCurrency;
        this.effectiveDate = effectiveDate;
        this.employmentType = employmentType;
        this.employmentContractType = employmentContractType;
        this.timeWorked = timeWorked;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.startDate = startDate;
        this.endDate = endDate;
        this.active = active;
        this.department = department;
        this.costCenter = costCenter;
        this.costCenters = costCenters;
        this.division = division;
        this.job = job;
        this.type = type;
        this.contractType = contractType;
        this.manager = manager;
    }
    
    public Employment() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Provider's unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> remoteId() {
        return remoteId;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> unifiedCustomFields() {
        return (JsonNullable<Map<String, Object>>) unifiedCustomFields;
    }

    /**
     * The employee ID associated with this employment
     */
    @JsonIgnore
    public JsonNullable<String> employeeId() {
        return employeeId;
    }

    /**
     * Provider's unique identifier of the employee associated with this employment
     */
    @JsonIgnore
    public JsonNullable<String> remoteEmployeeId() {
        return remoteEmployeeId;
    }

    /**
     * The job title of the employee
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> jobTitle() {
        return jobTitle;
    }

    /**
     * The pay rate for the employee
     */
    @JsonIgnore
    public JsonNullable<String> payRate() {
        return payRate;
    }

    /**
     * The pay period
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayPeriod> payPeriod() {
        return (JsonNullable<PayPeriod>) payPeriod;
    }

    /**
     * The pay frequency
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayFrequency> payFrequency() {
        return (JsonNullable<PayFrequency>) payFrequency;
    }

    /**
     * The currency used for pay
     */
    @JsonIgnore
    public JsonNullable<String> payCurrency() {
        return payCurrency;
    }

    /**
     * The effective date of the employment contract
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> effectiveDate() {
        return effectiveDate;
    }

    /**
     * The type of employment (e.g., contractor, permanent)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentEmploymentType> employmentType() {
        return (JsonNullable<EmploymentEmploymentType>) employmentType;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentEmploymentContractType> employmentContractType() {
        return (JsonNullable<EmploymentEmploymentContractType>) employmentContractType;
    }

    /**
     * The time worked for the employee in ISO 8601 duration format
     */
    @JsonIgnore
    public JsonNullable<String> timeWorked() {
        return timeWorked;
    }

    /**
     * The created_at date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The updated_at date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The start_date of employment
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * The end_date of employment
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> endDate() {
        return endDate;
    }

    /**
     * The employment active status
     */
    @JsonIgnore
    public JsonNullable<Boolean> active() {
        return active;
    }

    /**
     * The employee department
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Department> department() {
        return (JsonNullable<Department>) department;
    }

    /**
     * The employee cost_center
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CostCenter> costCenter() {
        return (JsonNullable<CostCenter>) costCenter;
    }

    /**
     * The employee cost_centers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<HRISCostCenter>> costCenters() {
        return (JsonNullable<List<HRISCostCenter>>) costCenters;
    }

    /**
     * The employee division
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Division> division() {
        return (JsonNullable<Division>) division;
    }

    /**
     * The job of employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentJob> job() {
        return (JsonNullable<EmploymentJob>) job;
    }

    /**
     * The type of employment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentType1> type() {
        return (JsonNullable<EmploymentType1>) type;
    }

    /**
     * The employment work schedule type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ContractType> contractType() {
        return (JsonNullable<ContractType>) contractType;
    }

    /**
     * The employee manager
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<EmploymentManagerApiModel>> manager() {
        return (JsonNullable<List<EmploymentManagerApiModel>>) manager;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier
     */
    public Employment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public Employment withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public Employment withRemoteId(String remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = JsonNullable.of(remoteId);
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public Employment withRemoteId(JsonNullable<String> remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = remoteId;
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public Employment withUnifiedCustomFields(Map<String, Object> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public Employment withUnifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = unifiedCustomFields;
        return this;
    }

    /**
     * The employee ID associated with this employment
     */
    public Employment withEmployeeId(String employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = JsonNullable.of(employeeId);
        return this;
    }

    /**
     * The employee ID associated with this employment
     */
    public Employment withEmployeeId(JsonNullable<String> employeeId) {
        Utils.checkNotNull(employeeId, "employeeId");
        this.employeeId = employeeId;
        return this;
    }

    /**
     * Provider's unique identifier of the employee associated with this employment
     */
    public Employment withRemoteEmployeeId(String remoteEmployeeId) {
        Utils.checkNotNull(remoteEmployeeId, "remoteEmployeeId");
        this.remoteEmployeeId = JsonNullable.of(remoteEmployeeId);
        return this;
    }

    /**
     * Provider's unique identifier of the employee associated with this employment
     */
    public Employment withRemoteEmployeeId(JsonNullable<String> remoteEmployeeId) {
        Utils.checkNotNull(remoteEmployeeId, "remoteEmployeeId");
        this.remoteEmployeeId = remoteEmployeeId;
        return this;
    }

    /**
     * The job title of the employee
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withJobTitle(String jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = JsonNullable.of(jobTitle);
        return this;
    }

    /**
     * The job title of the employee
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withJobTitle(JsonNullable<String> jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = jobTitle;
        return this;
    }

    /**
     * The pay rate for the employee
     */
    public Employment withPayRate(String payRate) {
        Utils.checkNotNull(payRate, "payRate");
        this.payRate = JsonNullable.of(payRate);
        return this;
    }

    /**
     * The pay rate for the employee
     */
    public Employment withPayRate(JsonNullable<String> payRate) {
        Utils.checkNotNull(payRate, "payRate");
        this.payRate = payRate;
        return this;
    }

    /**
     * The pay period
     */
    public Employment withPayPeriod(PayPeriod payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = JsonNullable.of(payPeriod);
        return this;
    }

    /**
     * The pay period
     */
    public Employment withPayPeriod(JsonNullable<? extends PayPeriod> payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = payPeriod;
        return this;
    }

    /**
     * The pay frequency
     */
    public Employment withPayFrequency(PayFrequency payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = JsonNullable.of(payFrequency);
        return this;
    }

    /**
     * The pay frequency
     */
    public Employment withPayFrequency(JsonNullable<? extends PayFrequency> payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = payFrequency;
        return this;
    }

    /**
     * The currency used for pay
     */
    public Employment withPayCurrency(String payCurrency) {
        Utils.checkNotNull(payCurrency, "payCurrency");
        this.payCurrency = JsonNullable.of(payCurrency);
        return this;
    }

    /**
     * The currency used for pay
     */
    public Employment withPayCurrency(JsonNullable<String> payCurrency) {
        Utils.checkNotNull(payCurrency, "payCurrency");
        this.payCurrency = payCurrency;
        return this;
    }

    /**
     * The effective date of the employment contract
     */
    public Employment withEffectiveDate(OffsetDateTime effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = JsonNullable.of(effectiveDate);
        return this;
    }

    /**
     * The effective date of the employment contract
     */
    public Employment withEffectiveDate(JsonNullable<OffsetDateTime> effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * The type of employment (e.g., contractor, permanent)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withEmploymentType(EmploymentEmploymentType employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = JsonNullable.of(employmentType);
        return this;
    }

    /**
     * The type of employment (e.g., contractor, permanent)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withEmploymentType(JsonNullable<? extends EmploymentEmploymentType> employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = employmentType;
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withEmploymentContractType(EmploymentEmploymentContractType employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = JsonNullable.of(employmentContractType);
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withEmploymentContractType(JsonNullable<? extends EmploymentEmploymentContractType> employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = employmentContractType;
        return this;
    }

    /**
     * The time worked for the employee in ISO 8601 duration format
     */
    public Employment withTimeWorked(String timeWorked) {
        Utils.checkNotNull(timeWorked, "timeWorked");
        this.timeWorked = JsonNullable.of(timeWorked);
        return this;
    }

    /**
     * The time worked for the employee in ISO 8601 duration format
     */
    public Employment withTimeWorked(JsonNullable<String> timeWorked) {
        Utils.checkNotNull(timeWorked, "timeWorked");
        this.timeWorked = timeWorked;
        return this;
    }

    /**
     * The created_at date
     */
    public Employment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The created_at date
     */
    public Employment withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The updated_at date
     */
    public Employment withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The updated_at date
     */
    public Employment withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The start_date of employment
     */
    public Employment withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * The start_date of employment
     */
    public Employment withStartDate(JsonNullable<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The end_date of employment
     */
    public Employment withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = JsonNullable.of(endDate);
        return this;
    }

    /**
     * The end_date of employment
     */
    public Employment withEndDate(JsonNullable<OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The employment active status
     */
    public Employment withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = JsonNullable.of(active);
        return this;
    }

    /**
     * The employment active status
     */
    public Employment withActive(JsonNullable<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The employee department
     */
    public Employment withDepartment(Department department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * The employee department
     */
    public Employment withDepartment(JsonNullable<? extends Department> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * The employee cost_center
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withCostCenter(CostCenter costCenter) {
        Utils.checkNotNull(costCenter, "costCenter");
        this.costCenter = JsonNullable.of(costCenter);
        return this;
    }

    /**
     * The employee cost_center
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employment withCostCenter(JsonNullable<? extends CostCenter> costCenter) {
        Utils.checkNotNull(costCenter, "costCenter");
        this.costCenter = costCenter;
        return this;
    }

    /**
     * The employee cost_centers
     */
    public Employment withCostCenters(List<HRISCostCenter> costCenters) {
        Utils.checkNotNull(costCenters, "costCenters");
        this.costCenters = JsonNullable.of(costCenters);
        return this;
    }

    /**
     * The employee cost_centers
     */
    public Employment withCostCenters(JsonNullable<? extends List<HRISCostCenter>> costCenters) {
        Utils.checkNotNull(costCenters, "costCenters");
        this.costCenters = costCenters;
        return this;
    }

    /**
     * The employee division
     */
    public Employment withDivision(Division division) {
        Utils.checkNotNull(division, "division");
        this.division = JsonNullable.of(division);
        return this;
    }

    /**
     * The employee division
     */
    public Employment withDivision(JsonNullable<? extends Division> division) {
        Utils.checkNotNull(division, "division");
        this.division = division;
        return this;
    }

    /**
     * The job of employee
     */
    public Employment withJob(EmploymentJob job) {
        Utils.checkNotNull(job, "job");
        this.job = JsonNullable.of(job);
        return this;
    }

    /**
     * The job of employee
     */
    public Employment withJob(JsonNullable<? extends EmploymentJob> job) {
        Utils.checkNotNull(job, "job");
        this.job = job;
        return this;
    }

    /**
     * The type of employment
     */
    public Employment withType(EmploymentType1 type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of employment
     */
    public Employment withType(JsonNullable<? extends EmploymentType1> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The employment work schedule type
     */
    public Employment withContractType(ContractType contractType) {
        Utils.checkNotNull(contractType, "contractType");
        this.contractType = JsonNullable.of(contractType);
        return this;
    }

    /**
     * The employment work schedule type
     */
    public Employment withContractType(JsonNullable<? extends ContractType> contractType) {
        Utils.checkNotNull(contractType, "contractType");
        this.contractType = contractType;
        return this;
    }

    /**
     * The employee manager
     */
    public Employment withManager(List<EmploymentManagerApiModel> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = JsonNullable.of(manager);
        return this;
    }

    /**
     * The employee manager
     */
    public Employment withManager(JsonNullable<? extends List<EmploymentManagerApiModel>> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = manager;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Employment other = (Employment) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.remoteId, other.remoteId) &&
            Objects.deepEquals(this.unifiedCustomFields, other.unifiedCustomFields) &&
            Objects.deepEquals(this.employeeId, other.employeeId) &&
            Objects.deepEquals(this.remoteEmployeeId, other.remoteEmployeeId) &&
            Objects.deepEquals(this.jobTitle, other.jobTitle) &&
            Objects.deepEquals(this.payRate, other.payRate) &&
            Objects.deepEquals(this.payPeriod, other.payPeriod) &&
            Objects.deepEquals(this.payFrequency, other.payFrequency) &&
            Objects.deepEquals(this.payCurrency, other.payCurrency) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate) &&
            Objects.deepEquals(this.employmentType, other.employmentType) &&
            Objects.deepEquals(this.employmentContractType, other.employmentContractType) &&
            Objects.deepEquals(this.timeWorked, other.timeWorked) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.costCenter, other.costCenter) &&
            Objects.deepEquals(this.costCenters, other.costCenters) &&
            Objects.deepEquals(this.division, other.division) &&
            Objects.deepEquals(this.job, other.job) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.contractType, other.contractType) &&
            Objects.deepEquals(this.manager, other.manager);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            remoteId,
            unifiedCustomFields,
            employeeId,
            remoteEmployeeId,
            jobTitle,
            payRate,
            payPeriod,
            payFrequency,
            payCurrency,
            effectiveDate,
            employmentType,
            employmentContractType,
            timeWorked,
            createdAt,
            updatedAt,
            startDate,
            endDate,
            active,
            department,
            costCenter,
            costCenters,
            division,
            job,
            type,
            contractType,
            manager);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Employment.class,
                "id", id,
                "remoteId", remoteId,
                "unifiedCustomFields", unifiedCustomFields,
                "employeeId", employeeId,
                "remoteEmployeeId", remoteEmployeeId,
                "jobTitle", jobTitle,
                "payRate", payRate,
                "payPeriod", payPeriod,
                "payFrequency", payFrequency,
                "payCurrency", payCurrency,
                "effectiveDate", effectiveDate,
                "employmentType", employmentType,
                "employmentContractType", employmentContractType,
                "timeWorked", timeWorked,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "startDate", startDate,
                "endDate", endDate,
                "active", active,
                "department", department,
                "costCenter", costCenter,
                "costCenters", costCenters,
                "division", division,
                "job", job,
                "type", type,
                "contractType", contractType,
                "manager", manager);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<String> remoteId = JsonNullable.undefined();
 
        private JsonNullable<? extends Map<String, Object>> unifiedCustomFields = JsonNullable.undefined();
 
        private JsonNullable<String> employeeId = JsonNullable.undefined();
 
        private JsonNullable<String> remoteEmployeeId = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<String> jobTitle = JsonNullable.undefined();
 
        private JsonNullable<String> payRate = JsonNullable.undefined();
 
        private JsonNullable<? extends PayPeriod> payPeriod = JsonNullable.undefined();
 
        private JsonNullable<? extends PayFrequency> payFrequency = JsonNullable.undefined();
 
        private JsonNullable<String> payCurrency = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> effectiveDate = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends EmploymentEmploymentType> employmentType = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends EmploymentEmploymentContractType> employmentContractType = JsonNullable.undefined();
 
        private JsonNullable<String> timeWorked = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> startDate = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> endDate = JsonNullable.undefined();
 
        private JsonNullable<Boolean> active = JsonNullable.undefined();
 
        private JsonNullable<? extends Department> department = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends CostCenter> costCenter = JsonNullable.undefined();
 
        private JsonNullable<? extends List<HRISCostCenter>> costCenters = JsonNullable.undefined();
 
        private JsonNullable<? extends Division> division = JsonNullable.undefined();
 
        private JsonNullable<? extends EmploymentJob> job = JsonNullable.undefined();
 
        private JsonNullable<? extends EmploymentType1> type = JsonNullable.undefined();
 
        private JsonNullable<? extends ContractType> contractType = JsonNullable.undefined();
 
        private JsonNullable<? extends List<EmploymentManagerApiModel>> manager = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(String remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = JsonNullable.of(remoteId);
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(JsonNullable<String> remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = remoteId;
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(Map<String, Object> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = unifiedCustomFields;
            return this;
        }

        /**
         * The employee ID associated with this employment
         */
        public Builder employeeId(String employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = JsonNullable.of(employeeId);
            return this;
        }

        /**
         * The employee ID associated with this employment
         */
        public Builder employeeId(JsonNullable<String> employeeId) {
            Utils.checkNotNull(employeeId, "employeeId");
            this.employeeId = employeeId;
            return this;
        }

        /**
         * Provider's unique identifier of the employee associated with this employment
         */
        public Builder remoteEmployeeId(String remoteEmployeeId) {
            Utils.checkNotNull(remoteEmployeeId, "remoteEmployeeId");
            this.remoteEmployeeId = JsonNullable.of(remoteEmployeeId);
            return this;
        }

        /**
         * Provider's unique identifier of the employee associated with this employment
         */
        public Builder remoteEmployeeId(JsonNullable<String> remoteEmployeeId) {
            Utils.checkNotNull(remoteEmployeeId, "remoteEmployeeId");
            this.remoteEmployeeId = remoteEmployeeId;
            return this;
        }

        /**
         * The job title of the employee
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobTitle(String jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = JsonNullable.of(jobTitle);
            return this;
        }

        /**
         * The job title of the employee
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobTitle(JsonNullable<String> jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = jobTitle;
            return this;
        }

        /**
         * The pay rate for the employee
         */
        public Builder payRate(String payRate) {
            Utils.checkNotNull(payRate, "payRate");
            this.payRate = JsonNullable.of(payRate);
            return this;
        }

        /**
         * The pay rate for the employee
         */
        public Builder payRate(JsonNullable<String> payRate) {
            Utils.checkNotNull(payRate, "payRate");
            this.payRate = payRate;
            return this;
        }

        /**
         * The pay period
         */
        public Builder payPeriod(PayPeriod payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = JsonNullable.of(payPeriod);
            return this;
        }

        /**
         * The pay period
         */
        public Builder payPeriod(JsonNullable<? extends PayPeriod> payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = payPeriod;
            return this;
        }

        /**
         * The pay frequency
         */
        public Builder payFrequency(PayFrequency payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = JsonNullable.of(payFrequency);
            return this;
        }

        /**
         * The pay frequency
         */
        public Builder payFrequency(JsonNullable<? extends PayFrequency> payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = payFrequency;
            return this;
        }

        /**
         * The currency used for pay
         */
        public Builder payCurrency(String payCurrency) {
            Utils.checkNotNull(payCurrency, "payCurrency");
            this.payCurrency = JsonNullable.of(payCurrency);
            return this;
        }

        /**
         * The currency used for pay
         */
        public Builder payCurrency(JsonNullable<String> payCurrency) {
            Utils.checkNotNull(payCurrency, "payCurrency");
            this.payCurrency = payCurrency;
            return this;
        }

        /**
         * The effective date of the employment contract
         */
        public Builder effectiveDate(OffsetDateTime effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = JsonNullable.of(effectiveDate);
            return this;
        }

        /**
         * The effective date of the employment contract
         */
        public Builder effectiveDate(JsonNullable<OffsetDateTime> effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * The type of employment (e.g., contractor, permanent)
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(EmploymentEmploymentType employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = JsonNullable.of(employmentType);
            return this;
        }

        /**
         * The type of employment (e.g., contractor, permanent)
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(JsonNullable<? extends EmploymentEmploymentType> employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = employmentType;
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(EmploymentEmploymentContractType employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = JsonNullable.of(employmentContractType);
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(JsonNullable<? extends EmploymentEmploymentContractType> employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = employmentContractType;
            return this;
        }

        /**
         * The time worked for the employee in ISO 8601 duration format
         */
        public Builder timeWorked(String timeWorked) {
            Utils.checkNotNull(timeWorked, "timeWorked");
            this.timeWorked = JsonNullable.of(timeWorked);
            return this;
        }

        /**
         * The time worked for the employee in ISO 8601 duration format
         */
        public Builder timeWorked(JsonNullable<String> timeWorked) {
            Utils.checkNotNull(timeWorked, "timeWorked");
            this.timeWorked = timeWorked;
            return this;
        }

        /**
         * The created_at date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The created_at date
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The updated_at date
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The updated_at date
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The start_date of employment
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The start_date of employment
         */
        public Builder startDate(JsonNullable<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The end_date of employment
         */
        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * The end_date of employment
         */
        public Builder endDate(JsonNullable<OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * The employment active status
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = JsonNullable.of(active);
            return this;
        }

        /**
         * The employment active status
         */
        public Builder active(JsonNullable<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The employee department
         */
        public Builder department(Department department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The employee department
         */
        public Builder department(JsonNullable<? extends Department> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * The employee cost_center
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder costCenter(CostCenter costCenter) {
            Utils.checkNotNull(costCenter, "costCenter");
            this.costCenter = JsonNullable.of(costCenter);
            return this;
        }

        /**
         * The employee cost_center
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder costCenter(JsonNullable<? extends CostCenter> costCenter) {
            Utils.checkNotNull(costCenter, "costCenter");
            this.costCenter = costCenter;
            return this;
        }

        /**
         * The employee cost_centers
         */
        public Builder costCenters(List<HRISCostCenter> costCenters) {
            Utils.checkNotNull(costCenters, "costCenters");
            this.costCenters = JsonNullable.of(costCenters);
            return this;
        }

        /**
         * The employee cost_centers
         */
        public Builder costCenters(JsonNullable<? extends List<HRISCostCenter>> costCenters) {
            Utils.checkNotNull(costCenters, "costCenters");
            this.costCenters = costCenters;
            return this;
        }

        /**
         * The employee division
         */
        public Builder division(Division division) {
            Utils.checkNotNull(division, "division");
            this.division = JsonNullable.of(division);
            return this;
        }

        /**
         * The employee division
         */
        public Builder division(JsonNullable<? extends Division> division) {
            Utils.checkNotNull(division, "division");
            this.division = division;
            return this;
        }

        /**
         * The job of employee
         */
        public Builder job(EmploymentJob job) {
            Utils.checkNotNull(job, "job");
            this.job = JsonNullable.of(job);
            return this;
        }

        /**
         * The job of employee
         */
        public Builder job(JsonNullable<? extends EmploymentJob> job) {
            Utils.checkNotNull(job, "job");
            this.job = job;
            return this;
        }

        /**
         * The type of employment
         */
        public Builder type(EmploymentType1 type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of employment
         */
        public Builder type(JsonNullable<? extends EmploymentType1> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The employment work schedule type
         */
        public Builder contractType(ContractType contractType) {
            Utils.checkNotNull(contractType, "contractType");
            this.contractType = JsonNullable.of(contractType);
            return this;
        }

        /**
         * The employment work schedule type
         */
        public Builder contractType(JsonNullable<? extends ContractType> contractType) {
            Utils.checkNotNull(contractType, "contractType");
            this.contractType = contractType;
            return this;
        }

        /**
         * The employee manager
         */
        public Builder manager(List<EmploymentManagerApiModel> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = JsonNullable.of(manager);
            return this;
        }

        /**
         * The employee manager
         */
        public Builder manager(JsonNullable<? extends List<EmploymentManagerApiModel>> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = manager;
            return this;
        }
        
        public Employment build() {
            return new Employment(
                id,
                remoteId,
                unifiedCustomFields,
                employeeId,
                remoteEmployeeId,
                jobTitle,
                payRate,
                payPeriod,
                payFrequency,
                payCurrency,
                effectiveDate,
                employmentType,
                employmentContractType,
                timeWorked,
                createdAt,
                updatedAt,
                startDate,
                endDate,
                active,
                department,
                costCenter,
                costCenters,
                division,
                job,
                type,
                contractType,
                manager);
        }
    }
}

