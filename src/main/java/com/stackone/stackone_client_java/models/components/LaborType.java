/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * LaborType
 * 
 * <p>The labor type associated with this time entry
 */
public class LaborType {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<String> code;

    @JsonCreator
    public LaborType(
            @JsonProperty("code") JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
    }
    
    public LaborType() {
        this(JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> code() {
        return code;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public LaborType withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    public LaborType withCode(JsonNullable<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LaborType other = (LaborType) o;
        return 
            Objects.deepEquals(this.code, other.code);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LaborType.class,
                "code", code);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> code = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        public Builder code(JsonNullable<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }
        
        public LaborType build() {
            return new LaborType(
                code);
        }
    }
}
