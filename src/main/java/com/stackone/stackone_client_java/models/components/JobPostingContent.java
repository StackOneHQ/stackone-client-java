/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

public class JobPostingContent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plain")
    private JsonNullable<String> plain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html")
    private JsonNullable<String> html;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sections")
    private JsonNullable<? extends List<JobPostingContentSection>> sections;

    @JsonCreator
    public JobPostingContent(
            @JsonProperty("plain") JsonNullable<String> plain,
            @JsonProperty("html") JsonNullable<String> html,
            @JsonProperty("sections") JsonNullable<? extends List<JobPostingContentSection>> sections) {
        Utils.checkNotNull(plain, "plain");
        Utils.checkNotNull(html, "html");
        Utils.checkNotNull(sections, "sections");
        this.plain = plain;
        this.html = html;
        this.sections = sections;
    }
    
    public JobPostingContent() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> plain() {
        return plain;
    }

    @JsonIgnore
    public JsonNullable<String> html() {
        return html;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<JobPostingContentSection>> sections() {
        return (JsonNullable<List<JobPostingContentSection>>) sections;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public JobPostingContent withPlain(String plain) {
        Utils.checkNotNull(plain, "plain");
        this.plain = JsonNullable.of(plain);
        return this;
    }

    public JobPostingContent withPlain(JsonNullable<String> plain) {
        Utils.checkNotNull(plain, "plain");
        this.plain = plain;
        return this;
    }

    public JobPostingContent withHtml(String html) {
        Utils.checkNotNull(html, "html");
        this.html = JsonNullable.of(html);
        return this;
    }

    public JobPostingContent withHtml(JsonNullable<String> html) {
        Utils.checkNotNull(html, "html");
        this.html = html;
        return this;
    }

    public JobPostingContent withSections(List<JobPostingContentSection> sections) {
        Utils.checkNotNull(sections, "sections");
        this.sections = JsonNullable.of(sections);
        return this;
    }

    public JobPostingContent withSections(JsonNullable<? extends List<JobPostingContentSection>> sections) {
        Utils.checkNotNull(sections, "sections");
        this.sections = sections;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobPostingContent other = (JobPostingContent) o;
        return 
            Utils.enhancedDeepEquals(this.plain, other.plain) &&
            Utils.enhancedDeepEquals(this.html, other.html) &&
            Utils.enhancedDeepEquals(this.sections, other.sections);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            plain,
            html,
            sections);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JobPostingContent.class,
                "plain", plain,
                "html", html,
                "sections", sections);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> plain = JsonNullable.undefined();
 
        private JsonNullable<String> html = JsonNullable.undefined();
 
        private JsonNullable<? extends List<JobPostingContentSection>> sections = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder plain(String plain) {
            Utils.checkNotNull(plain, "plain");
            this.plain = JsonNullable.of(plain);
            return this;
        }

        public Builder plain(JsonNullable<String> plain) {
            Utils.checkNotNull(plain, "plain");
            this.plain = plain;
            return this;
        }

        public Builder html(String html) {
            Utils.checkNotNull(html, "html");
            this.html = JsonNullable.of(html);
            return this;
        }

        public Builder html(JsonNullable<String> html) {
            Utils.checkNotNull(html, "html");
            this.html = html;
            return this;
        }

        public Builder sections(List<JobPostingContentSection> sections) {
            Utils.checkNotNull(sections, "sections");
            this.sections = JsonNullable.of(sections);
            return this;
        }

        public Builder sections(JsonNullable<? extends List<JobPostingContentSection>> sections) {
            Utils.checkNotNull(sections, "sections");
            this.sections = sections;
            return this;
        }
        
        public JobPostingContent build() {
            return new JobPostingContent(
                plain,
                html,
                sections);
        }
    }
}
