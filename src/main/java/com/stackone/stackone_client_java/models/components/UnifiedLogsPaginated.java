/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class UnifiedLogsPaginated {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    private JsonNullable<String> next;

    @JsonProperty("data")
    private List<UnifiedLogsPartial> data;

    @JsonCreator
    public UnifiedLogsPaginated(
            @JsonProperty("next") JsonNullable<String> next,
            @JsonProperty("data") List<UnifiedLogsPartial> data) {
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(data, "data");
        this.next = next;
        this.data = data;
    }
    
    public UnifiedLogsPaginated(
            List<UnifiedLogsPartial> data) {
        this(JsonNullable.undefined(), data);
    }

    @JsonIgnore
    public JsonNullable<String> next() {
        return next;
    }

    @JsonIgnore
    public List<UnifiedLogsPartial> data() {
        return data;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UnifiedLogsPaginated withNext(String next) {
        Utils.checkNotNull(next, "next");
        this.next = JsonNullable.of(next);
        return this;
    }

    public UnifiedLogsPaginated withNext(JsonNullable<String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    public UnifiedLogsPaginated withData(List<UnifiedLogsPartial> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnifiedLogsPaginated other = (UnifiedLogsPaginated) o;
        return 
            Objects.deepEquals(this.next, other.next) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            next,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnifiedLogsPaginated.class,
                "next", next,
                "data", data);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> next = JsonNullable.undefined();
 
        private List<UnifiedLogsPartial> data;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder next(String next) {
            Utils.checkNotNull(next, "next");
            this.next = JsonNullable.of(next);
            return this;
        }

        public Builder next(JsonNullable<String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }

        public Builder data(List<UnifiedLogsPartial> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public UnifiedLogsPaginated build() {
            return new UnifiedLogsPaginated(
                next,
                data);
        }
    }
}
