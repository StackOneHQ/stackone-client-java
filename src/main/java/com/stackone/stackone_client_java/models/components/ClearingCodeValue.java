/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * ClearingCodeValue
 * 
 * <p>The type of clearing code
 */
@JsonDeserialize(using = ClearingCodeValue._Deserializer.class)
@JsonSerialize(using = ClearingCodeValue._Serializer.class)
public class ClearingCodeValue {

    public static final ClearingCodeValue SORT_CODE = new ClearingCodeValue("sort_code");
    public static final ClearingCodeValue BUILDING_SOCIETY_REFERENCE = new ClearingCodeValue("building_society_reference");
    public static final ClearingCodeValue ABA_ROUTING = new ClearingCodeValue("aba_routing");
    public static final ClearingCodeValue CHIPS_PARTICIPANT_ID = new ClearingCodeValue("chips_participant_id");
    public static final ClearingCodeValue TRANSIT_NUMBER = new ClearingCodeValue("transit_number");
    public static final ClearingCodeValue INSTITUTION_NUMBER = new ClearingCodeValue("institution_number");
    public static final ClearingCodeValue BSB_CODE = new ClearingCodeValue("bsb_code");
    public static final ClearingCodeValue IFSC_CODE = new ClearingCodeValue("ifsc_code");
    public static final ClearingCodeValue MICR_CODE = new ClearingCodeValue("micr_code");
    public static final ClearingCodeValue CLABE = new ClearingCodeValue("clabe");
    public static final ClearingCodeValue CNAPS_CODE = new ClearingCodeValue("cnaps_code");
    public static final ClearingCodeValue CH_BANK_CLEARING_CODE = new ClearingCodeValue("ch_bank_clearing_code");
    public static final ClearingCodeValue CH_SIC_CODE = new ClearingCodeValue("ch_sic_code");
    public static final ClearingCodeValue ZENGIN_CODE = new ClearingCodeValue("zengin_code");
    public static final ClearingCodeValue NZ_CLEARING_CODE = new ClearingCodeValue("nz_clearing_code");
    public static final ClearingCodeValue HK_BANK_CODE = new ClearingCodeValue("hk_bank_code");
    public static final ClearingCodeValue BLZ = new ClearingCodeValue("blz");
    public static final ClearingCodeValue AT_BANKLEITZAHL = new ClearingCodeValue("at_bankleitzahl");
    public static final ClearingCodeValue NUBAN = new ClearingCodeValue("nuban");
    public static final ClearingCodeValue SE_BANKGIRO_CODE = new ClearingCodeValue("se_bankgiro_code");
    public static final ClearingCodeValue UNMAPPED_VALUE = new ClearingCodeValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, ClearingCodeValue> values = createValuesMap();
    private static final Map<String, ClearingCodeValueEnum> enums = createEnumsMap();

    private final String value;

    private ClearingCodeValue(String value) {
        this.value = value;
    }

    /**
     * Returns a ClearingCodeValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as ClearingCodeValue
     */ 
    public static ClearingCodeValue of(String value) {
        synchronized (ClearingCodeValue.class) {
            return values.computeIfAbsent(value, v -> new ClearingCodeValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<ClearingCodeValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ClearingCodeValue other = (ClearingCodeValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "ClearingCodeValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static ClearingCodeValue[] values() {
        synchronized (ClearingCodeValue.class) {
            return values.values().toArray(new ClearingCodeValue[] {});
        }
    }

    private static final Map<String, ClearingCodeValue> createValuesMap() {
        Map<String, ClearingCodeValue> map = new LinkedHashMap<>();
        map.put("sort_code", SORT_CODE);
        map.put("building_society_reference", BUILDING_SOCIETY_REFERENCE);
        map.put("aba_routing", ABA_ROUTING);
        map.put("chips_participant_id", CHIPS_PARTICIPANT_ID);
        map.put("transit_number", TRANSIT_NUMBER);
        map.put("institution_number", INSTITUTION_NUMBER);
        map.put("bsb_code", BSB_CODE);
        map.put("ifsc_code", IFSC_CODE);
        map.put("micr_code", MICR_CODE);
        map.put("clabe", CLABE);
        map.put("cnaps_code", CNAPS_CODE);
        map.put("ch_bank_clearing_code", CH_BANK_CLEARING_CODE);
        map.put("ch_sic_code", CH_SIC_CODE);
        map.put("zengin_code", ZENGIN_CODE);
        map.put("nz_clearing_code", NZ_CLEARING_CODE);
        map.put("hk_bank_code", HK_BANK_CODE);
        map.put("blz", BLZ);
        map.put("at_bankleitzahl", AT_BANKLEITZAHL);
        map.put("nuban", NUBAN);
        map.put("se_bankgiro_code", SE_BANKGIRO_CODE);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, ClearingCodeValueEnum> createEnumsMap() {
        Map<String, ClearingCodeValueEnum> map = new HashMap<>();
        map.put("sort_code", ClearingCodeValueEnum.SORT_CODE);
        map.put("building_society_reference", ClearingCodeValueEnum.BUILDING_SOCIETY_REFERENCE);
        map.put("aba_routing", ClearingCodeValueEnum.ABA_ROUTING);
        map.put("chips_participant_id", ClearingCodeValueEnum.CHIPS_PARTICIPANT_ID);
        map.put("transit_number", ClearingCodeValueEnum.TRANSIT_NUMBER);
        map.put("institution_number", ClearingCodeValueEnum.INSTITUTION_NUMBER);
        map.put("bsb_code", ClearingCodeValueEnum.BSB_CODE);
        map.put("ifsc_code", ClearingCodeValueEnum.IFSC_CODE);
        map.put("micr_code", ClearingCodeValueEnum.MICR_CODE);
        map.put("clabe", ClearingCodeValueEnum.CLABE);
        map.put("cnaps_code", ClearingCodeValueEnum.CNAPS_CODE);
        map.put("ch_bank_clearing_code", ClearingCodeValueEnum.CH_BANK_CLEARING_CODE);
        map.put("ch_sic_code", ClearingCodeValueEnum.CH_SIC_CODE);
        map.put("zengin_code", ClearingCodeValueEnum.ZENGIN_CODE);
        map.put("nz_clearing_code", ClearingCodeValueEnum.NZ_CLEARING_CODE);
        map.put("hk_bank_code", ClearingCodeValueEnum.HK_BANK_CODE);
        map.put("blz", ClearingCodeValueEnum.BLZ);
        map.put("at_bankleitzahl", ClearingCodeValueEnum.AT_BANKLEITZAHL);
        map.put("nuban", ClearingCodeValueEnum.NUBAN);
        map.put("se_bankgiro_code", ClearingCodeValueEnum.SE_BANKGIRO_CODE);
        map.put("unmapped_value", ClearingCodeValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<ClearingCodeValue> {

        protected _Serializer() {
            super(ClearingCodeValue.class);
        }

        @Override
        public void serialize(ClearingCodeValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<ClearingCodeValue> {

        protected _Deserializer() {
            super(ClearingCodeValue.class);
        }

        @Override
        public ClearingCodeValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return ClearingCodeValue.of(v);
        }
    }
    
    public enum ClearingCodeValueEnum {

        SORT_CODE("sort_code"),
        BUILDING_SOCIETY_REFERENCE("building_society_reference"),
        ABA_ROUTING("aba_routing"),
        CHIPS_PARTICIPANT_ID("chips_participant_id"),
        TRANSIT_NUMBER("transit_number"),
        INSTITUTION_NUMBER("institution_number"),
        BSB_CODE("bsb_code"),
        IFSC_CODE("ifsc_code"),
        MICR_CODE("micr_code"),
        CLABE("clabe"),
        CNAPS_CODE("cnaps_code"),
        CH_BANK_CLEARING_CODE("ch_bank_clearing_code"),
        CH_SIC_CODE("ch_sic_code"),
        ZENGIN_CODE("zengin_code"),
        NZ_CLEARING_CODE("nz_clearing_code"),
        HK_BANK_CODE("hk_bank_code"),
        BLZ("blz"),
        AT_BANKLEITZAHL("at_bankleitzahl"),
        NUBAN("nuban"),
        SE_BANKGIRO_CODE("se_bankgiro_code"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private ClearingCodeValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

