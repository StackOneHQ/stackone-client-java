/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Deprecated;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class Employee {
    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * Provider's unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_id")
    private JsonNullable<String> remoteId;

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_custom_fields")
    private JsonNullable<? extends Map<String, Object>> unifiedCustomFields;

    /**
     * The prefix of the employee's name (e.g., Mr, Ms, Dr)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The employee first name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The employee last name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The employee name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The employee display name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    private JsonNullable<String> displayName;

    /**
     * The employee avatar Url
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_url")
    private JsonNullable<String> avatarUrl;

    /**
     * The employee personal email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_email")
    private JsonNullable<String> personalEmail;

    /**
     * The employee personal phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_phone_number")
    private JsonNullable<String> personalPhoneNumber;

    /**
     * The employee work email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_email")
    private JsonNullable<String> workEmail;

    /**
     * The employee work phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_phone_number")
    private JsonNullable<String> workPhoneNumber;

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    @Deprecated
    private JsonNullable<String> jobId;

    /**
     * The employee job title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_title")
    private JsonNullable<String> jobTitle;

    /**
     * The employee job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_description")
    @Deprecated
    private JsonNullable<? extends JobDescription> jobDescription;

    /**
     * The employee department id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_id")
    @Deprecated
    private JsonNullable<String> departmentId;

    /**
     * The employee department
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    @Deprecated
    private JsonNullable<String> department;

    /**
     * The employee groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    private JsonNullable<? extends List<HRISGroup>> groups;

    /**
     * The employee cost centers
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_centers")
    @Deprecated
    private JsonNullable<? extends List<CostCenters>> costCenters;

    /**
     * The employee manager ID
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager_id")
    @Deprecated
    private JsonNullable<String> managerId;

    /**
     * Provider's unique identifier of the manager
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_manager_id")
    @Deprecated
    private JsonNullable<String> remoteManagerId;

    /**
     * The employee gender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private JsonNullable<? extends Gender> gender;

    /**
     * The employee preferred language
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_language")
    private JsonNullable<? extends PreferredLanguage> preferredLanguage;

    /**
     * The employee ethnicity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ethnicity")
    private JsonNullable<? extends Ethnicity> ethnicity;

    /**
     * The date when the employee was born
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_of_birth")
    private JsonNullable<OffsetDateTime> dateOfBirth;

    /**
     * The next birthday of the employee (upcoming birthday)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<OffsetDateTime> birthday;

    /**
     * The employee marital status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marital_status")
    private JsonNullable<? extends MaritalStatus> maritalStatus;

    /**
     * The employee avatar
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    private JsonNullable<? extends Avatar> avatar;

    /**
     * The employee hire date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hire_date")
    private JsonNullable<OffsetDateTime> hireDate;

    /**
     * The employee start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private JsonNullable<OffsetDateTime> startDate;

    /**
     * The employee tenure
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenure")
    private JsonNullable<Double> tenure;

    /**
     * The employee work anniversary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_anniversary")
    private JsonNullable<OffsetDateTime> workAnniversary;

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_type")
    @Deprecated
    private JsonNullable<? extends EmploymentType> employmentType;

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_contract_type")
    @Deprecated
    private JsonNullable<? extends EmploymentContractType> employmentContractType;

    /**
     * The employee employment status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private JsonNullable<? extends EmploymentStatus> employmentStatus;

    /**
     * The employee termination date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination_date")
    private JsonNullable<OffsetDateTime> terminationDate;

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    @Deprecated
    private JsonNullable<String> companyName;

    /**
     * The employee company id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private JsonNullable<String> companyId;

    /**
     * The citizenships of the Employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("citizenships")
    private JsonNullable<? extends List<CountryCodeEnum>> citizenships;

    /**
     * The employee home location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("home_location")
    private JsonNullable<? extends HomeLocation> homeLocation;

    /**
     * The employee work location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_location")
    private JsonNullable<? extends WorkLocation> workLocation;

    /**
     * The employee company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private JsonNullable<? extends EmployeeCompany> company;

    /**
     * The employee employments
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employments")
    private JsonNullable<? extends List<Employment>> employments;

    /**
     * The employee custom fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private JsonNullable<? extends List<CustomFields>> customFields;

    /**
     * Current benefits of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefits")
    private JsonNullable<? extends List<HRISBenefit>> benefits;

    /**
     * The assigned employee number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    private JsonNullable<String> employeeNumber;

    /**
     * Bank account details for the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_details")
    private JsonNullable<? extends List<HRISBankDetails>> bankDetails;

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_identity_number")
    @Deprecated
    private JsonNullable<? extends NationalIdentityNumber> nationalIdentityNumber;

    /**
     * The national identity numbers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("national_identity_numbers")
    private JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers;

    /**
     * The employee skills
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skills")
    private JsonNullable<? extends List<EntitySkills>> skills;

    /**
     * The created_at date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<OffsetDateTime> createdAt;

    /**
     * The updated_at date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<OffsetDateTime> updatedAt;

    @JsonCreator
    public Employee(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("remote_id") JsonNullable<String> remoteId,
            @JsonProperty("unified_custom_fields") JsonNullable<? extends Map<String, Object>> unifiedCustomFields,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("display_name") JsonNullable<String> displayName,
            @JsonProperty("avatar_url") JsonNullable<String> avatarUrl,
            @JsonProperty("personal_email") JsonNullable<String> personalEmail,
            @JsonProperty("personal_phone_number") JsonNullable<String> personalPhoneNumber,
            @JsonProperty("work_email") JsonNullable<String> workEmail,
            @JsonProperty("work_phone_number") JsonNullable<String> workPhoneNumber,
            @JsonProperty("job_id") JsonNullable<String> jobId,
            @JsonProperty("job_title") JsonNullable<String> jobTitle,
            @JsonProperty("job_description") JsonNullable<? extends JobDescription> jobDescription,
            @JsonProperty("department_id") JsonNullable<String> departmentId,
            @JsonProperty("department") JsonNullable<String> department,
            @JsonProperty("groups") JsonNullable<? extends List<HRISGroup>> groups,
            @JsonProperty("cost_centers") JsonNullable<? extends List<CostCenters>> costCenters,
            @JsonProperty("manager_id") JsonNullable<String> managerId,
            @JsonProperty("remote_manager_id") JsonNullable<String> remoteManagerId,
            @JsonProperty("gender") JsonNullable<? extends Gender> gender,
            @JsonProperty("preferred_language") JsonNullable<? extends PreferredLanguage> preferredLanguage,
            @JsonProperty("ethnicity") JsonNullable<? extends Ethnicity> ethnicity,
            @JsonProperty("date_of_birth") JsonNullable<OffsetDateTime> dateOfBirth,
            @JsonProperty("birthday") JsonNullable<OffsetDateTime> birthday,
            @JsonProperty("marital_status") JsonNullable<? extends MaritalStatus> maritalStatus,
            @JsonProperty("avatar") JsonNullable<? extends Avatar> avatar,
            @JsonProperty("hire_date") JsonNullable<OffsetDateTime> hireDate,
            @JsonProperty("start_date") JsonNullable<OffsetDateTime> startDate,
            @JsonProperty("tenure") JsonNullable<Double> tenure,
            @JsonProperty("work_anniversary") JsonNullable<OffsetDateTime> workAnniversary,
            @JsonProperty("employment_type") JsonNullable<? extends EmploymentType> employmentType,
            @JsonProperty("employment_contract_type") JsonNullable<? extends EmploymentContractType> employmentContractType,
            @JsonProperty("employment_status") JsonNullable<? extends EmploymentStatus> employmentStatus,
            @JsonProperty("termination_date") JsonNullable<OffsetDateTime> terminationDate,
            @JsonProperty("company_name") JsonNullable<String> companyName,
            @JsonProperty("company_id") JsonNullable<String> companyId,
            @JsonProperty("citizenships") JsonNullable<? extends List<CountryCodeEnum>> citizenships,
            @JsonProperty("home_location") JsonNullable<? extends HomeLocation> homeLocation,
            @JsonProperty("work_location") JsonNullable<? extends WorkLocation> workLocation,
            @JsonProperty("company") JsonNullable<? extends EmployeeCompany> company,
            @JsonProperty("employments") JsonNullable<? extends List<Employment>> employments,
            @JsonProperty("custom_fields") JsonNullable<? extends List<CustomFields>> customFields,
            @JsonProperty("benefits") JsonNullable<? extends List<HRISBenefit>> benefits,
            @JsonProperty("employee_number") JsonNullable<String> employeeNumber,
            @JsonProperty("bank_details") JsonNullable<? extends List<HRISBankDetails>> bankDetails,
            @JsonProperty("national_identity_number") JsonNullable<? extends NationalIdentityNumber> nationalIdentityNumber,
            @JsonProperty("national_identity_numbers") JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers,
            @JsonProperty("skills") JsonNullable<? extends List<EntitySkills>> skills,
            @JsonProperty("created_at") JsonNullable<OffsetDateTime> createdAt,
            @JsonProperty("updated_at") JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(remoteId, "remoteId");
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        Utils.checkNotNull(personalEmail, "personalEmail");
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        Utils.checkNotNull(workEmail, "workEmail");
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(jobTitle, "jobTitle");
        Utils.checkNotNull(jobDescription, "jobDescription");
        Utils.checkNotNull(departmentId, "departmentId");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(groups, "groups");
        Utils.checkNotNull(costCenters, "costCenters");
        Utils.checkNotNull(managerId, "managerId");
        Utils.checkNotNull(remoteManagerId, "remoteManagerId");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        Utils.checkNotNull(ethnicity, "ethnicity");
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        Utils.checkNotNull(avatar, "avatar");
        Utils.checkNotNull(hireDate, "hireDate");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(tenure, "tenure");
        Utils.checkNotNull(workAnniversary, "workAnniversary");
        Utils.checkNotNull(employmentType, "employmentType");
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        Utils.checkNotNull(terminationDate, "terminationDate");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(citizenships, "citizenships");
        Utils.checkNotNull(homeLocation, "homeLocation");
        Utils.checkNotNull(workLocation, "workLocation");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(employments, "employments");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(benefits, "benefits");
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        Utils.checkNotNull(bankDetails, "bankDetails");
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        Utils.checkNotNull(skills, "skills");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.id = id;
        this.remoteId = remoteId;
        this.unifiedCustomFields = unifiedCustomFields;
        this.title = title;
        this.firstName = firstName;
        this.lastName = lastName;
        this.name = name;
        this.displayName = displayName;
        this.avatarUrl = avatarUrl;
        this.personalEmail = personalEmail;
        this.personalPhoneNumber = personalPhoneNumber;
        this.workEmail = workEmail;
        this.workPhoneNumber = workPhoneNumber;
        this.jobId = jobId;
        this.jobTitle = jobTitle;
        this.jobDescription = jobDescription;
        this.departmentId = departmentId;
        this.department = department;
        this.groups = groups;
        this.costCenters = costCenters;
        this.managerId = managerId;
        this.remoteManagerId = remoteManagerId;
        this.gender = gender;
        this.preferredLanguage = preferredLanguage;
        this.ethnicity = ethnicity;
        this.dateOfBirth = dateOfBirth;
        this.birthday = birthday;
        this.maritalStatus = maritalStatus;
        this.avatar = avatar;
        this.hireDate = hireDate;
        this.startDate = startDate;
        this.tenure = tenure;
        this.workAnniversary = workAnniversary;
        this.employmentType = employmentType;
        this.employmentContractType = employmentContractType;
        this.employmentStatus = employmentStatus;
        this.terminationDate = terminationDate;
        this.companyName = companyName;
        this.companyId = companyId;
        this.citizenships = citizenships;
        this.homeLocation = homeLocation;
        this.workLocation = workLocation;
        this.company = company;
        this.employments = employments;
        this.customFields = customFields;
        this.benefits = benefits;
        this.employeeNumber = employeeNumber;
        this.bankDetails = bankDetails;
        this.nationalIdentityNumber = nationalIdentityNumber;
        this.nationalIdentityNumbers = nationalIdentityNumbers;
        this.skills = skills;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public Employee() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * Provider's unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> remoteId() {
        return remoteId;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> unifiedCustomFields() {
        return (JsonNullable<Map<String, Object>>) unifiedCustomFields;
    }

    /**
     * The prefix of the employee's name (e.g., Mr, Ms, Dr)
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The employee first name
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The employee last name
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The employee name
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The employee display name
     */
    @JsonIgnore
    public JsonNullable<String> displayName() {
        return displayName;
    }

    /**
     * The employee avatar Url
     */
    @JsonIgnore
    public JsonNullable<String> avatarUrl() {
        return avatarUrl;
    }

    /**
     * The employee personal email
     */
    @JsonIgnore
    public JsonNullable<String> personalEmail() {
        return personalEmail;
    }

    /**
     * The employee personal phone number
     */
    @JsonIgnore
    public JsonNullable<String> personalPhoneNumber() {
        return personalPhoneNumber;
    }

    /**
     * The employee work email
     */
    @JsonIgnore
    public JsonNullable<String> workEmail() {
        return workEmail;
    }

    /**
     * The employee work phone number
     */
    @JsonIgnore
    public JsonNullable<String> workPhoneNumber() {
        return workPhoneNumber;
    }

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> jobId() {
        return jobId;
    }

    /**
     * The employee job title
     */
    @JsonIgnore
    public JsonNullable<String> jobTitle() {
        return jobTitle;
    }

    /**
     * The employee job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<JobDescription> jobDescription() {
        return (JsonNullable<JobDescription>) jobDescription;
    }

    /**
     * The employee department id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> departmentId() {
        return departmentId;
    }

    /**
     * The employee department
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> department() {
        return department;
    }

    /**
     * The employee groups
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<HRISGroup>> groups() {
        return (JsonNullable<List<HRISGroup>>) groups;
    }

    /**
     * The employee cost centers
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CostCenters>> costCenters() {
        return (JsonNullable<List<CostCenters>>) costCenters;
    }

    /**
     * The employee manager ID
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> managerId() {
        return managerId;
    }

    /**
     * Provider's unique identifier of the manager
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> remoteManagerId() {
        return remoteManagerId;
    }

    /**
     * The employee gender
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Gender> gender() {
        return (JsonNullable<Gender>) gender;
    }

    /**
     * The employee preferred language
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PreferredLanguage> preferredLanguage() {
        return (JsonNullable<PreferredLanguage>) preferredLanguage;
    }

    /**
     * The employee ethnicity
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Ethnicity> ethnicity() {
        return (JsonNullable<Ethnicity>) ethnicity;
    }

    /**
     * The date when the employee was born
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> dateOfBirth() {
        return dateOfBirth;
    }

    /**
     * The next birthday of the employee (upcoming birthday)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> birthday() {
        return birthday;
    }

    /**
     * The employee marital status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<MaritalStatus> maritalStatus() {
        return (JsonNullable<MaritalStatus>) maritalStatus;
    }

    /**
     * The employee avatar
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Avatar> avatar() {
        return (JsonNullable<Avatar>) avatar;
    }

    /**
     * The employee hire date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> hireDate() {
        return hireDate;
    }

    /**
     * The employee start date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * The employee tenure
     */
    @JsonIgnore
    public JsonNullable<Double> tenure() {
        return tenure;
    }

    /**
     * The employee work anniversary
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> workAnniversary() {
        return workAnniversary;
    }

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentType> employmentType() {
        return (JsonNullable<EmploymentType>) employmentType;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentContractType> employmentContractType() {
        return (JsonNullable<EmploymentContractType>) employmentContractType;
    }

    /**
     * The employee employment status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmploymentStatus> employmentStatus() {
        return (JsonNullable<EmploymentStatus>) employmentStatus;
    }

    /**
     * The employee termination date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> terminationDate() {
        return terminationDate;
    }

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * The employee company id
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * The citizenships of the Employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CountryCodeEnum>> citizenships() {
        return (JsonNullable<List<CountryCodeEnum>>) citizenships;
    }

    /**
     * The employee home location
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HomeLocation> homeLocation() {
        return (JsonNullable<HomeLocation>) homeLocation;
    }

    /**
     * The employee work location
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<WorkLocation> workLocation() {
        return (JsonNullable<WorkLocation>) workLocation;
    }

    /**
     * The employee company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EmployeeCompany> company() {
        return (JsonNullable<EmployeeCompany>) company;
    }

    /**
     * The employee employments
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Employment>> employments() {
        return (JsonNullable<List<Employment>>) employments;
    }

    /**
     * The employee custom fields
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CustomFields>> customFields() {
        return (JsonNullable<List<CustomFields>>) customFields;
    }

    /**
     * Current benefits of the employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<HRISBenefit>> benefits() {
        return (JsonNullable<List<HRISBenefit>>) benefits;
    }

    /**
     * The assigned employee number
     */
    @JsonIgnore
    public JsonNullable<String> employeeNumber() {
        return employeeNumber;
    }

    /**
     * Bank account details for the employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<HRISBankDetails>> bankDetails() {
        return (JsonNullable<List<HRISBankDetails>>) bankDetails;
    }

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<NationalIdentityNumber> nationalIdentityNumber() {
        return (JsonNullable<NationalIdentityNumber>) nationalIdentityNumber;
    }

    /**
     * The national identity numbers
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<NationalIdentityNumberApiModel>> nationalIdentityNumbers() {
        return (JsonNullable<List<NationalIdentityNumberApiModel>>) nationalIdentityNumbers;
    }

    /**
     * The employee skills
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<EntitySkills>> skills() {
        return (JsonNullable<List<EntitySkills>>) skills;
    }

    /**
     * The created_at date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The updated_at date
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier
     */
    public Employee withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public Employee withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public Employee withRemoteId(String remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = JsonNullable.of(remoteId);
        return this;
    }

    /**
     * Provider's unique identifier
     */
    public Employee withRemoteId(JsonNullable<String> remoteId) {
        Utils.checkNotNull(remoteId, "remoteId");
        this.remoteId = remoteId;
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public Employee withUnifiedCustomFields(Map<String, Object> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public Employee withUnifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = unifiedCustomFields;
        return this;
    }

    /**
     * The prefix of the employee's name (e.g., Mr, Ms, Dr)
     */
    public Employee withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The prefix of the employee's name (e.g., Mr, Ms, Dr)
     */
    public Employee withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The employee first name
     */
    public Employee withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The employee first name
     */
    public Employee withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The employee last name
     */
    public Employee withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The employee last name
     */
    public Employee withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The employee name
     */
    public Employee withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The employee name
     */
    public Employee withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The employee display name
     */
    public Employee withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * The employee display name
     */
    public Employee withDisplayName(JsonNullable<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The employee avatar Url
     */
    public Employee withAvatarUrl(String avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = JsonNullable.of(avatarUrl);
        return this;
    }

    /**
     * The employee avatar Url
     */
    public Employee withAvatarUrl(JsonNullable<String> avatarUrl) {
        Utils.checkNotNull(avatarUrl, "avatarUrl");
        this.avatarUrl = avatarUrl;
        return this;
    }

    /**
     * The employee personal email
     */
    public Employee withPersonalEmail(String personalEmail) {
        Utils.checkNotNull(personalEmail, "personalEmail");
        this.personalEmail = JsonNullable.of(personalEmail);
        return this;
    }

    /**
     * The employee personal email
     */
    public Employee withPersonalEmail(JsonNullable<String> personalEmail) {
        Utils.checkNotNull(personalEmail, "personalEmail");
        this.personalEmail = personalEmail;
        return this;
    }

    /**
     * The employee personal phone number
     */
    public Employee withPersonalPhoneNumber(String personalPhoneNumber) {
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        this.personalPhoneNumber = JsonNullable.of(personalPhoneNumber);
        return this;
    }

    /**
     * The employee personal phone number
     */
    public Employee withPersonalPhoneNumber(JsonNullable<String> personalPhoneNumber) {
        Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
        this.personalPhoneNumber = personalPhoneNumber;
        return this;
    }

    /**
     * The employee work email
     */
    public Employee withWorkEmail(String workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = JsonNullable.of(workEmail);
        return this;
    }

    /**
     * The employee work email
     */
    public Employee withWorkEmail(JsonNullable<String> workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = workEmail;
        return this;
    }

    /**
     * The employee work phone number
     */
    public Employee withWorkPhoneNumber(String workPhoneNumber) {
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        this.workPhoneNumber = JsonNullable.of(workPhoneNumber);
        return this;
    }

    /**
     * The employee work phone number
     */
    public Employee withWorkPhoneNumber(JsonNullable<String> workPhoneNumber) {
        Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
        this.workPhoneNumber = workPhoneNumber;
        return this;
    }

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = JsonNullable.of(jobId);
        return this;
    }

    /**
     * The employee job id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withJobId(JsonNullable<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    /**
     * The employee job title
     */
    public Employee withJobTitle(String jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = JsonNullable.of(jobTitle);
        return this;
    }

    /**
     * The employee job title
     */
    public Employee withJobTitle(JsonNullable<String> jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = jobTitle;
        return this;
    }

    /**
     * The employee job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withJobDescription(JobDescription jobDescription) {
        Utils.checkNotNull(jobDescription, "jobDescription");
        this.jobDescription = JsonNullable.of(jobDescription);
        return this;
    }

    /**
     * The employee job description
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withJobDescription(JsonNullable<? extends JobDescription> jobDescription) {
        Utils.checkNotNull(jobDescription, "jobDescription");
        this.jobDescription = jobDescription;
        return this;
    }

    /**
     * The employee department id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withDepartmentId(String departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = JsonNullable.of(departmentId);
        return this;
    }

    /**
     * The employee department id
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withDepartmentId(JsonNullable<String> departmentId) {
        Utils.checkNotNull(departmentId, "departmentId");
        this.departmentId = departmentId;
        return this;
    }

    /**
     * The employee department
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * The employee department
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withDepartment(JsonNullable<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * The employee groups
     */
    public Employee withGroups(List<HRISGroup> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = JsonNullable.of(groups);
        return this;
    }

    /**
     * The employee groups
     */
    public Employee withGroups(JsonNullable<? extends List<HRISGroup>> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }

    /**
     * The employee cost centers
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withCostCenters(List<CostCenters> costCenters) {
        Utils.checkNotNull(costCenters, "costCenters");
        this.costCenters = JsonNullable.of(costCenters);
        return this;
    }

    /**
     * The employee cost centers
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withCostCenters(JsonNullable<? extends List<CostCenters>> costCenters) {
        Utils.checkNotNull(costCenters, "costCenters");
        this.costCenters = costCenters;
        return this;
    }

    /**
     * The employee manager ID
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withManagerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = JsonNullable.of(managerId);
        return this;
    }

    /**
     * The employee manager ID
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withManagerId(JsonNullable<String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }

    /**
     * Provider's unique identifier of the manager
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withRemoteManagerId(String remoteManagerId) {
        Utils.checkNotNull(remoteManagerId, "remoteManagerId");
        this.remoteManagerId = JsonNullable.of(remoteManagerId);
        return this;
    }

    /**
     * Provider's unique identifier of the manager
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withRemoteManagerId(JsonNullable<String> remoteManagerId) {
        Utils.checkNotNull(remoteManagerId, "remoteManagerId");
        this.remoteManagerId = remoteManagerId;
        return this;
    }

    /**
     * The employee gender
     */
    public Employee withGender(Gender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = JsonNullable.of(gender);
        return this;
    }

    /**
     * The employee gender
     */
    public Employee withGender(JsonNullable<? extends Gender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    /**
     * The employee preferred language
     */
    public Employee withPreferredLanguage(PreferredLanguage preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = JsonNullable.of(preferredLanguage);
        return this;
    }

    /**
     * The employee preferred language
     */
    public Employee withPreferredLanguage(JsonNullable<? extends PreferredLanguage> preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = preferredLanguage;
        return this;
    }

    /**
     * The employee ethnicity
     */
    public Employee withEthnicity(Ethnicity ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = JsonNullable.of(ethnicity);
        return this;
    }

    /**
     * The employee ethnicity
     */
    public Employee withEthnicity(JsonNullable<? extends Ethnicity> ethnicity) {
        Utils.checkNotNull(ethnicity, "ethnicity");
        this.ethnicity = ethnicity;
        return this;
    }

    /**
     * The date when the employee was born
     */
    public Employee withDateOfBirth(OffsetDateTime dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = JsonNullable.of(dateOfBirth);
        return this;
    }

    /**
     * The date when the employee was born
     */
    public Employee withDateOfBirth(JsonNullable<OffsetDateTime> dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = dateOfBirth;
        return this;
    }

    /**
     * The next birthday of the employee (upcoming birthday)
     */
    public Employee withBirthday(OffsetDateTime birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The next birthday of the employee (upcoming birthday)
     */
    public Employee withBirthday(JsonNullable<OffsetDateTime> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * The employee marital status
     */
    public Employee withMaritalStatus(MaritalStatus maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = JsonNullable.of(maritalStatus);
        return this;
    }

    /**
     * The employee marital status
     */
    public Employee withMaritalStatus(JsonNullable<? extends MaritalStatus> maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = maritalStatus;
        return this;
    }

    /**
     * The employee avatar
     */
    public Employee withAvatar(Avatar avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = JsonNullable.of(avatar);
        return this;
    }

    /**
     * The employee avatar
     */
    public Employee withAvatar(JsonNullable<? extends Avatar> avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = avatar;
        return this;
    }

    /**
     * The employee hire date
     */
    public Employee withHireDate(OffsetDateTime hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = JsonNullable.of(hireDate);
        return this;
    }

    /**
     * The employee hire date
     */
    public Employee withHireDate(JsonNullable<OffsetDateTime> hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = hireDate;
        return this;
    }

    /**
     * The employee start date
     */
    public Employee withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * The employee start date
     */
    public Employee withStartDate(JsonNullable<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The employee tenure
     */
    public Employee withTenure(double tenure) {
        Utils.checkNotNull(tenure, "tenure");
        this.tenure = JsonNullable.of(tenure);
        return this;
    }

    /**
     * The employee tenure
     */
    public Employee withTenure(JsonNullable<Double> tenure) {
        Utils.checkNotNull(tenure, "tenure");
        this.tenure = tenure;
        return this;
    }

    /**
     * The employee work anniversary
     */
    public Employee withWorkAnniversary(OffsetDateTime workAnniversary) {
        Utils.checkNotNull(workAnniversary, "workAnniversary");
        this.workAnniversary = JsonNullable.of(workAnniversary);
        return this;
    }

    /**
     * The employee work anniversary
     */
    public Employee withWorkAnniversary(JsonNullable<OffsetDateTime> workAnniversary) {
        Utils.checkNotNull(workAnniversary, "workAnniversary");
        this.workAnniversary = workAnniversary;
        return this;
    }

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withEmploymentType(EmploymentType employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = JsonNullable.of(employmentType);
        return this;
    }

    /**
     * The employee employment type
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withEmploymentType(JsonNullable<? extends EmploymentType> employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = employmentType;
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withEmploymentContractType(EmploymentContractType employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = JsonNullable.of(employmentContractType);
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withEmploymentContractType(JsonNullable<? extends EmploymentContractType> employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = employmentContractType;
        return this;
    }

    /**
     * The employee employment status
     */
    public Employee withEmploymentStatus(EmploymentStatus employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = JsonNullable.of(employmentStatus);
        return this;
    }

    /**
     * The employee employment status
     */
    public Employee withEmploymentStatus(JsonNullable<? extends EmploymentStatus> employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = employmentStatus;
        return this;
    }

    /**
     * The employee termination date
     */
    public Employee withTerminationDate(OffsetDateTime terminationDate) {
        Utils.checkNotNull(terminationDate, "terminationDate");
        this.terminationDate = JsonNullable.of(terminationDate);
        return this;
    }

    /**
     * The employee termination date
     */
    public Employee withTerminationDate(JsonNullable<OffsetDateTime> terminationDate) {
        Utils.checkNotNull(terminationDate, "terminationDate");
        this.terminationDate = terminationDate;
        return this;
    }

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * The employee company name
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * The employee company id
     */
    public Employee withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * The employee company id
     */
    public Employee withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The citizenships of the Employee
     */
    public Employee withCitizenships(List<CountryCodeEnum> citizenships) {
        Utils.checkNotNull(citizenships, "citizenships");
        this.citizenships = JsonNullable.of(citizenships);
        return this;
    }

    /**
     * The citizenships of the Employee
     */
    public Employee withCitizenships(JsonNullable<? extends List<CountryCodeEnum>> citizenships) {
        Utils.checkNotNull(citizenships, "citizenships");
        this.citizenships = citizenships;
        return this;
    }

    /**
     * The employee home location
     */
    public Employee withHomeLocation(HomeLocation homeLocation) {
        Utils.checkNotNull(homeLocation, "homeLocation");
        this.homeLocation = JsonNullable.of(homeLocation);
        return this;
    }

    /**
     * The employee home location
     */
    public Employee withHomeLocation(JsonNullable<? extends HomeLocation> homeLocation) {
        Utils.checkNotNull(homeLocation, "homeLocation");
        this.homeLocation = homeLocation;
        return this;
    }

    /**
     * The employee work location
     */
    public Employee withWorkLocation(WorkLocation workLocation) {
        Utils.checkNotNull(workLocation, "workLocation");
        this.workLocation = JsonNullable.of(workLocation);
        return this;
    }

    /**
     * The employee work location
     */
    public Employee withWorkLocation(JsonNullable<? extends WorkLocation> workLocation) {
        Utils.checkNotNull(workLocation, "workLocation");
        this.workLocation = workLocation;
        return this;
    }

    /**
     * The employee company
     */
    public Employee withCompany(EmployeeCompany company) {
        Utils.checkNotNull(company, "company");
        this.company = JsonNullable.of(company);
        return this;
    }

    /**
     * The employee company
     */
    public Employee withCompany(JsonNullable<? extends EmployeeCompany> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * The employee employments
     */
    public Employee withEmployments(List<Employment> employments) {
        Utils.checkNotNull(employments, "employments");
        this.employments = JsonNullable.of(employments);
        return this;
    }

    /**
     * The employee employments
     */
    public Employee withEmployments(JsonNullable<? extends List<Employment>> employments) {
        Utils.checkNotNull(employments, "employments");
        this.employments = employments;
        return this;
    }

    /**
     * The employee custom fields
     */
    public Employee withCustomFields(List<CustomFields> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = JsonNullable.of(customFields);
        return this;
    }

    /**
     * The employee custom fields
     */
    public Employee withCustomFields(JsonNullable<? extends List<CustomFields>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * Current benefits of the employee
     */
    public Employee withBenefits(List<HRISBenefit> benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = JsonNullable.of(benefits);
        return this;
    }

    /**
     * Current benefits of the employee
     */
    public Employee withBenefits(JsonNullable<? extends List<HRISBenefit>> benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = benefits;
        return this;
    }

    /**
     * The assigned employee number
     */
    public Employee withEmployeeNumber(String employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = JsonNullable.of(employeeNumber);
        return this;
    }

    /**
     * The assigned employee number
     */
    public Employee withEmployeeNumber(JsonNullable<String> employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = employeeNumber;
        return this;
    }

    /**
     * Bank account details for the employee
     */
    public Employee withBankDetails(List<HRISBankDetails> bankDetails) {
        Utils.checkNotNull(bankDetails, "bankDetails");
        this.bankDetails = JsonNullable.of(bankDetails);
        return this;
    }

    /**
     * Bank account details for the employee
     */
    public Employee withBankDetails(JsonNullable<? extends List<HRISBankDetails>> bankDetails) {
        Utils.checkNotNull(bankDetails, "bankDetails");
        this.bankDetails = bankDetails;
        return this;
    }

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withNationalIdentityNumber(NationalIdentityNumber nationalIdentityNumber) {
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        this.nationalIdentityNumber = JsonNullable.of(nationalIdentityNumber);
        return this;
    }

    /**
     * The national identity number
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Employee withNationalIdentityNumber(JsonNullable<? extends NationalIdentityNumber> nationalIdentityNumber) {
        Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
        this.nationalIdentityNumber = nationalIdentityNumber;
        return this;
    }

    /**
     * The national identity numbers
     */
    public Employee withNationalIdentityNumbers(List<NationalIdentityNumberApiModel> nationalIdentityNumbers) {
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        this.nationalIdentityNumbers = JsonNullable.of(nationalIdentityNumbers);
        return this;
    }

    /**
     * The national identity numbers
     */
    public Employee withNationalIdentityNumbers(JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers) {
        Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
        this.nationalIdentityNumbers = nationalIdentityNumbers;
        return this;
    }

    /**
     * The employee skills
     */
    public Employee withSkills(List<EntitySkills> skills) {
        Utils.checkNotNull(skills, "skills");
        this.skills = JsonNullable.of(skills);
        return this;
    }

    /**
     * The employee skills
     */
    public Employee withSkills(JsonNullable<? extends List<EntitySkills>> skills) {
        Utils.checkNotNull(skills, "skills");
        this.skills = skills;
        return this;
    }

    /**
     * The created_at date
     */
    public Employee withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The created_at date
     */
    public Employee withCreatedAt(JsonNullable<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The updated_at date
     */
    public Employee withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The updated_at date
     */
    public Employee withUpdatedAt(JsonNullable<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Employee other = (Employee) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.remoteId, other.remoteId) &&
            Utils.enhancedDeepEquals(this.unifiedCustomFields, other.unifiedCustomFields) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.avatarUrl, other.avatarUrl) &&
            Utils.enhancedDeepEquals(this.personalEmail, other.personalEmail) &&
            Utils.enhancedDeepEquals(this.personalPhoneNumber, other.personalPhoneNumber) &&
            Utils.enhancedDeepEquals(this.workEmail, other.workEmail) &&
            Utils.enhancedDeepEquals(this.workPhoneNumber, other.workPhoneNumber) &&
            Utils.enhancedDeepEquals(this.jobId, other.jobId) &&
            Utils.enhancedDeepEquals(this.jobTitle, other.jobTitle) &&
            Utils.enhancedDeepEquals(this.jobDescription, other.jobDescription) &&
            Utils.enhancedDeepEquals(this.departmentId, other.departmentId) &&
            Utils.enhancedDeepEquals(this.department, other.department) &&
            Utils.enhancedDeepEquals(this.groups, other.groups) &&
            Utils.enhancedDeepEquals(this.costCenters, other.costCenters) &&
            Utils.enhancedDeepEquals(this.managerId, other.managerId) &&
            Utils.enhancedDeepEquals(this.remoteManagerId, other.remoteManagerId) &&
            Utils.enhancedDeepEquals(this.gender, other.gender) &&
            Utils.enhancedDeepEquals(this.preferredLanguage, other.preferredLanguage) &&
            Utils.enhancedDeepEquals(this.ethnicity, other.ethnicity) &&
            Utils.enhancedDeepEquals(this.dateOfBirth, other.dateOfBirth) &&
            Utils.enhancedDeepEquals(this.birthday, other.birthday) &&
            Utils.enhancedDeepEquals(this.maritalStatus, other.maritalStatus) &&
            Utils.enhancedDeepEquals(this.avatar, other.avatar) &&
            Utils.enhancedDeepEquals(this.hireDate, other.hireDate) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.tenure, other.tenure) &&
            Utils.enhancedDeepEquals(this.workAnniversary, other.workAnniversary) &&
            Utils.enhancedDeepEquals(this.employmentType, other.employmentType) &&
            Utils.enhancedDeepEquals(this.employmentContractType, other.employmentContractType) &&
            Utils.enhancedDeepEquals(this.employmentStatus, other.employmentStatus) &&
            Utils.enhancedDeepEquals(this.terminationDate, other.terminationDate) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.citizenships, other.citizenships) &&
            Utils.enhancedDeepEquals(this.homeLocation, other.homeLocation) &&
            Utils.enhancedDeepEquals(this.workLocation, other.workLocation) &&
            Utils.enhancedDeepEquals(this.company, other.company) &&
            Utils.enhancedDeepEquals(this.employments, other.employments) &&
            Utils.enhancedDeepEquals(this.customFields, other.customFields) &&
            Utils.enhancedDeepEquals(this.benefits, other.benefits) &&
            Utils.enhancedDeepEquals(this.employeeNumber, other.employeeNumber) &&
            Utils.enhancedDeepEquals(this.bankDetails, other.bankDetails) &&
            Utils.enhancedDeepEquals(this.nationalIdentityNumber, other.nationalIdentityNumber) &&
            Utils.enhancedDeepEquals(this.nationalIdentityNumbers, other.nationalIdentityNumbers) &&
            Utils.enhancedDeepEquals(this.skills, other.skills) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, remoteId, unifiedCustomFields,
            title, firstName, lastName,
            name, displayName, avatarUrl,
            personalEmail, personalPhoneNumber, workEmail,
            workPhoneNumber, jobId, jobTitle,
            jobDescription, departmentId, department,
            groups, costCenters, managerId,
            remoteManagerId, gender, preferredLanguage,
            ethnicity, dateOfBirth, birthday,
            maritalStatus, avatar, hireDate,
            startDate, tenure, workAnniversary,
            employmentType, employmentContractType, employmentStatus,
            terminationDate, companyName, companyId,
            citizenships, homeLocation, workLocation,
            company, employments, customFields,
            benefits, employeeNumber, bankDetails,
            nationalIdentityNumber, nationalIdentityNumbers, skills,
            createdAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Employee.class,
                "id", id,
                "remoteId", remoteId,
                "unifiedCustomFields", unifiedCustomFields,
                "title", title,
                "firstName", firstName,
                "lastName", lastName,
                "name", name,
                "displayName", displayName,
                "avatarUrl", avatarUrl,
                "personalEmail", personalEmail,
                "personalPhoneNumber", personalPhoneNumber,
                "workEmail", workEmail,
                "workPhoneNumber", workPhoneNumber,
                "jobId", jobId,
                "jobTitle", jobTitle,
                "jobDescription", jobDescription,
                "departmentId", departmentId,
                "department", department,
                "groups", groups,
                "costCenters", costCenters,
                "managerId", managerId,
                "remoteManagerId", remoteManagerId,
                "gender", gender,
                "preferredLanguage", preferredLanguage,
                "ethnicity", ethnicity,
                "dateOfBirth", dateOfBirth,
                "birthday", birthday,
                "maritalStatus", maritalStatus,
                "avatar", avatar,
                "hireDate", hireDate,
                "startDate", startDate,
                "tenure", tenure,
                "workAnniversary", workAnniversary,
                "employmentType", employmentType,
                "employmentContractType", employmentContractType,
                "employmentStatus", employmentStatus,
                "terminationDate", terminationDate,
                "companyName", companyName,
                "companyId", companyId,
                "citizenships", citizenships,
                "homeLocation", homeLocation,
                "workLocation", workLocation,
                "company", company,
                "employments", employments,
                "customFields", customFields,
                "benefits", benefits,
                "employeeNumber", employeeNumber,
                "bankDetails", bankDetails,
                "nationalIdentityNumber", nationalIdentityNumber,
                "nationalIdentityNumbers", nationalIdentityNumbers,
                "skills", skills,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> id = JsonNullable.undefined();

        private JsonNullable<String> remoteId = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Object>> unifiedCustomFields = JsonNullable.undefined();

        private JsonNullable<String> title = JsonNullable.undefined();

        private JsonNullable<String> firstName = JsonNullable.undefined();

        private JsonNullable<String> lastName = JsonNullable.undefined();

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> displayName = JsonNullable.undefined();

        private JsonNullable<String> avatarUrl = JsonNullable.undefined();

        private JsonNullable<String> personalEmail = JsonNullable.undefined();

        private JsonNullable<String> personalPhoneNumber = JsonNullable.undefined();

        private JsonNullable<String> workEmail = JsonNullable.undefined();

        private JsonNullable<String> workPhoneNumber = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> jobId = JsonNullable.undefined();

        private JsonNullable<String> jobTitle = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends JobDescription> jobDescription = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> departmentId = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> department = JsonNullable.undefined();

        private JsonNullable<? extends List<HRISGroup>> groups = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends List<CostCenters>> costCenters = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> managerId = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> remoteManagerId = JsonNullable.undefined();

        private JsonNullable<? extends Gender> gender = JsonNullable.undefined();

        private JsonNullable<? extends PreferredLanguage> preferredLanguage = JsonNullable.undefined();

        private JsonNullable<? extends Ethnicity> ethnicity = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> dateOfBirth = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> birthday = JsonNullable.undefined();

        private JsonNullable<? extends MaritalStatus> maritalStatus = JsonNullable.undefined();

        private JsonNullable<? extends Avatar> avatar = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> hireDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> startDate = JsonNullable.undefined();

        private JsonNullable<Double> tenure = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> workAnniversary = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends EmploymentType> employmentType = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends EmploymentContractType> employmentContractType = JsonNullable.undefined();

        private JsonNullable<? extends EmploymentStatus> employmentStatus = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> terminationDate = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<String> companyName = JsonNullable.undefined();

        private JsonNullable<String> companyId = JsonNullable.undefined();

        private JsonNullable<? extends List<CountryCodeEnum>> citizenships = JsonNullable.undefined();

        private JsonNullable<? extends HomeLocation> homeLocation = JsonNullable.undefined();

        private JsonNullable<? extends WorkLocation> workLocation = JsonNullable.undefined();

        private JsonNullable<? extends EmployeeCompany> company = JsonNullable.undefined();

        private JsonNullable<? extends List<Employment>> employments = JsonNullable.undefined();

        private JsonNullable<? extends List<CustomFields>> customFields = JsonNullable.undefined();

        private JsonNullable<? extends List<HRISBenefit>> benefits = JsonNullable.undefined();

        private JsonNullable<String> employeeNumber = JsonNullable.undefined();

        private JsonNullable<? extends List<HRISBankDetails>> bankDetails = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends NationalIdentityNumber> nationalIdentityNumber = JsonNullable.undefined();

        private JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers = JsonNullable.undefined();

        private JsonNullable<? extends List<EntitySkills>> skills = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdAt = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> updatedAt = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Provider's unique identifier
         */
        public Builder remoteId(String remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = JsonNullable.of(remoteId);
            return this;
        }

        /**
         * Provider's unique identifier
         */
        public Builder remoteId(JsonNullable<String> remoteId) {
            Utils.checkNotNull(remoteId, "remoteId");
            this.remoteId = remoteId;
            return this;
        }


        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(Map<String, Object> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = unifiedCustomFields;
            return this;
        }


        /**
         * The prefix of the employee's name (e.g., Mr, Ms, Dr)
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The prefix of the employee's name (e.g., Mr, Ms, Dr)
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * The employee first name
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The employee first name
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * The employee last name
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The employee last name
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * The employee name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The employee name
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The employee display name
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * The employee display name
         */
        public Builder displayName(JsonNullable<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }


        /**
         * The employee avatar Url
         */
        public Builder avatarUrl(String avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = JsonNullable.of(avatarUrl);
            return this;
        }

        /**
         * The employee avatar Url
         */
        public Builder avatarUrl(JsonNullable<String> avatarUrl) {
            Utils.checkNotNull(avatarUrl, "avatarUrl");
            this.avatarUrl = avatarUrl;
            return this;
        }


        /**
         * The employee personal email
         */
        public Builder personalEmail(String personalEmail) {
            Utils.checkNotNull(personalEmail, "personalEmail");
            this.personalEmail = JsonNullable.of(personalEmail);
            return this;
        }

        /**
         * The employee personal email
         */
        public Builder personalEmail(JsonNullable<String> personalEmail) {
            Utils.checkNotNull(personalEmail, "personalEmail");
            this.personalEmail = personalEmail;
            return this;
        }


        /**
         * The employee personal phone number
         */
        public Builder personalPhoneNumber(String personalPhoneNumber) {
            Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
            this.personalPhoneNumber = JsonNullable.of(personalPhoneNumber);
            return this;
        }

        /**
         * The employee personal phone number
         */
        public Builder personalPhoneNumber(JsonNullable<String> personalPhoneNumber) {
            Utils.checkNotNull(personalPhoneNumber, "personalPhoneNumber");
            this.personalPhoneNumber = personalPhoneNumber;
            return this;
        }


        /**
         * The employee work email
         */
        public Builder workEmail(String workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = JsonNullable.of(workEmail);
            return this;
        }

        /**
         * The employee work email
         */
        public Builder workEmail(JsonNullable<String> workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = workEmail;
            return this;
        }


        /**
         * The employee work phone number
         */
        public Builder workPhoneNumber(String workPhoneNumber) {
            Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
            this.workPhoneNumber = JsonNullable.of(workPhoneNumber);
            return this;
        }

        /**
         * The employee work phone number
         */
        public Builder workPhoneNumber(JsonNullable<String> workPhoneNumber) {
            Utils.checkNotNull(workPhoneNumber, "workPhoneNumber");
            this.workPhoneNumber = workPhoneNumber;
            return this;
        }


        /**
         * The employee job id
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = JsonNullable.of(jobId);
            return this;
        }

        /**
         * The employee job id
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobId(JsonNullable<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }


        /**
         * The employee job title
         */
        public Builder jobTitle(String jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = JsonNullable.of(jobTitle);
            return this;
        }

        /**
         * The employee job title
         */
        public Builder jobTitle(JsonNullable<String> jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = jobTitle;
            return this;
        }


        /**
         * The employee job description
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobDescription(JobDescription jobDescription) {
            Utils.checkNotNull(jobDescription, "jobDescription");
            this.jobDescription = JsonNullable.of(jobDescription);
            return this;
        }

        /**
         * The employee job description
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobDescription(JsonNullable<? extends JobDescription> jobDescription) {
            Utils.checkNotNull(jobDescription, "jobDescription");
            this.jobDescription = jobDescription;
            return this;
        }


        /**
         * The employee department id
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder departmentId(String departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = JsonNullable.of(departmentId);
            return this;
        }

        /**
         * The employee department id
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder departmentId(JsonNullable<String> departmentId) {
            Utils.checkNotNull(departmentId, "departmentId");
            this.departmentId = departmentId;
            return this;
        }


        /**
         * The employee department
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The employee department
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder department(JsonNullable<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }


        /**
         * The employee groups
         */
        public Builder groups(List<HRISGroup> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = JsonNullable.of(groups);
            return this;
        }

        /**
         * The employee groups
         */
        public Builder groups(JsonNullable<? extends List<HRISGroup>> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }


        /**
         * The employee cost centers
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder costCenters(List<CostCenters> costCenters) {
            Utils.checkNotNull(costCenters, "costCenters");
            this.costCenters = JsonNullable.of(costCenters);
            return this;
        }

        /**
         * The employee cost centers
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder costCenters(JsonNullable<? extends List<CostCenters>> costCenters) {
            Utils.checkNotNull(costCenters, "costCenters");
            this.costCenters = costCenters;
            return this;
        }


        /**
         * The employee manager ID
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder managerId(String managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = JsonNullable.of(managerId);
            return this;
        }

        /**
         * The employee manager ID
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder managerId(JsonNullable<String> managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = managerId;
            return this;
        }


        /**
         * Provider's unique identifier of the manager
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder remoteManagerId(String remoteManagerId) {
            Utils.checkNotNull(remoteManagerId, "remoteManagerId");
            this.remoteManagerId = JsonNullable.of(remoteManagerId);
            return this;
        }

        /**
         * Provider's unique identifier of the manager
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder remoteManagerId(JsonNullable<String> remoteManagerId) {
            Utils.checkNotNull(remoteManagerId, "remoteManagerId");
            this.remoteManagerId = remoteManagerId;
            return this;
        }


        /**
         * The employee gender
         */
        public Builder gender(Gender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = JsonNullable.of(gender);
            return this;
        }

        /**
         * The employee gender
         */
        public Builder gender(JsonNullable<? extends Gender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }


        /**
         * The employee preferred language
         */
        public Builder preferredLanguage(PreferredLanguage preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = JsonNullable.of(preferredLanguage);
            return this;
        }

        /**
         * The employee preferred language
         */
        public Builder preferredLanguage(JsonNullable<? extends PreferredLanguage> preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = preferredLanguage;
            return this;
        }


        /**
         * The employee ethnicity
         */
        public Builder ethnicity(Ethnicity ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = JsonNullable.of(ethnicity);
            return this;
        }

        /**
         * The employee ethnicity
         */
        public Builder ethnicity(JsonNullable<? extends Ethnicity> ethnicity) {
            Utils.checkNotNull(ethnicity, "ethnicity");
            this.ethnicity = ethnicity;
            return this;
        }


        /**
         * The date when the employee was born
         */
        public Builder dateOfBirth(OffsetDateTime dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = JsonNullable.of(dateOfBirth);
            return this;
        }

        /**
         * The date when the employee was born
         */
        public Builder dateOfBirth(JsonNullable<OffsetDateTime> dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = dateOfBirth;
            return this;
        }


        /**
         * The next birthday of the employee (upcoming birthday)
         */
        public Builder birthday(OffsetDateTime birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The next birthday of the employee (upcoming birthday)
         */
        public Builder birthday(JsonNullable<OffsetDateTime> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }


        /**
         * The employee marital status
         */
        public Builder maritalStatus(MaritalStatus maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = JsonNullable.of(maritalStatus);
            return this;
        }

        /**
         * The employee marital status
         */
        public Builder maritalStatus(JsonNullable<? extends MaritalStatus> maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = maritalStatus;
            return this;
        }


        /**
         * The employee avatar
         */
        public Builder avatar(Avatar avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = JsonNullable.of(avatar);
            return this;
        }

        /**
         * The employee avatar
         */
        public Builder avatar(JsonNullable<? extends Avatar> avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = avatar;
            return this;
        }


        /**
         * The employee hire date
         */
        public Builder hireDate(OffsetDateTime hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = JsonNullable.of(hireDate);
            return this;
        }

        /**
         * The employee hire date
         */
        public Builder hireDate(JsonNullable<OffsetDateTime> hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = hireDate;
            return this;
        }


        /**
         * The employee start date
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * The employee start date
         */
        public Builder startDate(JsonNullable<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * The employee tenure
         */
        public Builder tenure(double tenure) {
            Utils.checkNotNull(tenure, "tenure");
            this.tenure = JsonNullable.of(tenure);
            return this;
        }

        /**
         * The employee tenure
         */
        public Builder tenure(JsonNullable<Double> tenure) {
            Utils.checkNotNull(tenure, "tenure");
            this.tenure = tenure;
            return this;
        }


        /**
         * The employee work anniversary
         */
        public Builder workAnniversary(OffsetDateTime workAnniversary) {
            Utils.checkNotNull(workAnniversary, "workAnniversary");
            this.workAnniversary = JsonNullable.of(workAnniversary);
            return this;
        }

        /**
         * The employee work anniversary
         */
        public Builder workAnniversary(JsonNullable<OffsetDateTime> workAnniversary) {
            Utils.checkNotNull(workAnniversary, "workAnniversary");
            this.workAnniversary = workAnniversary;
            return this;
        }


        /**
         * The employee employment type
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(EmploymentType employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = JsonNullable.of(employmentType);
            return this;
        }

        /**
         * The employee employment type
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(JsonNullable<? extends EmploymentType> employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = employmentType;
            return this;
        }


        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(EmploymentContractType employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = JsonNullable.of(employmentContractType);
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(JsonNullable<? extends EmploymentContractType> employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = employmentContractType;
            return this;
        }


        /**
         * The employee employment status
         */
        public Builder employmentStatus(EmploymentStatus employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = JsonNullable.of(employmentStatus);
            return this;
        }

        /**
         * The employee employment status
         */
        public Builder employmentStatus(JsonNullable<? extends EmploymentStatus> employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = employmentStatus;
            return this;
        }


        /**
         * The employee termination date
         */
        public Builder terminationDate(OffsetDateTime terminationDate) {
            Utils.checkNotNull(terminationDate, "terminationDate");
            this.terminationDate = JsonNullable.of(terminationDate);
            return this;
        }

        /**
         * The employee termination date
         */
        public Builder terminationDate(JsonNullable<OffsetDateTime> terminationDate) {
            Utils.checkNotNull(terminationDate, "terminationDate");
            this.terminationDate = terminationDate;
            return this;
        }


        /**
         * The employee company name
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * The employee company name
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }


        /**
         * The employee company id
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * The employee company id
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        /**
         * The citizenships of the Employee
         */
        public Builder citizenships(List<CountryCodeEnum> citizenships) {
            Utils.checkNotNull(citizenships, "citizenships");
            this.citizenships = JsonNullable.of(citizenships);
            return this;
        }

        /**
         * The citizenships of the Employee
         */
        public Builder citizenships(JsonNullable<? extends List<CountryCodeEnum>> citizenships) {
            Utils.checkNotNull(citizenships, "citizenships");
            this.citizenships = citizenships;
            return this;
        }


        /**
         * The employee home location
         */
        public Builder homeLocation(HomeLocation homeLocation) {
            Utils.checkNotNull(homeLocation, "homeLocation");
            this.homeLocation = JsonNullable.of(homeLocation);
            return this;
        }

        /**
         * The employee home location
         */
        public Builder homeLocation(JsonNullable<? extends HomeLocation> homeLocation) {
            Utils.checkNotNull(homeLocation, "homeLocation");
            this.homeLocation = homeLocation;
            return this;
        }


        /**
         * The employee work location
         */
        public Builder workLocation(WorkLocation workLocation) {
            Utils.checkNotNull(workLocation, "workLocation");
            this.workLocation = JsonNullable.of(workLocation);
            return this;
        }

        /**
         * The employee work location
         */
        public Builder workLocation(JsonNullable<? extends WorkLocation> workLocation) {
            Utils.checkNotNull(workLocation, "workLocation");
            this.workLocation = workLocation;
            return this;
        }


        /**
         * The employee company
         */
        public Builder company(EmployeeCompany company) {
            Utils.checkNotNull(company, "company");
            this.company = JsonNullable.of(company);
            return this;
        }

        /**
         * The employee company
         */
        public Builder company(JsonNullable<? extends EmployeeCompany> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }


        /**
         * The employee employments
         */
        public Builder employments(List<Employment> employments) {
            Utils.checkNotNull(employments, "employments");
            this.employments = JsonNullable.of(employments);
            return this;
        }

        /**
         * The employee employments
         */
        public Builder employments(JsonNullable<? extends List<Employment>> employments) {
            Utils.checkNotNull(employments, "employments");
            this.employments = employments;
            return this;
        }


        /**
         * The employee custom fields
         */
        public Builder customFields(List<CustomFields> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = JsonNullable.of(customFields);
            return this;
        }

        /**
         * The employee custom fields
         */
        public Builder customFields(JsonNullable<? extends List<CustomFields>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }


        /**
         * Current benefits of the employee
         */
        public Builder benefits(List<HRISBenefit> benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = JsonNullable.of(benefits);
            return this;
        }

        /**
         * Current benefits of the employee
         */
        public Builder benefits(JsonNullable<? extends List<HRISBenefit>> benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = benefits;
            return this;
        }


        /**
         * The assigned employee number
         */
        public Builder employeeNumber(String employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = JsonNullable.of(employeeNumber);
            return this;
        }

        /**
         * The assigned employee number
         */
        public Builder employeeNumber(JsonNullable<String> employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = employeeNumber;
            return this;
        }


        /**
         * Bank account details for the employee
         */
        public Builder bankDetails(List<HRISBankDetails> bankDetails) {
            Utils.checkNotNull(bankDetails, "bankDetails");
            this.bankDetails = JsonNullable.of(bankDetails);
            return this;
        }

        /**
         * Bank account details for the employee
         */
        public Builder bankDetails(JsonNullable<? extends List<HRISBankDetails>> bankDetails) {
            Utils.checkNotNull(bankDetails, "bankDetails");
            this.bankDetails = bankDetails;
            return this;
        }


        /**
         * The national identity number
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nationalIdentityNumber(NationalIdentityNumber nationalIdentityNumber) {
            Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
            this.nationalIdentityNumber = JsonNullable.of(nationalIdentityNumber);
            return this;
        }

        /**
         * The national identity number
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder nationalIdentityNumber(JsonNullable<? extends NationalIdentityNumber> nationalIdentityNumber) {
            Utils.checkNotNull(nationalIdentityNumber, "nationalIdentityNumber");
            this.nationalIdentityNumber = nationalIdentityNumber;
            return this;
        }


        /**
         * The national identity numbers
         */
        public Builder nationalIdentityNumbers(List<NationalIdentityNumberApiModel> nationalIdentityNumbers) {
            Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
            this.nationalIdentityNumbers = JsonNullable.of(nationalIdentityNumbers);
            return this;
        }

        /**
         * The national identity numbers
         */
        public Builder nationalIdentityNumbers(JsonNullable<? extends List<NationalIdentityNumberApiModel>> nationalIdentityNumbers) {
            Utils.checkNotNull(nationalIdentityNumbers, "nationalIdentityNumbers");
            this.nationalIdentityNumbers = nationalIdentityNumbers;
            return this;
        }


        /**
         * The employee skills
         */
        public Builder skills(List<EntitySkills> skills) {
            Utils.checkNotNull(skills, "skills");
            this.skills = JsonNullable.of(skills);
            return this;
        }

        /**
         * The employee skills
         */
        public Builder skills(JsonNullable<? extends List<EntitySkills>> skills) {
            Utils.checkNotNull(skills, "skills");
            this.skills = skills;
            return this;
        }


        /**
         * The created_at date
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The created_at date
         */
        public Builder createdAt(JsonNullable<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        /**
         * The updated_at date
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The updated_at date
         */
        public Builder updatedAt(JsonNullable<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Employee build() {

            return new Employee(
                id, remoteId, unifiedCustomFields,
                title, firstName, lastName,
                name, displayName, avatarUrl,
                personalEmail, personalPhoneNumber, workEmail,
                workPhoneNumber, jobId, jobTitle,
                jobDescription, departmentId, department,
                groups, costCenters, managerId,
                remoteManagerId, gender, preferredLanguage,
                ethnicity, dateOfBirth, birthday,
                maritalStatus, avatar, hireDate,
                startDate, tenure, workAnniversary,
                employmentType, employmentContractType, employmentStatus,
                terminationDate, companyName, companyId,
                citizenships, homeLocation, workLocation,
                company, employments, customFields,
                benefits, employeeNumber, bankDetails,
                nationalIdentityNumber, nationalIdentityNumbers, skills,
                createdAt, updatedAt);
        }

    }
}
