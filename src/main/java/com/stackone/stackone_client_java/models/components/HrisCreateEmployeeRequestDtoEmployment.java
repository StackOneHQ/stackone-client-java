/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Deprecated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * HrisCreateEmployeeRequestDtoEmployment
 * 
 * <p>The employee employment
 */
public class HrisCreateEmployeeRequestDtoEmployment {
    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_custom_fields")
    private JsonNullable<? extends Map<String, Object>> unifiedCustomFields;

    /**
     * The job title of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_title")
    private JsonNullable<String> jobTitle;

    /**
     * The pay rate for the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_rate")
    private JsonNullable<String> payRate;

    /**
     * The pay period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_period")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoPayPeriod> payPeriod;

    /**
     * The pay frequency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_frequency")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoPayFrequency> payFrequency;

    /**
     * The currency used for pay
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_currency")
    private JsonNullable<String> payCurrency;

    /**
     * The end date of employment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private JsonNullable<OffsetDateTime> endDate;

    /**
     * Represents the employee’s position within the organizational hierarchy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grade")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoGrade> grade;

    /**
     * The type of employment (e.g., contractor, permanent)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_type")
    @Deprecated
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentType> employmentType;

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_contract_type")
    @Deprecated
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType> employmentContractType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_time")
    private JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkTime> workTime;

    /**
     * The payroll code of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_code")
    private JsonNullable<String> payrollCode;

    /**
     * Value to pass through to the provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passthrough")
    private JsonNullable<? extends Map<String, Object>> passthrough;

    /**
     * The employee effective date
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_date")
    @Deprecated
    private JsonNullable<OffsetDateTime> effectiveDate;

    @JsonCreator
    public HrisCreateEmployeeRequestDtoEmployment(
            @JsonProperty("unified_custom_fields") JsonNullable<? extends Map<String, Object>> unifiedCustomFields,
            @JsonProperty("job_title") JsonNullable<String> jobTitle,
            @JsonProperty("pay_rate") JsonNullable<String> payRate,
            @JsonProperty("pay_period") JsonNullable<? extends HrisCreateEmployeeRequestDtoPayPeriod> payPeriod,
            @JsonProperty("pay_frequency") JsonNullable<? extends HrisCreateEmployeeRequestDtoPayFrequency> payFrequency,
            @JsonProperty("pay_currency") JsonNullable<String> payCurrency,
            @JsonProperty("end_date") JsonNullable<OffsetDateTime> endDate,
            @JsonProperty("grade") JsonNullable<? extends HrisCreateEmployeeRequestDtoGrade> grade,
            @JsonProperty("employment_type") JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentType> employmentType,
            @JsonProperty("employment_contract_type") JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType> employmentContractType,
            @JsonProperty("work_time") JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkTime> workTime,
            @JsonProperty("payroll_code") JsonNullable<String> payrollCode,
            @JsonProperty("passthrough") JsonNullable<? extends Map<String, Object>> passthrough,
            @JsonProperty("effective_date") JsonNullable<OffsetDateTime> effectiveDate) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        Utils.checkNotNull(jobTitle, "jobTitle");
        Utils.checkNotNull(payRate, "payRate");
        Utils.checkNotNull(payPeriod, "payPeriod");
        Utils.checkNotNull(payFrequency, "payFrequency");
        Utils.checkNotNull(payCurrency, "payCurrency");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(grade, "grade");
        Utils.checkNotNull(employmentType, "employmentType");
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        Utils.checkNotNull(workTime, "workTime");
        Utils.checkNotNull(payrollCode, "payrollCode");
        Utils.checkNotNull(passthrough, "passthrough");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.unifiedCustomFields = unifiedCustomFields;
        this.jobTitle = jobTitle;
        this.payRate = payRate;
        this.payPeriod = payPeriod;
        this.payFrequency = payFrequency;
        this.payCurrency = payCurrency;
        this.endDate = endDate;
        this.grade = grade;
        this.employmentType = employmentType;
        this.employmentContractType = employmentContractType;
        this.workTime = workTime;
        this.payrollCode = payrollCode;
        this.passthrough = passthrough;
        this.effectiveDate = effectiveDate;
    }
    
    public HrisCreateEmployeeRequestDtoEmployment() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> unifiedCustomFields() {
        return (JsonNullable<Map<String, Object>>) unifiedCustomFields;
    }

    /**
     * The job title of the employee
     */
    @JsonIgnore
    public JsonNullable<String> jobTitle() {
        return jobTitle;
    }

    /**
     * The pay rate for the employee
     */
    @JsonIgnore
    public JsonNullable<String> payRate() {
        return payRate;
    }

    /**
     * The pay period
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoPayPeriod> payPeriod() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoPayPeriod>) payPeriod;
    }

    /**
     * The pay frequency
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoPayFrequency> payFrequency() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoPayFrequency>) payFrequency;
    }

    /**
     * The currency used for pay
     */
    @JsonIgnore
    public JsonNullable<String> payCurrency() {
        return payCurrency;
    }

    /**
     * The end date of employment
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> endDate() {
        return endDate;
    }

    /**
     * Represents the employee’s position within the organizational hierarchy.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoGrade> grade() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoGrade>) grade;
    }

    /**
     * The type of employment (e.g., contractor, permanent)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoEmploymentEmploymentType> employmentType() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoEmploymentEmploymentType>) employmentType;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType> employmentContractType() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType>) employmentContractType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HrisCreateEmployeeRequestDtoWorkTime> workTime() {
        return (JsonNullable<HrisCreateEmployeeRequestDtoWorkTime>) workTime;
    }

    /**
     * The payroll code of the employee
     */
    @JsonIgnore
    public JsonNullable<String> payrollCode() {
        return payrollCode;
    }

    /**
     * Value to pass through to the provider
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, Object>> passthrough() {
        return (JsonNullable<Map<String, Object>>) passthrough;
    }

    /**
     * The employee effective date
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<OffsetDateTime> effectiveDate() {
        return effectiveDate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public HrisCreateEmployeeRequestDtoEmployment withUnifiedCustomFields(Map<String, Object> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
        return this;
    }

    /**
     * Custom Unified Fields configured in your StackOne project
     */
    public HrisCreateEmployeeRequestDtoEmployment withUnifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
        Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
        this.unifiedCustomFields = unifiedCustomFields;
        return this;
    }

    /**
     * The job title of the employee
     */
    public HrisCreateEmployeeRequestDtoEmployment withJobTitle(String jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = JsonNullable.of(jobTitle);
        return this;
    }

    /**
     * The job title of the employee
     */
    public HrisCreateEmployeeRequestDtoEmployment withJobTitle(JsonNullable<String> jobTitle) {
        Utils.checkNotNull(jobTitle, "jobTitle");
        this.jobTitle = jobTitle;
        return this;
    }

    /**
     * The pay rate for the employee
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayRate(String payRate) {
        Utils.checkNotNull(payRate, "payRate");
        this.payRate = JsonNullable.of(payRate);
        return this;
    }

    /**
     * The pay rate for the employee
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayRate(JsonNullable<String> payRate) {
        Utils.checkNotNull(payRate, "payRate");
        this.payRate = payRate;
        return this;
    }

    /**
     * The pay period
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayPeriod(HrisCreateEmployeeRequestDtoPayPeriod payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = JsonNullable.of(payPeriod);
        return this;
    }

    /**
     * The pay period
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayPeriod(JsonNullable<? extends HrisCreateEmployeeRequestDtoPayPeriod> payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = payPeriod;
        return this;
    }

    /**
     * The pay frequency
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayFrequency(HrisCreateEmployeeRequestDtoPayFrequency payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = JsonNullable.of(payFrequency);
        return this;
    }

    /**
     * The pay frequency
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayFrequency(JsonNullable<? extends HrisCreateEmployeeRequestDtoPayFrequency> payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = payFrequency;
        return this;
    }

    /**
     * The currency used for pay
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayCurrency(String payCurrency) {
        Utils.checkNotNull(payCurrency, "payCurrency");
        this.payCurrency = JsonNullable.of(payCurrency);
        return this;
    }

    /**
     * The currency used for pay
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayCurrency(JsonNullable<String> payCurrency) {
        Utils.checkNotNull(payCurrency, "payCurrency");
        this.payCurrency = payCurrency;
        return this;
    }

    /**
     * The end date of employment
     */
    public HrisCreateEmployeeRequestDtoEmployment withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = JsonNullable.of(endDate);
        return this;
    }

    /**
     * The end date of employment
     */
    public HrisCreateEmployeeRequestDtoEmployment withEndDate(JsonNullable<OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Represents the employee’s position within the organizational hierarchy.
     */
    public HrisCreateEmployeeRequestDtoEmployment withGrade(HrisCreateEmployeeRequestDtoGrade grade) {
        Utils.checkNotNull(grade, "grade");
        this.grade = JsonNullable.of(grade);
        return this;
    }

    /**
     * Represents the employee’s position within the organizational hierarchy.
     */
    public HrisCreateEmployeeRequestDtoEmployment withGrade(JsonNullable<? extends HrisCreateEmployeeRequestDtoGrade> grade) {
        Utils.checkNotNull(grade, "grade");
        this.grade = grade;
        return this;
    }

    /**
     * The type of employment (e.g., contractor, permanent)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDtoEmployment withEmploymentType(HrisCreateEmployeeRequestDtoEmploymentEmploymentType employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = JsonNullable.of(employmentType);
        return this;
    }

    /**
     * The type of employment (e.g., contractor, permanent)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDtoEmployment withEmploymentType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentType> employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = employmentType;
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDtoEmployment withEmploymentContractType(HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = JsonNullable.of(employmentContractType);
        return this;
    }

    /**
     * The employment work schedule type (e.g., full-time, part-time)
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDtoEmployment withEmploymentContractType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType> employmentContractType) {
        Utils.checkNotNull(employmentContractType, "employmentContractType");
        this.employmentContractType = employmentContractType;
        return this;
    }

    public HrisCreateEmployeeRequestDtoEmployment withWorkTime(HrisCreateEmployeeRequestDtoWorkTime workTime) {
        Utils.checkNotNull(workTime, "workTime");
        this.workTime = JsonNullable.of(workTime);
        return this;
    }

    public HrisCreateEmployeeRequestDtoEmployment withWorkTime(JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkTime> workTime) {
        Utils.checkNotNull(workTime, "workTime");
        this.workTime = workTime;
        return this;
    }

    /**
     * The payroll code of the employee
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayrollCode(String payrollCode) {
        Utils.checkNotNull(payrollCode, "payrollCode");
        this.payrollCode = JsonNullable.of(payrollCode);
        return this;
    }

    /**
     * The payroll code of the employee
     */
    public HrisCreateEmployeeRequestDtoEmployment withPayrollCode(JsonNullable<String> payrollCode) {
        Utils.checkNotNull(payrollCode, "payrollCode");
        this.payrollCode = payrollCode;
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisCreateEmployeeRequestDtoEmployment withPassthrough(Map<String, Object> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = JsonNullable.of(passthrough);
        return this;
    }

    /**
     * Value to pass through to the provider
     */
    public HrisCreateEmployeeRequestDtoEmployment withPassthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
        Utils.checkNotNull(passthrough, "passthrough");
        this.passthrough = passthrough;
        return this;
    }

    /**
     * The employee effective date
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDtoEmployment withEffectiveDate(OffsetDateTime effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = JsonNullable.of(effectiveDate);
        return this;
    }

    /**
     * The employee effective date
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisCreateEmployeeRequestDtoEmployment withEffectiveDate(JsonNullable<OffsetDateTime> effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisCreateEmployeeRequestDtoEmployment other = (HrisCreateEmployeeRequestDtoEmployment) o;
        return 
            Utils.enhancedDeepEquals(this.unifiedCustomFields, other.unifiedCustomFields) &&
            Utils.enhancedDeepEquals(this.jobTitle, other.jobTitle) &&
            Utils.enhancedDeepEquals(this.payRate, other.payRate) &&
            Utils.enhancedDeepEquals(this.payPeriod, other.payPeriod) &&
            Utils.enhancedDeepEquals(this.payFrequency, other.payFrequency) &&
            Utils.enhancedDeepEquals(this.payCurrency, other.payCurrency) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.grade, other.grade) &&
            Utils.enhancedDeepEquals(this.employmentType, other.employmentType) &&
            Utils.enhancedDeepEquals(this.employmentContractType, other.employmentContractType) &&
            Utils.enhancedDeepEquals(this.workTime, other.workTime) &&
            Utils.enhancedDeepEquals(this.payrollCode, other.payrollCode) &&
            Utils.enhancedDeepEquals(this.passthrough, other.passthrough) &&
            Utils.enhancedDeepEquals(this.effectiveDate, other.effectiveDate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            unifiedCustomFields, jobTitle, payRate,
            payPeriod, payFrequency, payCurrency,
            endDate, grade, employmentType,
            employmentContractType, workTime, payrollCode,
            passthrough, effectiveDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisCreateEmployeeRequestDtoEmployment.class,
                "unifiedCustomFields", unifiedCustomFields,
                "jobTitle", jobTitle,
                "payRate", payRate,
                "payPeriod", payPeriod,
                "payFrequency", payFrequency,
                "payCurrency", payCurrency,
                "endDate", endDate,
                "grade", grade,
                "employmentType", employmentType,
                "employmentContractType", employmentContractType,
                "workTime", workTime,
                "payrollCode", payrollCode,
                "passthrough", passthrough,
                "effectiveDate", effectiveDate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends Map<String, Object>> unifiedCustomFields = JsonNullable.undefined();

        private JsonNullable<String> jobTitle = JsonNullable.undefined();

        private JsonNullable<String> payRate = JsonNullable.undefined();

        private JsonNullable<? extends HrisCreateEmployeeRequestDtoPayPeriod> payPeriod = JsonNullable.undefined();

        private JsonNullable<? extends HrisCreateEmployeeRequestDtoPayFrequency> payFrequency = JsonNullable.undefined();

        private JsonNullable<String> payCurrency = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> endDate = JsonNullable.undefined();

        private JsonNullable<? extends HrisCreateEmployeeRequestDtoGrade> grade = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentType> employmentType = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType> employmentContractType = JsonNullable.undefined();

        private JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkTime> workTime = JsonNullable.undefined();

        private JsonNullable<String> payrollCode = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, Object>> passthrough = JsonNullable.undefined();

        @Deprecated
        private JsonNullable<OffsetDateTime> effectiveDate = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(Map<String, Object> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = JsonNullable.of(unifiedCustomFields);
            return this;
        }

        /**
         * Custom Unified Fields configured in your StackOne project
         */
        public Builder unifiedCustomFields(JsonNullable<? extends Map<String, Object>> unifiedCustomFields) {
            Utils.checkNotNull(unifiedCustomFields, "unifiedCustomFields");
            this.unifiedCustomFields = unifiedCustomFields;
            return this;
        }


        /**
         * The job title of the employee
         */
        public Builder jobTitle(String jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = JsonNullable.of(jobTitle);
            return this;
        }

        /**
         * The job title of the employee
         */
        public Builder jobTitle(JsonNullable<String> jobTitle) {
            Utils.checkNotNull(jobTitle, "jobTitle");
            this.jobTitle = jobTitle;
            return this;
        }


        /**
         * The pay rate for the employee
         */
        public Builder payRate(String payRate) {
            Utils.checkNotNull(payRate, "payRate");
            this.payRate = JsonNullable.of(payRate);
            return this;
        }

        /**
         * The pay rate for the employee
         */
        public Builder payRate(JsonNullable<String> payRate) {
            Utils.checkNotNull(payRate, "payRate");
            this.payRate = payRate;
            return this;
        }


        /**
         * The pay period
         */
        public Builder payPeriod(HrisCreateEmployeeRequestDtoPayPeriod payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = JsonNullable.of(payPeriod);
            return this;
        }

        /**
         * The pay period
         */
        public Builder payPeriod(JsonNullable<? extends HrisCreateEmployeeRequestDtoPayPeriod> payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = payPeriod;
            return this;
        }


        /**
         * The pay frequency
         */
        public Builder payFrequency(HrisCreateEmployeeRequestDtoPayFrequency payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = JsonNullable.of(payFrequency);
            return this;
        }

        /**
         * The pay frequency
         */
        public Builder payFrequency(JsonNullable<? extends HrisCreateEmployeeRequestDtoPayFrequency> payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = payFrequency;
            return this;
        }


        /**
         * The currency used for pay
         */
        public Builder payCurrency(String payCurrency) {
            Utils.checkNotNull(payCurrency, "payCurrency");
            this.payCurrency = JsonNullable.of(payCurrency);
            return this;
        }

        /**
         * The currency used for pay
         */
        public Builder payCurrency(JsonNullable<String> payCurrency) {
            Utils.checkNotNull(payCurrency, "payCurrency");
            this.payCurrency = payCurrency;
            return this;
        }


        /**
         * The end date of employment
         */
        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * The end date of employment
         */
        public Builder endDate(JsonNullable<OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * Represents the employee’s position within the organizational hierarchy.
         */
        public Builder grade(HrisCreateEmployeeRequestDtoGrade grade) {
            Utils.checkNotNull(grade, "grade");
            this.grade = JsonNullable.of(grade);
            return this;
        }

        /**
         * Represents the employee’s position within the organizational hierarchy.
         */
        public Builder grade(JsonNullable<? extends HrisCreateEmployeeRequestDtoGrade> grade) {
            Utils.checkNotNull(grade, "grade");
            this.grade = grade;
            return this;
        }


        /**
         * The type of employment (e.g., contractor, permanent)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(HrisCreateEmployeeRequestDtoEmploymentEmploymentType employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = JsonNullable.of(employmentType);
            return this;
        }

        /**
         * The type of employment (e.g., contractor, permanent)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentType> employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = employmentType;
            return this;
        }


        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = JsonNullable.of(employmentContractType);
            return this;
        }

        /**
         * The employment work schedule type (e.g., full-time, part-time)
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder employmentContractType(JsonNullable<? extends HrisCreateEmployeeRequestDtoEmploymentEmploymentContractType> employmentContractType) {
            Utils.checkNotNull(employmentContractType, "employmentContractType");
            this.employmentContractType = employmentContractType;
            return this;
        }


        public Builder workTime(HrisCreateEmployeeRequestDtoWorkTime workTime) {
            Utils.checkNotNull(workTime, "workTime");
            this.workTime = JsonNullable.of(workTime);
            return this;
        }

        public Builder workTime(JsonNullable<? extends HrisCreateEmployeeRequestDtoWorkTime> workTime) {
            Utils.checkNotNull(workTime, "workTime");
            this.workTime = workTime;
            return this;
        }


        /**
         * The payroll code of the employee
         */
        public Builder payrollCode(String payrollCode) {
            Utils.checkNotNull(payrollCode, "payrollCode");
            this.payrollCode = JsonNullable.of(payrollCode);
            return this;
        }

        /**
         * The payroll code of the employee
         */
        public Builder payrollCode(JsonNullable<String> payrollCode) {
            Utils.checkNotNull(payrollCode, "payrollCode");
            this.payrollCode = payrollCode;
            return this;
        }


        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(Map<String, Object> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = JsonNullable.of(passthrough);
            return this;
        }

        /**
         * Value to pass through to the provider
         */
        public Builder passthrough(JsonNullable<? extends Map<String, Object>> passthrough) {
            Utils.checkNotNull(passthrough, "passthrough");
            this.passthrough = passthrough;
            return this;
        }


        /**
         * The employee effective date
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder effectiveDate(OffsetDateTime effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = JsonNullable.of(effectiveDate);
            return this;
        }

        /**
         * The employee effective date
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder effectiveDate(JsonNullable<OffsetDateTime> effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        public HrisCreateEmployeeRequestDtoEmployment build() {

            return new HrisCreateEmployeeRequestDtoEmployment(
                unifiedCustomFields, jobTitle, payRate,
                payPeriod, payFrequency, payCurrency,
                endDate, grade, employmentType,
                employmentContractType, workTime, payrollCode,
                passthrough, effectiveDate);
        }

    }
}
