/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * AccountingCompanyValue
 * 
 * <p>Default currency for the company
 */
@JsonDeserialize(using = AccountingCompanyValue._Deserializer.class)
@JsonSerialize(using = AccountingCompanyValue._Serializer.class)
public class AccountingCompanyValue {

    public static final AccountingCompanyValue AED = new AccountingCompanyValue("AED");
    public static final AccountingCompanyValue AFN = new AccountingCompanyValue("AFN");
    public static final AccountingCompanyValue ALL = new AccountingCompanyValue("ALL");
    public static final AccountingCompanyValue AMD = new AccountingCompanyValue("AMD");
    public static final AccountingCompanyValue ANG = new AccountingCompanyValue("ANG");
    public static final AccountingCompanyValue AOA = new AccountingCompanyValue("AOA");
    public static final AccountingCompanyValue ARS = new AccountingCompanyValue("ARS");
    public static final AccountingCompanyValue AUD = new AccountingCompanyValue("AUD");
    public static final AccountingCompanyValue AWG = new AccountingCompanyValue("AWG");
    public static final AccountingCompanyValue AZN = new AccountingCompanyValue("AZN");
    public static final AccountingCompanyValue BAM = new AccountingCompanyValue("BAM");
    public static final AccountingCompanyValue BBD = new AccountingCompanyValue("BBD");
    public static final AccountingCompanyValue BDT = new AccountingCompanyValue("BDT");
    public static final AccountingCompanyValue BGN = new AccountingCompanyValue("BGN");
    public static final AccountingCompanyValue BHD = new AccountingCompanyValue("BHD");
    public static final AccountingCompanyValue BIF = new AccountingCompanyValue("BIF");
    public static final AccountingCompanyValue BMD = new AccountingCompanyValue("BMD");
    public static final AccountingCompanyValue BND = new AccountingCompanyValue("BND");
    public static final AccountingCompanyValue BOB = new AccountingCompanyValue("BOB");
    public static final AccountingCompanyValue BRL = new AccountingCompanyValue("BRL");
    public static final AccountingCompanyValue BSD = new AccountingCompanyValue("BSD");
    public static final AccountingCompanyValue BTN = new AccountingCompanyValue("BTN");
    public static final AccountingCompanyValue BWP = new AccountingCompanyValue("BWP");
    public static final AccountingCompanyValue BYN = new AccountingCompanyValue("BYN");
    public static final AccountingCompanyValue BZD = new AccountingCompanyValue("BZD");
    public static final AccountingCompanyValue CAD = new AccountingCompanyValue("CAD");
    public static final AccountingCompanyValue CDF = new AccountingCompanyValue("CDF");
    public static final AccountingCompanyValue CHF = new AccountingCompanyValue("CHF");
    public static final AccountingCompanyValue CLP = new AccountingCompanyValue("CLP");
    public static final AccountingCompanyValue CNY = new AccountingCompanyValue("CNY");
    public static final AccountingCompanyValue COP = new AccountingCompanyValue("COP");
    public static final AccountingCompanyValue CRC = new AccountingCompanyValue("CRC");
    public static final AccountingCompanyValue CUC = new AccountingCompanyValue("CUC");
    public static final AccountingCompanyValue CUP = new AccountingCompanyValue("CUP");
    public static final AccountingCompanyValue CVE = new AccountingCompanyValue("CVE");
    public static final AccountingCompanyValue CZK = new AccountingCompanyValue("CZK");
    public static final AccountingCompanyValue DJF = new AccountingCompanyValue("DJF");
    public static final AccountingCompanyValue DKK = new AccountingCompanyValue("DKK");
    public static final AccountingCompanyValue DOP = new AccountingCompanyValue("DOP");
    public static final AccountingCompanyValue DZD = new AccountingCompanyValue("DZD");
    public static final AccountingCompanyValue EGP = new AccountingCompanyValue("EGP");
    public static final AccountingCompanyValue ERN = new AccountingCompanyValue("ERN");
    public static final AccountingCompanyValue ETB = new AccountingCompanyValue("ETB");
    public static final AccountingCompanyValue EUR = new AccountingCompanyValue("EUR");
    public static final AccountingCompanyValue FJD = new AccountingCompanyValue("FJD");
    public static final AccountingCompanyValue FKP = new AccountingCompanyValue("FKP");
    public static final AccountingCompanyValue GBP = new AccountingCompanyValue("GBP");
    public static final AccountingCompanyValue GEL = new AccountingCompanyValue("GEL");
    public static final AccountingCompanyValue GHS = new AccountingCompanyValue("GHS");
    public static final AccountingCompanyValue GIP = new AccountingCompanyValue("GIP");
    public static final AccountingCompanyValue GMD = new AccountingCompanyValue("GMD");
    public static final AccountingCompanyValue GNF = new AccountingCompanyValue("GNF");
    public static final AccountingCompanyValue GTQ = new AccountingCompanyValue("GTQ");
    public static final AccountingCompanyValue GYD = new AccountingCompanyValue("GYD");
    public static final AccountingCompanyValue HKD = new AccountingCompanyValue("HKD");
    public static final AccountingCompanyValue HNL = new AccountingCompanyValue("HNL");
    public static final AccountingCompanyValue HRK = new AccountingCompanyValue("HRK");
    public static final AccountingCompanyValue HTG = new AccountingCompanyValue("HTG");
    public static final AccountingCompanyValue HUF = new AccountingCompanyValue("HUF");
    public static final AccountingCompanyValue IDR = new AccountingCompanyValue("IDR");
    public static final AccountingCompanyValue ILS = new AccountingCompanyValue("ILS");
    public static final AccountingCompanyValue INR = new AccountingCompanyValue("INR");
    public static final AccountingCompanyValue IQD = new AccountingCompanyValue("IQD");
    public static final AccountingCompanyValue IRR = new AccountingCompanyValue("IRR");
    public static final AccountingCompanyValue ISK = new AccountingCompanyValue("ISK");
    public static final AccountingCompanyValue JMD = new AccountingCompanyValue("JMD");
    public static final AccountingCompanyValue JOD = new AccountingCompanyValue("JOD");
    public static final AccountingCompanyValue JPY = new AccountingCompanyValue("JPY");
    public static final AccountingCompanyValue KES = new AccountingCompanyValue("KES");
    public static final AccountingCompanyValue KGS = new AccountingCompanyValue("KGS");
    public static final AccountingCompanyValue KHR = new AccountingCompanyValue("KHR");
    public static final AccountingCompanyValue KMF = new AccountingCompanyValue("KMF");
    public static final AccountingCompanyValue KPW = new AccountingCompanyValue("KPW");
    public static final AccountingCompanyValue KRW = new AccountingCompanyValue("KRW");
    public static final AccountingCompanyValue KWD = new AccountingCompanyValue("KWD");
    public static final AccountingCompanyValue KYD = new AccountingCompanyValue("KYD");
    public static final AccountingCompanyValue KZT = new AccountingCompanyValue("KZT");
    public static final AccountingCompanyValue LAK = new AccountingCompanyValue("LAK");
    public static final AccountingCompanyValue LBP = new AccountingCompanyValue("LBP");
    public static final AccountingCompanyValue LKR = new AccountingCompanyValue("LKR");
    public static final AccountingCompanyValue LRD = new AccountingCompanyValue("LRD");
    public static final AccountingCompanyValue LSL = new AccountingCompanyValue("LSL");
    public static final AccountingCompanyValue LYD = new AccountingCompanyValue("LYD");
    public static final AccountingCompanyValue MAD = new AccountingCompanyValue("MAD");
    public static final AccountingCompanyValue MDL = new AccountingCompanyValue("MDL");
    public static final AccountingCompanyValue MGA = new AccountingCompanyValue("MGA");
    public static final AccountingCompanyValue MKD = new AccountingCompanyValue("MKD");
    public static final AccountingCompanyValue MMK = new AccountingCompanyValue("MMK");
    public static final AccountingCompanyValue MNT = new AccountingCompanyValue("MNT");
    public static final AccountingCompanyValue MOP = new AccountingCompanyValue("MOP");
    public static final AccountingCompanyValue MRU = new AccountingCompanyValue("MRU");
    public static final AccountingCompanyValue MUR = new AccountingCompanyValue("MUR");
    public static final AccountingCompanyValue MVR = new AccountingCompanyValue("MVR");
    public static final AccountingCompanyValue MWK = new AccountingCompanyValue("MWK");
    public static final AccountingCompanyValue MXN = new AccountingCompanyValue("MXN");
    public static final AccountingCompanyValue MYR = new AccountingCompanyValue("MYR");
    public static final AccountingCompanyValue MZN = new AccountingCompanyValue("MZN");
    public static final AccountingCompanyValue NAD = new AccountingCompanyValue("NAD");
    public static final AccountingCompanyValue NGN = new AccountingCompanyValue("NGN");
    public static final AccountingCompanyValue NIO = new AccountingCompanyValue("NIO");
    public static final AccountingCompanyValue NOK = new AccountingCompanyValue("NOK");
    public static final AccountingCompanyValue NPR = new AccountingCompanyValue("NPR");
    public static final AccountingCompanyValue NZD = new AccountingCompanyValue("NZD");
    public static final AccountingCompanyValue OMR = new AccountingCompanyValue("OMR");
    public static final AccountingCompanyValue PAB = new AccountingCompanyValue("PAB");
    public static final AccountingCompanyValue PEN = new AccountingCompanyValue("PEN");
    public static final AccountingCompanyValue PGK = new AccountingCompanyValue("PGK");
    public static final AccountingCompanyValue PHP = new AccountingCompanyValue("PHP");
    public static final AccountingCompanyValue PKR = new AccountingCompanyValue("PKR");
    public static final AccountingCompanyValue PLN = new AccountingCompanyValue("PLN");
    public static final AccountingCompanyValue PYG = new AccountingCompanyValue("PYG");
    public static final AccountingCompanyValue QAR = new AccountingCompanyValue("QAR");
    public static final AccountingCompanyValue RON = new AccountingCompanyValue("RON");
    public static final AccountingCompanyValue RSD = new AccountingCompanyValue("RSD");
    public static final AccountingCompanyValue RUB = new AccountingCompanyValue("RUB");
    public static final AccountingCompanyValue RWF = new AccountingCompanyValue("RWF");
    public static final AccountingCompanyValue SAR = new AccountingCompanyValue("SAR");
    public static final AccountingCompanyValue SBD = new AccountingCompanyValue("SBD");
    public static final AccountingCompanyValue SCR = new AccountingCompanyValue("SCR");
    public static final AccountingCompanyValue SDG = new AccountingCompanyValue("SDG");
    public static final AccountingCompanyValue SEK = new AccountingCompanyValue("SEK");
    public static final AccountingCompanyValue SGD = new AccountingCompanyValue("SGD");
    public static final AccountingCompanyValue SHP = new AccountingCompanyValue("SHP");
    public static final AccountingCompanyValue SLL = new AccountingCompanyValue("SLL");
    public static final AccountingCompanyValue SOS = new AccountingCompanyValue("SOS");
    public static final AccountingCompanyValue SRD = new AccountingCompanyValue("SRD");
    public static final AccountingCompanyValue SSP = new AccountingCompanyValue("SSP");
    public static final AccountingCompanyValue STN = new AccountingCompanyValue("STN");
    public static final AccountingCompanyValue SYP = new AccountingCompanyValue("SYP");
    public static final AccountingCompanyValue SZL = new AccountingCompanyValue("SZL");
    public static final AccountingCompanyValue THB = new AccountingCompanyValue("THB");
    public static final AccountingCompanyValue TJS = new AccountingCompanyValue("TJS");
    public static final AccountingCompanyValue TMT = new AccountingCompanyValue("TMT");
    public static final AccountingCompanyValue TND = new AccountingCompanyValue("TND");
    public static final AccountingCompanyValue TOP = new AccountingCompanyValue("TOP");
    public static final AccountingCompanyValue TRY = new AccountingCompanyValue("TRY");
    public static final AccountingCompanyValue TTD = new AccountingCompanyValue("TTD");
    public static final AccountingCompanyValue TWD = new AccountingCompanyValue("TWD");
    public static final AccountingCompanyValue TZS = new AccountingCompanyValue("TZS");
    public static final AccountingCompanyValue UAH = new AccountingCompanyValue("UAH");
    public static final AccountingCompanyValue UGX = new AccountingCompanyValue("UGX");
    public static final AccountingCompanyValue USD = new AccountingCompanyValue("USD");
    public static final AccountingCompanyValue UYU = new AccountingCompanyValue("UYU");
    public static final AccountingCompanyValue UZS = new AccountingCompanyValue("UZS");
    public static final AccountingCompanyValue VES = new AccountingCompanyValue("VES");
    public static final AccountingCompanyValue VND = new AccountingCompanyValue("VND");
    public static final AccountingCompanyValue VUV = new AccountingCompanyValue("VUV");
    public static final AccountingCompanyValue WST = new AccountingCompanyValue("WST");
    public static final AccountingCompanyValue XAF = new AccountingCompanyValue("XAF");
    public static final AccountingCompanyValue XCD = new AccountingCompanyValue("XCD");
    public static final AccountingCompanyValue XDR = new AccountingCompanyValue("XDR");
    public static final AccountingCompanyValue XOF = new AccountingCompanyValue("XOF");
    public static final AccountingCompanyValue XPF = new AccountingCompanyValue("XPF");
    public static final AccountingCompanyValue YER = new AccountingCompanyValue("YER");
    public static final AccountingCompanyValue ZAR = new AccountingCompanyValue("ZAR");
    public static final AccountingCompanyValue ZMW = new AccountingCompanyValue("ZMW");
    public static final AccountingCompanyValue ZWL = new AccountingCompanyValue("ZWL");
    public static final AccountingCompanyValue UNMAPPED_VALUE = new AccountingCompanyValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, AccountingCompanyValue> values = createValuesMap();
    private static final Map<String, AccountingCompanyValueEnum> enums = createEnumsMap();

    private final String value;

    private AccountingCompanyValue(String value) {
        this.value = value;
    }

    /**
     * Returns a AccountingCompanyValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as AccountingCompanyValue
     */ 
    public static AccountingCompanyValue of(String value) {
        synchronized (AccountingCompanyValue.class) {
            return values.computeIfAbsent(value, v -> new AccountingCompanyValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<AccountingCompanyValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        AccountingCompanyValue other = (AccountingCompanyValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "AccountingCompanyValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static AccountingCompanyValue[] values() {
        synchronized (AccountingCompanyValue.class) {
            return values.values().toArray(new AccountingCompanyValue[] {});
        }
    }

    private static final Map<String, AccountingCompanyValue> createValuesMap() {
        Map<String, AccountingCompanyValue> map = new LinkedHashMap<>();
        map.put("AED", AED);
        map.put("AFN", AFN);
        map.put("ALL", ALL);
        map.put("AMD", AMD);
        map.put("ANG", ANG);
        map.put("AOA", AOA);
        map.put("ARS", ARS);
        map.put("AUD", AUD);
        map.put("AWG", AWG);
        map.put("AZN", AZN);
        map.put("BAM", BAM);
        map.put("BBD", BBD);
        map.put("BDT", BDT);
        map.put("BGN", BGN);
        map.put("BHD", BHD);
        map.put("BIF", BIF);
        map.put("BMD", BMD);
        map.put("BND", BND);
        map.put("BOB", BOB);
        map.put("BRL", BRL);
        map.put("BSD", BSD);
        map.put("BTN", BTN);
        map.put("BWP", BWP);
        map.put("BYN", BYN);
        map.put("BZD", BZD);
        map.put("CAD", CAD);
        map.put("CDF", CDF);
        map.put("CHF", CHF);
        map.put("CLP", CLP);
        map.put("CNY", CNY);
        map.put("COP", COP);
        map.put("CRC", CRC);
        map.put("CUC", CUC);
        map.put("CUP", CUP);
        map.put("CVE", CVE);
        map.put("CZK", CZK);
        map.put("DJF", DJF);
        map.put("DKK", DKK);
        map.put("DOP", DOP);
        map.put("DZD", DZD);
        map.put("EGP", EGP);
        map.put("ERN", ERN);
        map.put("ETB", ETB);
        map.put("EUR", EUR);
        map.put("FJD", FJD);
        map.put("FKP", FKP);
        map.put("GBP", GBP);
        map.put("GEL", GEL);
        map.put("GHS", GHS);
        map.put("GIP", GIP);
        map.put("GMD", GMD);
        map.put("GNF", GNF);
        map.put("GTQ", GTQ);
        map.put("GYD", GYD);
        map.put("HKD", HKD);
        map.put("HNL", HNL);
        map.put("HRK", HRK);
        map.put("HTG", HTG);
        map.put("HUF", HUF);
        map.put("IDR", IDR);
        map.put("ILS", ILS);
        map.put("INR", INR);
        map.put("IQD", IQD);
        map.put("IRR", IRR);
        map.put("ISK", ISK);
        map.put("JMD", JMD);
        map.put("JOD", JOD);
        map.put("JPY", JPY);
        map.put("KES", KES);
        map.put("KGS", KGS);
        map.put("KHR", KHR);
        map.put("KMF", KMF);
        map.put("KPW", KPW);
        map.put("KRW", KRW);
        map.put("KWD", KWD);
        map.put("KYD", KYD);
        map.put("KZT", KZT);
        map.put("LAK", LAK);
        map.put("LBP", LBP);
        map.put("LKR", LKR);
        map.put("LRD", LRD);
        map.put("LSL", LSL);
        map.put("LYD", LYD);
        map.put("MAD", MAD);
        map.put("MDL", MDL);
        map.put("MGA", MGA);
        map.put("MKD", MKD);
        map.put("MMK", MMK);
        map.put("MNT", MNT);
        map.put("MOP", MOP);
        map.put("MRU", MRU);
        map.put("MUR", MUR);
        map.put("MVR", MVR);
        map.put("MWK", MWK);
        map.put("MXN", MXN);
        map.put("MYR", MYR);
        map.put("MZN", MZN);
        map.put("NAD", NAD);
        map.put("NGN", NGN);
        map.put("NIO", NIO);
        map.put("NOK", NOK);
        map.put("NPR", NPR);
        map.put("NZD", NZD);
        map.put("OMR", OMR);
        map.put("PAB", PAB);
        map.put("PEN", PEN);
        map.put("PGK", PGK);
        map.put("PHP", PHP);
        map.put("PKR", PKR);
        map.put("PLN", PLN);
        map.put("PYG", PYG);
        map.put("QAR", QAR);
        map.put("RON", RON);
        map.put("RSD", RSD);
        map.put("RUB", RUB);
        map.put("RWF", RWF);
        map.put("SAR", SAR);
        map.put("SBD", SBD);
        map.put("SCR", SCR);
        map.put("SDG", SDG);
        map.put("SEK", SEK);
        map.put("SGD", SGD);
        map.put("SHP", SHP);
        map.put("SLL", SLL);
        map.put("SOS", SOS);
        map.put("SRD", SRD);
        map.put("SSP", SSP);
        map.put("STN", STN);
        map.put("SYP", SYP);
        map.put("SZL", SZL);
        map.put("THB", THB);
        map.put("TJS", TJS);
        map.put("TMT", TMT);
        map.put("TND", TND);
        map.put("TOP", TOP);
        map.put("TRY", TRY);
        map.put("TTD", TTD);
        map.put("TWD", TWD);
        map.put("TZS", TZS);
        map.put("UAH", UAH);
        map.put("UGX", UGX);
        map.put("USD", USD);
        map.put("UYU", UYU);
        map.put("UZS", UZS);
        map.put("VES", VES);
        map.put("VND", VND);
        map.put("VUV", VUV);
        map.put("WST", WST);
        map.put("XAF", XAF);
        map.put("XCD", XCD);
        map.put("XDR", XDR);
        map.put("XOF", XOF);
        map.put("XPF", XPF);
        map.put("YER", YER);
        map.put("ZAR", ZAR);
        map.put("ZMW", ZMW);
        map.put("ZWL", ZWL);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, AccountingCompanyValueEnum> createEnumsMap() {
        Map<String, AccountingCompanyValueEnum> map = new HashMap<>();
        map.put("AED", AccountingCompanyValueEnum.AED);
        map.put("AFN", AccountingCompanyValueEnum.AFN);
        map.put("ALL", AccountingCompanyValueEnum.ALL);
        map.put("AMD", AccountingCompanyValueEnum.AMD);
        map.put("ANG", AccountingCompanyValueEnum.ANG);
        map.put("AOA", AccountingCompanyValueEnum.AOA);
        map.put("ARS", AccountingCompanyValueEnum.ARS);
        map.put("AUD", AccountingCompanyValueEnum.AUD);
        map.put("AWG", AccountingCompanyValueEnum.AWG);
        map.put("AZN", AccountingCompanyValueEnum.AZN);
        map.put("BAM", AccountingCompanyValueEnum.BAM);
        map.put("BBD", AccountingCompanyValueEnum.BBD);
        map.put("BDT", AccountingCompanyValueEnum.BDT);
        map.put("BGN", AccountingCompanyValueEnum.BGN);
        map.put("BHD", AccountingCompanyValueEnum.BHD);
        map.put("BIF", AccountingCompanyValueEnum.BIF);
        map.put("BMD", AccountingCompanyValueEnum.BMD);
        map.put("BND", AccountingCompanyValueEnum.BND);
        map.put("BOB", AccountingCompanyValueEnum.BOB);
        map.put("BRL", AccountingCompanyValueEnum.BRL);
        map.put("BSD", AccountingCompanyValueEnum.BSD);
        map.put("BTN", AccountingCompanyValueEnum.BTN);
        map.put("BWP", AccountingCompanyValueEnum.BWP);
        map.put("BYN", AccountingCompanyValueEnum.BYN);
        map.put("BZD", AccountingCompanyValueEnum.BZD);
        map.put("CAD", AccountingCompanyValueEnum.CAD);
        map.put("CDF", AccountingCompanyValueEnum.CDF);
        map.put("CHF", AccountingCompanyValueEnum.CHF);
        map.put("CLP", AccountingCompanyValueEnum.CLP);
        map.put("CNY", AccountingCompanyValueEnum.CNY);
        map.put("COP", AccountingCompanyValueEnum.COP);
        map.put("CRC", AccountingCompanyValueEnum.CRC);
        map.put("CUC", AccountingCompanyValueEnum.CUC);
        map.put("CUP", AccountingCompanyValueEnum.CUP);
        map.put("CVE", AccountingCompanyValueEnum.CVE);
        map.put("CZK", AccountingCompanyValueEnum.CZK);
        map.put("DJF", AccountingCompanyValueEnum.DJF);
        map.put("DKK", AccountingCompanyValueEnum.DKK);
        map.put("DOP", AccountingCompanyValueEnum.DOP);
        map.put("DZD", AccountingCompanyValueEnum.DZD);
        map.put("EGP", AccountingCompanyValueEnum.EGP);
        map.put("ERN", AccountingCompanyValueEnum.ERN);
        map.put("ETB", AccountingCompanyValueEnum.ETB);
        map.put("EUR", AccountingCompanyValueEnum.EUR);
        map.put("FJD", AccountingCompanyValueEnum.FJD);
        map.put("FKP", AccountingCompanyValueEnum.FKP);
        map.put("GBP", AccountingCompanyValueEnum.GBP);
        map.put("GEL", AccountingCompanyValueEnum.GEL);
        map.put("GHS", AccountingCompanyValueEnum.GHS);
        map.put("GIP", AccountingCompanyValueEnum.GIP);
        map.put("GMD", AccountingCompanyValueEnum.GMD);
        map.put("GNF", AccountingCompanyValueEnum.GNF);
        map.put("GTQ", AccountingCompanyValueEnum.GTQ);
        map.put("GYD", AccountingCompanyValueEnum.GYD);
        map.put("HKD", AccountingCompanyValueEnum.HKD);
        map.put("HNL", AccountingCompanyValueEnum.HNL);
        map.put("HRK", AccountingCompanyValueEnum.HRK);
        map.put("HTG", AccountingCompanyValueEnum.HTG);
        map.put("HUF", AccountingCompanyValueEnum.HUF);
        map.put("IDR", AccountingCompanyValueEnum.IDR);
        map.put("ILS", AccountingCompanyValueEnum.ILS);
        map.put("INR", AccountingCompanyValueEnum.INR);
        map.put("IQD", AccountingCompanyValueEnum.IQD);
        map.put("IRR", AccountingCompanyValueEnum.IRR);
        map.put("ISK", AccountingCompanyValueEnum.ISK);
        map.put("JMD", AccountingCompanyValueEnum.JMD);
        map.put("JOD", AccountingCompanyValueEnum.JOD);
        map.put("JPY", AccountingCompanyValueEnum.JPY);
        map.put("KES", AccountingCompanyValueEnum.KES);
        map.put("KGS", AccountingCompanyValueEnum.KGS);
        map.put("KHR", AccountingCompanyValueEnum.KHR);
        map.put("KMF", AccountingCompanyValueEnum.KMF);
        map.put("KPW", AccountingCompanyValueEnum.KPW);
        map.put("KRW", AccountingCompanyValueEnum.KRW);
        map.put("KWD", AccountingCompanyValueEnum.KWD);
        map.put("KYD", AccountingCompanyValueEnum.KYD);
        map.put("KZT", AccountingCompanyValueEnum.KZT);
        map.put("LAK", AccountingCompanyValueEnum.LAK);
        map.put("LBP", AccountingCompanyValueEnum.LBP);
        map.put("LKR", AccountingCompanyValueEnum.LKR);
        map.put("LRD", AccountingCompanyValueEnum.LRD);
        map.put("LSL", AccountingCompanyValueEnum.LSL);
        map.put("LYD", AccountingCompanyValueEnum.LYD);
        map.put("MAD", AccountingCompanyValueEnum.MAD);
        map.put("MDL", AccountingCompanyValueEnum.MDL);
        map.put("MGA", AccountingCompanyValueEnum.MGA);
        map.put("MKD", AccountingCompanyValueEnum.MKD);
        map.put("MMK", AccountingCompanyValueEnum.MMK);
        map.put("MNT", AccountingCompanyValueEnum.MNT);
        map.put("MOP", AccountingCompanyValueEnum.MOP);
        map.put("MRU", AccountingCompanyValueEnum.MRU);
        map.put("MUR", AccountingCompanyValueEnum.MUR);
        map.put("MVR", AccountingCompanyValueEnum.MVR);
        map.put("MWK", AccountingCompanyValueEnum.MWK);
        map.put("MXN", AccountingCompanyValueEnum.MXN);
        map.put("MYR", AccountingCompanyValueEnum.MYR);
        map.put("MZN", AccountingCompanyValueEnum.MZN);
        map.put("NAD", AccountingCompanyValueEnum.NAD);
        map.put("NGN", AccountingCompanyValueEnum.NGN);
        map.put("NIO", AccountingCompanyValueEnum.NIO);
        map.put("NOK", AccountingCompanyValueEnum.NOK);
        map.put("NPR", AccountingCompanyValueEnum.NPR);
        map.put("NZD", AccountingCompanyValueEnum.NZD);
        map.put("OMR", AccountingCompanyValueEnum.OMR);
        map.put("PAB", AccountingCompanyValueEnum.PAB);
        map.put("PEN", AccountingCompanyValueEnum.PEN);
        map.put("PGK", AccountingCompanyValueEnum.PGK);
        map.put("PHP", AccountingCompanyValueEnum.PHP);
        map.put("PKR", AccountingCompanyValueEnum.PKR);
        map.put("PLN", AccountingCompanyValueEnum.PLN);
        map.put("PYG", AccountingCompanyValueEnum.PYG);
        map.put("QAR", AccountingCompanyValueEnum.QAR);
        map.put("RON", AccountingCompanyValueEnum.RON);
        map.put("RSD", AccountingCompanyValueEnum.RSD);
        map.put("RUB", AccountingCompanyValueEnum.RUB);
        map.put("RWF", AccountingCompanyValueEnum.RWF);
        map.put("SAR", AccountingCompanyValueEnum.SAR);
        map.put("SBD", AccountingCompanyValueEnum.SBD);
        map.put("SCR", AccountingCompanyValueEnum.SCR);
        map.put("SDG", AccountingCompanyValueEnum.SDG);
        map.put("SEK", AccountingCompanyValueEnum.SEK);
        map.put("SGD", AccountingCompanyValueEnum.SGD);
        map.put("SHP", AccountingCompanyValueEnum.SHP);
        map.put("SLL", AccountingCompanyValueEnum.SLL);
        map.put("SOS", AccountingCompanyValueEnum.SOS);
        map.put("SRD", AccountingCompanyValueEnum.SRD);
        map.put("SSP", AccountingCompanyValueEnum.SSP);
        map.put("STN", AccountingCompanyValueEnum.STN);
        map.put("SYP", AccountingCompanyValueEnum.SYP);
        map.put("SZL", AccountingCompanyValueEnum.SZL);
        map.put("THB", AccountingCompanyValueEnum.THB);
        map.put("TJS", AccountingCompanyValueEnum.TJS);
        map.put("TMT", AccountingCompanyValueEnum.TMT);
        map.put("TND", AccountingCompanyValueEnum.TND);
        map.put("TOP", AccountingCompanyValueEnum.TOP);
        map.put("TRY", AccountingCompanyValueEnum.TRY);
        map.put("TTD", AccountingCompanyValueEnum.TTD);
        map.put("TWD", AccountingCompanyValueEnum.TWD);
        map.put("TZS", AccountingCompanyValueEnum.TZS);
        map.put("UAH", AccountingCompanyValueEnum.UAH);
        map.put("UGX", AccountingCompanyValueEnum.UGX);
        map.put("USD", AccountingCompanyValueEnum.USD);
        map.put("UYU", AccountingCompanyValueEnum.UYU);
        map.put("UZS", AccountingCompanyValueEnum.UZS);
        map.put("VES", AccountingCompanyValueEnum.VES);
        map.put("VND", AccountingCompanyValueEnum.VND);
        map.put("VUV", AccountingCompanyValueEnum.VUV);
        map.put("WST", AccountingCompanyValueEnum.WST);
        map.put("XAF", AccountingCompanyValueEnum.XAF);
        map.put("XCD", AccountingCompanyValueEnum.XCD);
        map.put("XDR", AccountingCompanyValueEnum.XDR);
        map.put("XOF", AccountingCompanyValueEnum.XOF);
        map.put("XPF", AccountingCompanyValueEnum.XPF);
        map.put("YER", AccountingCompanyValueEnum.YER);
        map.put("ZAR", AccountingCompanyValueEnum.ZAR);
        map.put("ZMW", AccountingCompanyValueEnum.ZMW);
        map.put("ZWL", AccountingCompanyValueEnum.ZWL);
        map.put("unmapped_value", AccountingCompanyValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<AccountingCompanyValue> {

        protected _Serializer() {
            super(AccountingCompanyValue.class);
        }

        @Override
        public void serialize(AccountingCompanyValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<AccountingCompanyValue> {

        protected _Deserializer() {
            super(AccountingCompanyValue.class);
        }

        @Override
        public AccountingCompanyValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return AccountingCompanyValue.of(v);
        }
    }
    
    public enum AccountingCompanyValueEnum {

        AED("AED"),
        AFN("AFN"),
        ALL("ALL"),
        AMD("AMD"),
        ANG("ANG"),
        AOA("AOA"),
        ARS("ARS"),
        AUD("AUD"),
        AWG("AWG"),
        AZN("AZN"),
        BAM("BAM"),
        BBD("BBD"),
        BDT("BDT"),
        BGN("BGN"),
        BHD("BHD"),
        BIF("BIF"),
        BMD("BMD"),
        BND("BND"),
        BOB("BOB"),
        BRL("BRL"),
        BSD("BSD"),
        BTN("BTN"),
        BWP("BWP"),
        BYN("BYN"),
        BZD("BZD"),
        CAD("CAD"),
        CDF("CDF"),
        CHF("CHF"),
        CLP("CLP"),
        CNY("CNY"),
        COP("COP"),
        CRC("CRC"),
        CUC("CUC"),
        CUP("CUP"),
        CVE("CVE"),
        CZK("CZK"),
        DJF("DJF"),
        DKK("DKK"),
        DOP("DOP"),
        DZD("DZD"),
        EGP("EGP"),
        ERN("ERN"),
        ETB("ETB"),
        EUR("EUR"),
        FJD("FJD"),
        FKP("FKP"),
        GBP("GBP"),
        GEL("GEL"),
        GHS("GHS"),
        GIP("GIP"),
        GMD("GMD"),
        GNF("GNF"),
        GTQ("GTQ"),
        GYD("GYD"),
        HKD("HKD"),
        HNL("HNL"),
        HRK("HRK"),
        HTG("HTG"),
        HUF("HUF"),
        IDR("IDR"),
        ILS("ILS"),
        INR("INR"),
        IQD("IQD"),
        IRR("IRR"),
        ISK("ISK"),
        JMD("JMD"),
        JOD("JOD"),
        JPY("JPY"),
        KES("KES"),
        KGS("KGS"),
        KHR("KHR"),
        KMF("KMF"),
        KPW("KPW"),
        KRW("KRW"),
        KWD("KWD"),
        KYD("KYD"),
        KZT("KZT"),
        LAK("LAK"),
        LBP("LBP"),
        LKR("LKR"),
        LRD("LRD"),
        LSL("LSL"),
        LYD("LYD"),
        MAD("MAD"),
        MDL("MDL"),
        MGA("MGA"),
        MKD("MKD"),
        MMK("MMK"),
        MNT("MNT"),
        MOP("MOP"),
        MRU("MRU"),
        MUR("MUR"),
        MVR("MVR"),
        MWK("MWK"),
        MXN("MXN"),
        MYR("MYR"),
        MZN("MZN"),
        NAD("NAD"),
        NGN("NGN"),
        NIO("NIO"),
        NOK("NOK"),
        NPR("NPR"),
        NZD("NZD"),
        OMR("OMR"),
        PAB("PAB"),
        PEN("PEN"),
        PGK("PGK"),
        PHP("PHP"),
        PKR("PKR"),
        PLN("PLN"),
        PYG("PYG"),
        QAR("QAR"),
        RON("RON"),
        RSD("RSD"),
        RUB("RUB"),
        RWF("RWF"),
        SAR("SAR"),
        SBD("SBD"),
        SCR("SCR"),
        SDG("SDG"),
        SEK("SEK"),
        SGD("SGD"),
        SHP("SHP"),
        SLL("SLL"),
        SOS("SOS"),
        SRD("SRD"),
        SSP("SSP"),
        STN("STN"),
        SYP("SYP"),
        SZL("SZL"),
        THB("THB"),
        TJS("TJS"),
        TMT("TMT"),
        TND("TND"),
        TOP("TOP"),
        TRY("TRY"),
        TTD("TTD"),
        TWD("TWD"),
        TZS("TZS"),
        UAH("UAH"),
        UGX("UGX"),
        USD("USD"),
        UYU("UYU"),
        UZS("UZS"),
        VES("VES"),
        VND("VND"),
        VUV("VUV"),
        WST("WST"),
        XAF("XAF"),
        XCD("XCD"),
        XDR("XDR"),
        XOF("XOF"),
        XPF("XPF"),
        YER("YER"),
        ZAR("ZAR"),
        ZMW("ZMW"),
        ZWL("ZWL"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private AccountingCompanyValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

