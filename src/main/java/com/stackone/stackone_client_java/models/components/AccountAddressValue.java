/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * AccountAddressValue
 * 
 * <p>The ISO 3166-1 alpha-2 code of the country.
 */
@JsonDeserialize(using = AccountAddressValue._Deserializer.class)
@JsonSerialize(using = AccountAddressValue._Serializer.class)
public class AccountAddressValue {

    public static final AccountAddressValue AF = new AccountAddressValue("AF");
    public static final AccountAddressValue AL = new AccountAddressValue("AL");
    public static final AccountAddressValue DZ = new AccountAddressValue("DZ");
    public static final AccountAddressValue AS = new AccountAddressValue("AS");
    public static final AccountAddressValue AD = new AccountAddressValue("AD");
    public static final AccountAddressValue AO = new AccountAddressValue("AO");
    public static final AccountAddressValue AI = new AccountAddressValue("AI");
    public static final AccountAddressValue AQ = new AccountAddressValue("AQ");
    public static final AccountAddressValue AG = new AccountAddressValue("AG");
    public static final AccountAddressValue AR = new AccountAddressValue("AR");
    public static final AccountAddressValue AM = new AccountAddressValue("AM");
    public static final AccountAddressValue AW = new AccountAddressValue("AW");
    public static final AccountAddressValue AU = new AccountAddressValue("AU");
    public static final AccountAddressValue AT = new AccountAddressValue("AT");
    public static final AccountAddressValue AZ = new AccountAddressValue("AZ");
    public static final AccountAddressValue BS = new AccountAddressValue("BS");
    public static final AccountAddressValue BH = new AccountAddressValue("BH");
    public static final AccountAddressValue BD = new AccountAddressValue("BD");
    public static final AccountAddressValue BB = new AccountAddressValue("BB");
    public static final AccountAddressValue BY = new AccountAddressValue("BY");
    public static final AccountAddressValue BE = new AccountAddressValue("BE");
    public static final AccountAddressValue BZ = new AccountAddressValue("BZ");
    public static final AccountAddressValue BJ = new AccountAddressValue("BJ");
    public static final AccountAddressValue BM = new AccountAddressValue("BM");
    public static final AccountAddressValue BT = new AccountAddressValue("BT");
    public static final AccountAddressValue BO = new AccountAddressValue("BO");
    public static final AccountAddressValue BQ = new AccountAddressValue("BQ");
    public static final AccountAddressValue BA = new AccountAddressValue("BA");
    public static final AccountAddressValue BW = new AccountAddressValue("BW");
    public static final AccountAddressValue BV = new AccountAddressValue("BV");
    public static final AccountAddressValue BR = new AccountAddressValue("BR");
    public static final AccountAddressValue IO = new AccountAddressValue("IO");
    public static final AccountAddressValue BN = new AccountAddressValue("BN");
    public static final AccountAddressValue BG = new AccountAddressValue("BG");
    public static final AccountAddressValue BF = new AccountAddressValue("BF");
    public static final AccountAddressValue BI = new AccountAddressValue("BI");
    public static final AccountAddressValue KH = new AccountAddressValue("KH");
    public static final AccountAddressValue CM = new AccountAddressValue("CM");
    public static final AccountAddressValue CA = new AccountAddressValue("CA");
    public static final AccountAddressValue CV = new AccountAddressValue("CV");
    public static final AccountAddressValue KY = new AccountAddressValue("KY");
    public static final AccountAddressValue CF = new AccountAddressValue("CF");
    public static final AccountAddressValue TD = new AccountAddressValue("TD");
    public static final AccountAddressValue CL = new AccountAddressValue("CL");
    public static final AccountAddressValue CN = new AccountAddressValue("CN");
    public static final AccountAddressValue CX = new AccountAddressValue("CX");
    public static final AccountAddressValue CC = new AccountAddressValue("CC");
    public static final AccountAddressValue CO = new AccountAddressValue("CO");
    public static final AccountAddressValue KM = new AccountAddressValue("KM");
    public static final AccountAddressValue CG = new AccountAddressValue("CG");
    public static final AccountAddressValue CD = new AccountAddressValue("CD");
    public static final AccountAddressValue CK = new AccountAddressValue("CK");
    public static final AccountAddressValue CR = new AccountAddressValue("CR");
    public static final AccountAddressValue HR = new AccountAddressValue("HR");
    public static final AccountAddressValue CU = new AccountAddressValue("CU");
    public static final AccountAddressValue CW = new AccountAddressValue("CW");
    public static final AccountAddressValue CY = new AccountAddressValue("CY");
    public static final AccountAddressValue CZ = new AccountAddressValue("CZ");
    public static final AccountAddressValue CI = new AccountAddressValue("CI");
    public static final AccountAddressValue DK = new AccountAddressValue("DK");
    public static final AccountAddressValue DJ = new AccountAddressValue("DJ");
    public static final AccountAddressValue DM = new AccountAddressValue("DM");
    public static final AccountAddressValue DO = new AccountAddressValue("DO");
    public static final AccountAddressValue EC = new AccountAddressValue("EC");
    public static final AccountAddressValue EG = new AccountAddressValue("EG");
    public static final AccountAddressValue SV = new AccountAddressValue("SV");
    public static final AccountAddressValue GQ = new AccountAddressValue("GQ");
    public static final AccountAddressValue ER = new AccountAddressValue("ER");
    public static final AccountAddressValue EE = new AccountAddressValue("EE");
    public static final AccountAddressValue ET = new AccountAddressValue("ET");
    public static final AccountAddressValue FK = new AccountAddressValue("FK");
    public static final AccountAddressValue FO = new AccountAddressValue("FO");
    public static final AccountAddressValue FJ = new AccountAddressValue("FJ");
    public static final AccountAddressValue FI = new AccountAddressValue("FI");
    public static final AccountAddressValue FR = new AccountAddressValue("FR");
    public static final AccountAddressValue GF = new AccountAddressValue("GF");
    public static final AccountAddressValue PF = new AccountAddressValue("PF");
    public static final AccountAddressValue TF = new AccountAddressValue("TF");
    public static final AccountAddressValue GA = new AccountAddressValue("GA");
    public static final AccountAddressValue GM = new AccountAddressValue("GM");
    public static final AccountAddressValue GE = new AccountAddressValue("GE");
    public static final AccountAddressValue DE = new AccountAddressValue("DE");
    public static final AccountAddressValue GH = new AccountAddressValue("GH");
    public static final AccountAddressValue GI = new AccountAddressValue("GI");
    public static final AccountAddressValue GR = new AccountAddressValue("GR");
    public static final AccountAddressValue GL = new AccountAddressValue("GL");
    public static final AccountAddressValue GD = new AccountAddressValue("GD");
    public static final AccountAddressValue GP = new AccountAddressValue("GP");
    public static final AccountAddressValue GU = new AccountAddressValue("GU");
    public static final AccountAddressValue GT = new AccountAddressValue("GT");
    public static final AccountAddressValue GG = new AccountAddressValue("GG");
    public static final AccountAddressValue GN = new AccountAddressValue("GN");
    public static final AccountAddressValue GW = new AccountAddressValue("GW");
    public static final AccountAddressValue GY = new AccountAddressValue("GY");
    public static final AccountAddressValue HT = new AccountAddressValue("HT");
    public static final AccountAddressValue HM = new AccountAddressValue("HM");
    public static final AccountAddressValue VA = new AccountAddressValue("VA");
    public static final AccountAddressValue HN = new AccountAddressValue("HN");
    public static final AccountAddressValue HK = new AccountAddressValue("HK");
    public static final AccountAddressValue HU = new AccountAddressValue("HU");
    public static final AccountAddressValue IS = new AccountAddressValue("IS");
    public static final AccountAddressValue IN = new AccountAddressValue("IN");
    public static final AccountAddressValue ID = new AccountAddressValue("ID");
    public static final AccountAddressValue IR = new AccountAddressValue("IR");
    public static final AccountAddressValue IQ = new AccountAddressValue("IQ");
    public static final AccountAddressValue IE = new AccountAddressValue("IE");
    public static final AccountAddressValue IM = new AccountAddressValue("IM");
    public static final AccountAddressValue IL = new AccountAddressValue("IL");
    public static final AccountAddressValue IT = new AccountAddressValue("IT");
    public static final AccountAddressValue JM = new AccountAddressValue("JM");
    public static final AccountAddressValue JP = new AccountAddressValue("JP");
    public static final AccountAddressValue JE = new AccountAddressValue("JE");
    public static final AccountAddressValue JO = new AccountAddressValue("JO");
    public static final AccountAddressValue KZ = new AccountAddressValue("KZ");
    public static final AccountAddressValue KE = new AccountAddressValue("KE");
    public static final AccountAddressValue KI = new AccountAddressValue("KI");
    public static final AccountAddressValue KP = new AccountAddressValue("KP");
    public static final AccountAddressValue KR = new AccountAddressValue("KR");
    public static final AccountAddressValue KW = new AccountAddressValue("KW");
    public static final AccountAddressValue KG = new AccountAddressValue("KG");
    public static final AccountAddressValue LA = new AccountAddressValue("LA");
    public static final AccountAddressValue LV = new AccountAddressValue("LV");
    public static final AccountAddressValue LB = new AccountAddressValue("LB");
    public static final AccountAddressValue LS = new AccountAddressValue("LS");
    public static final AccountAddressValue LR = new AccountAddressValue("LR");
    public static final AccountAddressValue LY = new AccountAddressValue("LY");
    public static final AccountAddressValue LI = new AccountAddressValue("LI");
    public static final AccountAddressValue LT = new AccountAddressValue("LT");
    public static final AccountAddressValue LU = new AccountAddressValue("LU");
    public static final AccountAddressValue MO = new AccountAddressValue("MO");
    public static final AccountAddressValue MK = new AccountAddressValue("MK");
    public static final AccountAddressValue MG = new AccountAddressValue("MG");
    public static final AccountAddressValue MW = new AccountAddressValue("MW");
    public static final AccountAddressValue MY = new AccountAddressValue("MY");
    public static final AccountAddressValue MV = new AccountAddressValue("MV");
    public static final AccountAddressValue ML = new AccountAddressValue("ML");
    public static final AccountAddressValue MT = new AccountAddressValue("MT");
    public static final AccountAddressValue MH = new AccountAddressValue("MH");
    public static final AccountAddressValue MQ = new AccountAddressValue("MQ");
    public static final AccountAddressValue MR = new AccountAddressValue("MR");
    public static final AccountAddressValue MU = new AccountAddressValue("MU");
    public static final AccountAddressValue YT = new AccountAddressValue("YT");
    public static final AccountAddressValue MX = new AccountAddressValue("MX");
    public static final AccountAddressValue FM = new AccountAddressValue("FM");
    public static final AccountAddressValue MD = new AccountAddressValue("MD");
    public static final AccountAddressValue MC = new AccountAddressValue("MC");
    public static final AccountAddressValue MN = new AccountAddressValue("MN");
    public static final AccountAddressValue ME = new AccountAddressValue("ME");
    public static final AccountAddressValue MS = new AccountAddressValue("MS");
    public static final AccountAddressValue MA = new AccountAddressValue("MA");
    public static final AccountAddressValue MZ = new AccountAddressValue("MZ");
    public static final AccountAddressValue MM = new AccountAddressValue("MM");
    public static final AccountAddressValue NA = new AccountAddressValue("NA");
    public static final AccountAddressValue NR = new AccountAddressValue("NR");
    public static final AccountAddressValue NP = new AccountAddressValue("NP");
    public static final AccountAddressValue NL = new AccountAddressValue("NL");
    public static final AccountAddressValue NC = new AccountAddressValue("NC");
    public static final AccountAddressValue NZ = new AccountAddressValue("NZ");
    public static final AccountAddressValue NI = new AccountAddressValue("NI");
    public static final AccountAddressValue NE = new AccountAddressValue("NE");
    public static final AccountAddressValue NG = new AccountAddressValue("NG");
    public static final AccountAddressValue NU = new AccountAddressValue("NU");
    public static final AccountAddressValue NF = new AccountAddressValue("NF");
    public static final AccountAddressValue MP = new AccountAddressValue("MP");
    public static final AccountAddressValue NO = new AccountAddressValue("NO");
    public static final AccountAddressValue OM = new AccountAddressValue("OM");
    public static final AccountAddressValue PK = new AccountAddressValue("PK");
    public static final AccountAddressValue PW = new AccountAddressValue("PW");
    public static final AccountAddressValue PS = new AccountAddressValue("PS");
    public static final AccountAddressValue PA = new AccountAddressValue("PA");
    public static final AccountAddressValue PG = new AccountAddressValue("PG");
    public static final AccountAddressValue PY = new AccountAddressValue("PY");
    public static final AccountAddressValue PE = new AccountAddressValue("PE");
    public static final AccountAddressValue PH = new AccountAddressValue("PH");
    public static final AccountAddressValue PN = new AccountAddressValue("PN");
    public static final AccountAddressValue PL = new AccountAddressValue("PL");
    public static final AccountAddressValue PT = new AccountAddressValue("PT");
    public static final AccountAddressValue PR = new AccountAddressValue("PR");
    public static final AccountAddressValue QA = new AccountAddressValue("QA");
    public static final AccountAddressValue RO = new AccountAddressValue("RO");
    public static final AccountAddressValue RU = new AccountAddressValue("RU");
    public static final AccountAddressValue RW = new AccountAddressValue("RW");
    public static final AccountAddressValue RE = new AccountAddressValue("RE");
    public static final AccountAddressValue BL = new AccountAddressValue("BL");
    public static final AccountAddressValue SH = new AccountAddressValue("SH");
    public static final AccountAddressValue KN = new AccountAddressValue("KN");
    public static final AccountAddressValue LC = new AccountAddressValue("LC");
    public static final AccountAddressValue MF = new AccountAddressValue("MF");
    public static final AccountAddressValue PM = new AccountAddressValue("PM");
    public static final AccountAddressValue VC = new AccountAddressValue("VC");
    public static final AccountAddressValue WS = new AccountAddressValue("WS");
    public static final AccountAddressValue SM = new AccountAddressValue("SM");
    public static final AccountAddressValue ST = new AccountAddressValue("ST");
    public static final AccountAddressValue SA = new AccountAddressValue("SA");
    public static final AccountAddressValue SN = new AccountAddressValue("SN");
    public static final AccountAddressValue RS = new AccountAddressValue("RS");
    public static final AccountAddressValue SC = new AccountAddressValue("SC");
    public static final AccountAddressValue SL = new AccountAddressValue("SL");
    public static final AccountAddressValue SG = new AccountAddressValue("SG");
    public static final AccountAddressValue SX = new AccountAddressValue("SX");
    public static final AccountAddressValue SK = new AccountAddressValue("SK");
    public static final AccountAddressValue SI = new AccountAddressValue("SI");
    public static final AccountAddressValue SB = new AccountAddressValue("SB");
    public static final AccountAddressValue SO = new AccountAddressValue("SO");
    public static final AccountAddressValue ZA = new AccountAddressValue("ZA");
    public static final AccountAddressValue GS = new AccountAddressValue("GS");
    public static final AccountAddressValue SS = new AccountAddressValue("SS");
    public static final AccountAddressValue ES = new AccountAddressValue("ES");
    public static final AccountAddressValue LK = new AccountAddressValue("LK");
    public static final AccountAddressValue SD = new AccountAddressValue("SD");
    public static final AccountAddressValue SR = new AccountAddressValue("SR");
    public static final AccountAddressValue SJ = new AccountAddressValue("SJ");
    public static final AccountAddressValue SZ = new AccountAddressValue("SZ");
    public static final AccountAddressValue SE = new AccountAddressValue("SE");
    public static final AccountAddressValue CH = new AccountAddressValue("CH");
    public static final AccountAddressValue SY = new AccountAddressValue("SY");
    public static final AccountAddressValue TW = new AccountAddressValue("TW");
    public static final AccountAddressValue TJ = new AccountAddressValue("TJ");
    public static final AccountAddressValue TZ = new AccountAddressValue("TZ");
    public static final AccountAddressValue TH = new AccountAddressValue("TH");
    public static final AccountAddressValue TL = new AccountAddressValue("TL");
    public static final AccountAddressValue TG = new AccountAddressValue("TG");
    public static final AccountAddressValue TK = new AccountAddressValue("TK");
    public static final AccountAddressValue TO = new AccountAddressValue("TO");
    public static final AccountAddressValue TT = new AccountAddressValue("TT");
    public static final AccountAddressValue TN = new AccountAddressValue("TN");
    public static final AccountAddressValue TR = new AccountAddressValue("TR");
    public static final AccountAddressValue TM = new AccountAddressValue("TM");
    public static final AccountAddressValue TC = new AccountAddressValue("TC");
    public static final AccountAddressValue TV = new AccountAddressValue("TV");
    public static final AccountAddressValue UG = new AccountAddressValue("UG");
    public static final AccountAddressValue UA = new AccountAddressValue("UA");
    public static final AccountAddressValue AE = new AccountAddressValue("AE");
    public static final AccountAddressValue GB = new AccountAddressValue("GB");
    public static final AccountAddressValue US = new AccountAddressValue("US");
    public static final AccountAddressValue UM = new AccountAddressValue("UM");
    public static final AccountAddressValue UY = new AccountAddressValue("UY");
    public static final AccountAddressValue UZ = new AccountAddressValue("UZ");
    public static final AccountAddressValue VU = new AccountAddressValue("VU");
    public static final AccountAddressValue VE = new AccountAddressValue("VE");
    public static final AccountAddressValue VN = new AccountAddressValue("VN");
    public static final AccountAddressValue VG = new AccountAddressValue("VG");
    public static final AccountAddressValue VI = new AccountAddressValue("VI");
    public static final AccountAddressValue WF = new AccountAddressValue("WF");
    public static final AccountAddressValue EH = new AccountAddressValue("EH");
    public static final AccountAddressValue YE = new AccountAddressValue("YE");
    public static final AccountAddressValue ZM = new AccountAddressValue("ZM");
    public static final AccountAddressValue ZW = new AccountAddressValue("ZW");
    public static final AccountAddressValue UNMAPPED_VALUE = new AccountAddressValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, AccountAddressValue> values = createValuesMap();
    private static final Map<String, AccountAddressValueEnum> enums = createEnumsMap();

    private final String value;

    private AccountAddressValue(String value) {
        this.value = value;
    }

    /**
     * Returns a AccountAddressValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as AccountAddressValue
     */ 
    public static AccountAddressValue of(String value) {
        synchronized (AccountAddressValue.class) {
            return values.computeIfAbsent(value, v -> new AccountAddressValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<AccountAddressValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        AccountAddressValue other = (AccountAddressValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "AccountAddressValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static AccountAddressValue[] values() {
        synchronized (AccountAddressValue.class) {
            return values.values().toArray(new AccountAddressValue[] {});
        }
    }

    private static final Map<String, AccountAddressValue> createValuesMap() {
        Map<String, AccountAddressValue> map = new LinkedHashMap<>();
        map.put("AF", AF);
        map.put("AL", AL);
        map.put("DZ", DZ);
        map.put("AS", AS);
        map.put("AD", AD);
        map.put("AO", AO);
        map.put("AI", AI);
        map.put("AQ", AQ);
        map.put("AG", AG);
        map.put("AR", AR);
        map.put("AM", AM);
        map.put("AW", AW);
        map.put("AU", AU);
        map.put("AT", AT);
        map.put("AZ", AZ);
        map.put("BS", BS);
        map.put("BH", BH);
        map.put("BD", BD);
        map.put("BB", BB);
        map.put("BY", BY);
        map.put("BE", BE);
        map.put("BZ", BZ);
        map.put("BJ", BJ);
        map.put("BM", BM);
        map.put("BT", BT);
        map.put("BO", BO);
        map.put("BQ", BQ);
        map.put("BA", BA);
        map.put("BW", BW);
        map.put("BV", BV);
        map.put("BR", BR);
        map.put("IO", IO);
        map.put("BN", BN);
        map.put("BG", BG);
        map.put("BF", BF);
        map.put("BI", BI);
        map.put("KH", KH);
        map.put("CM", CM);
        map.put("CA", CA);
        map.put("CV", CV);
        map.put("KY", KY);
        map.put("CF", CF);
        map.put("TD", TD);
        map.put("CL", CL);
        map.put("CN", CN);
        map.put("CX", CX);
        map.put("CC", CC);
        map.put("CO", CO);
        map.put("KM", KM);
        map.put("CG", CG);
        map.put("CD", CD);
        map.put("CK", CK);
        map.put("CR", CR);
        map.put("HR", HR);
        map.put("CU", CU);
        map.put("CW", CW);
        map.put("CY", CY);
        map.put("CZ", CZ);
        map.put("CI", CI);
        map.put("DK", DK);
        map.put("DJ", DJ);
        map.put("DM", DM);
        map.put("DO", DO);
        map.put("EC", EC);
        map.put("EG", EG);
        map.put("SV", SV);
        map.put("GQ", GQ);
        map.put("ER", ER);
        map.put("EE", EE);
        map.put("ET", ET);
        map.put("FK", FK);
        map.put("FO", FO);
        map.put("FJ", FJ);
        map.put("FI", FI);
        map.put("FR", FR);
        map.put("GF", GF);
        map.put("PF", PF);
        map.put("TF", TF);
        map.put("GA", GA);
        map.put("GM", GM);
        map.put("GE", GE);
        map.put("DE", DE);
        map.put("GH", GH);
        map.put("GI", GI);
        map.put("GR", GR);
        map.put("GL", GL);
        map.put("GD", GD);
        map.put("GP", GP);
        map.put("GU", GU);
        map.put("GT", GT);
        map.put("GG", GG);
        map.put("GN", GN);
        map.put("GW", GW);
        map.put("GY", GY);
        map.put("HT", HT);
        map.put("HM", HM);
        map.put("VA", VA);
        map.put("HN", HN);
        map.put("HK", HK);
        map.put("HU", HU);
        map.put("IS", IS);
        map.put("IN", IN);
        map.put("ID", ID);
        map.put("IR", IR);
        map.put("IQ", IQ);
        map.put("IE", IE);
        map.put("IM", IM);
        map.put("IL", IL);
        map.put("IT", IT);
        map.put("JM", JM);
        map.put("JP", JP);
        map.put("JE", JE);
        map.put("JO", JO);
        map.put("KZ", KZ);
        map.put("KE", KE);
        map.put("KI", KI);
        map.put("KP", KP);
        map.put("KR", KR);
        map.put("KW", KW);
        map.put("KG", KG);
        map.put("LA", LA);
        map.put("LV", LV);
        map.put("LB", LB);
        map.put("LS", LS);
        map.put("LR", LR);
        map.put("LY", LY);
        map.put("LI", LI);
        map.put("LT", LT);
        map.put("LU", LU);
        map.put("MO", MO);
        map.put("MK", MK);
        map.put("MG", MG);
        map.put("MW", MW);
        map.put("MY", MY);
        map.put("MV", MV);
        map.put("ML", ML);
        map.put("MT", MT);
        map.put("MH", MH);
        map.put("MQ", MQ);
        map.put("MR", MR);
        map.put("MU", MU);
        map.put("YT", YT);
        map.put("MX", MX);
        map.put("FM", FM);
        map.put("MD", MD);
        map.put("MC", MC);
        map.put("MN", MN);
        map.put("ME", ME);
        map.put("MS", MS);
        map.put("MA", MA);
        map.put("MZ", MZ);
        map.put("MM", MM);
        map.put("NA", NA);
        map.put("NR", NR);
        map.put("NP", NP);
        map.put("NL", NL);
        map.put("NC", NC);
        map.put("NZ", NZ);
        map.put("NI", NI);
        map.put("NE", NE);
        map.put("NG", NG);
        map.put("NU", NU);
        map.put("NF", NF);
        map.put("MP", MP);
        map.put("NO", NO);
        map.put("OM", OM);
        map.put("PK", PK);
        map.put("PW", PW);
        map.put("PS", PS);
        map.put("PA", PA);
        map.put("PG", PG);
        map.put("PY", PY);
        map.put("PE", PE);
        map.put("PH", PH);
        map.put("PN", PN);
        map.put("PL", PL);
        map.put("PT", PT);
        map.put("PR", PR);
        map.put("QA", QA);
        map.put("RO", RO);
        map.put("RU", RU);
        map.put("RW", RW);
        map.put("RE", RE);
        map.put("BL", BL);
        map.put("SH", SH);
        map.put("KN", KN);
        map.put("LC", LC);
        map.put("MF", MF);
        map.put("PM", PM);
        map.put("VC", VC);
        map.put("WS", WS);
        map.put("SM", SM);
        map.put("ST", ST);
        map.put("SA", SA);
        map.put("SN", SN);
        map.put("RS", RS);
        map.put("SC", SC);
        map.put("SL", SL);
        map.put("SG", SG);
        map.put("SX", SX);
        map.put("SK", SK);
        map.put("SI", SI);
        map.put("SB", SB);
        map.put("SO", SO);
        map.put("ZA", ZA);
        map.put("GS", GS);
        map.put("SS", SS);
        map.put("ES", ES);
        map.put("LK", LK);
        map.put("SD", SD);
        map.put("SR", SR);
        map.put("SJ", SJ);
        map.put("SZ", SZ);
        map.put("SE", SE);
        map.put("CH", CH);
        map.put("SY", SY);
        map.put("TW", TW);
        map.put("TJ", TJ);
        map.put("TZ", TZ);
        map.put("TH", TH);
        map.put("TL", TL);
        map.put("TG", TG);
        map.put("TK", TK);
        map.put("TO", TO);
        map.put("TT", TT);
        map.put("TN", TN);
        map.put("TR", TR);
        map.put("TM", TM);
        map.put("TC", TC);
        map.put("TV", TV);
        map.put("UG", UG);
        map.put("UA", UA);
        map.put("AE", AE);
        map.put("GB", GB);
        map.put("US", US);
        map.put("UM", UM);
        map.put("UY", UY);
        map.put("UZ", UZ);
        map.put("VU", VU);
        map.put("VE", VE);
        map.put("VN", VN);
        map.put("VG", VG);
        map.put("VI", VI);
        map.put("WF", WF);
        map.put("EH", EH);
        map.put("YE", YE);
        map.put("ZM", ZM);
        map.put("ZW", ZW);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, AccountAddressValueEnum> createEnumsMap() {
        Map<String, AccountAddressValueEnum> map = new HashMap<>();
        map.put("AF", AccountAddressValueEnum.AF);
        map.put("AL", AccountAddressValueEnum.AL);
        map.put("DZ", AccountAddressValueEnum.DZ);
        map.put("AS", AccountAddressValueEnum.AS);
        map.put("AD", AccountAddressValueEnum.AD);
        map.put("AO", AccountAddressValueEnum.AO);
        map.put("AI", AccountAddressValueEnum.AI);
        map.put("AQ", AccountAddressValueEnum.AQ);
        map.put("AG", AccountAddressValueEnum.AG);
        map.put("AR", AccountAddressValueEnum.AR);
        map.put("AM", AccountAddressValueEnum.AM);
        map.put("AW", AccountAddressValueEnum.AW);
        map.put("AU", AccountAddressValueEnum.AU);
        map.put("AT", AccountAddressValueEnum.AT);
        map.put("AZ", AccountAddressValueEnum.AZ);
        map.put("BS", AccountAddressValueEnum.BS);
        map.put("BH", AccountAddressValueEnum.BH);
        map.put("BD", AccountAddressValueEnum.BD);
        map.put("BB", AccountAddressValueEnum.BB);
        map.put("BY", AccountAddressValueEnum.BY);
        map.put("BE", AccountAddressValueEnum.BE);
        map.put("BZ", AccountAddressValueEnum.BZ);
        map.put("BJ", AccountAddressValueEnum.BJ);
        map.put("BM", AccountAddressValueEnum.BM);
        map.put("BT", AccountAddressValueEnum.BT);
        map.put("BO", AccountAddressValueEnum.BO);
        map.put("BQ", AccountAddressValueEnum.BQ);
        map.put("BA", AccountAddressValueEnum.BA);
        map.put("BW", AccountAddressValueEnum.BW);
        map.put("BV", AccountAddressValueEnum.BV);
        map.put("BR", AccountAddressValueEnum.BR);
        map.put("IO", AccountAddressValueEnum.IO);
        map.put("BN", AccountAddressValueEnum.BN);
        map.put("BG", AccountAddressValueEnum.BG);
        map.put("BF", AccountAddressValueEnum.BF);
        map.put("BI", AccountAddressValueEnum.BI);
        map.put("KH", AccountAddressValueEnum.KH);
        map.put("CM", AccountAddressValueEnum.CM);
        map.put("CA", AccountAddressValueEnum.CA);
        map.put("CV", AccountAddressValueEnum.CV);
        map.put("KY", AccountAddressValueEnum.KY);
        map.put("CF", AccountAddressValueEnum.CF);
        map.put("TD", AccountAddressValueEnum.TD);
        map.put("CL", AccountAddressValueEnum.CL);
        map.put("CN", AccountAddressValueEnum.CN);
        map.put("CX", AccountAddressValueEnum.CX);
        map.put("CC", AccountAddressValueEnum.CC);
        map.put("CO", AccountAddressValueEnum.CO);
        map.put("KM", AccountAddressValueEnum.KM);
        map.put("CG", AccountAddressValueEnum.CG);
        map.put("CD", AccountAddressValueEnum.CD);
        map.put("CK", AccountAddressValueEnum.CK);
        map.put("CR", AccountAddressValueEnum.CR);
        map.put("HR", AccountAddressValueEnum.HR);
        map.put("CU", AccountAddressValueEnum.CU);
        map.put("CW", AccountAddressValueEnum.CW);
        map.put("CY", AccountAddressValueEnum.CY);
        map.put("CZ", AccountAddressValueEnum.CZ);
        map.put("CI", AccountAddressValueEnum.CI);
        map.put("DK", AccountAddressValueEnum.DK);
        map.put("DJ", AccountAddressValueEnum.DJ);
        map.put("DM", AccountAddressValueEnum.DM);
        map.put("DO", AccountAddressValueEnum.DO);
        map.put("EC", AccountAddressValueEnum.EC);
        map.put("EG", AccountAddressValueEnum.EG);
        map.put("SV", AccountAddressValueEnum.SV);
        map.put("GQ", AccountAddressValueEnum.GQ);
        map.put("ER", AccountAddressValueEnum.ER);
        map.put("EE", AccountAddressValueEnum.EE);
        map.put("ET", AccountAddressValueEnum.ET);
        map.put("FK", AccountAddressValueEnum.FK);
        map.put("FO", AccountAddressValueEnum.FO);
        map.put("FJ", AccountAddressValueEnum.FJ);
        map.put("FI", AccountAddressValueEnum.FI);
        map.put("FR", AccountAddressValueEnum.FR);
        map.put("GF", AccountAddressValueEnum.GF);
        map.put("PF", AccountAddressValueEnum.PF);
        map.put("TF", AccountAddressValueEnum.TF);
        map.put("GA", AccountAddressValueEnum.GA);
        map.put("GM", AccountAddressValueEnum.GM);
        map.put("GE", AccountAddressValueEnum.GE);
        map.put("DE", AccountAddressValueEnum.DE);
        map.put("GH", AccountAddressValueEnum.GH);
        map.put("GI", AccountAddressValueEnum.GI);
        map.put("GR", AccountAddressValueEnum.GR);
        map.put("GL", AccountAddressValueEnum.GL);
        map.put("GD", AccountAddressValueEnum.GD);
        map.put("GP", AccountAddressValueEnum.GP);
        map.put("GU", AccountAddressValueEnum.GU);
        map.put("GT", AccountAddressValueEnum.GT);
        map.put("GG", AccountAddressValueEnum.GG);
        map.put("GN", AccountAddressValueEnum.GN);
        map.put("GW", AccountAddressValueEnum.GW);
        map.put("GY", AccountAddressValueEnum.GY);
        map.put("HT", AccountAddressValueEnum.HT);
        map.put("HM", AccountAddressValueEnum.HM);
        map.put("VA", AccountAddressValueEnum.VA);
        map.put("HN", AccountAddressValueEnum.HN);
        map.put("HK", AccountAddressValueEnum.HK);
        map.put("HU", AccountAddressValueEnum.HU);
        map.put("IS", AccountAddressValueEnum.IS);
        map.put("IN", AccountAddressValueEnum.IN);
        map.put("ID", AccountAddressValueEnum.ID);
        map.put("IR", AccountAddressValueEnum.IR);
        map.put("IQ", AccountAddressValueEnum.IQ);
        map.put("IE", AccountAddressValueEnum.IE);
        map.put("IM", AccountAddressValueEnum.IM);
        map.put("IL", AccountAddressValueEnum.IL);
        map.put("IT", AccountAddressValueEnum.IT);
        map.put("JM", AccountAddressValueEnum.JM);
        map.put("JP", AccountAddressValueEnum.JP);
        map.put("JE", AccountAddressValueEnum.JE);
        map.put("JO", AccountAddressValueEnum.JO);
        map.put("KZ", AccountAddressValueEnum.KZ);
        map.put("KE", AccountAddressValueEnum.KE);
        map.put("KI", AccountAddressValueEnum.KI);
        map.put("KP", AccountAddressValueEnum.KP);
        map.put("KR", AccountAddressValueEnum.KR);
        map.put("KW", AccountAddressValueEnum.KW);
        map.put("KG", AccountAddressValueEnum.KG);
        map.put("LA", AccountAddressValueEnum.LA);
        map.put("LV", AccountAddressValueEnum.LV);
        map.put("LB", AccountAddressValueEnum.LB);
        map.put("LS", AccountAddressValueEnum.LS);
        map.put("LR", AccountAddressValueEnum.LR);
        map.put("LY", AccountAddressValueEnum.LY);
        map.put("LI", AccountAddressValueEnum.LI);
        map.put("LT", AccountAddressValueEnum.LT);
        map.put("LU", AccountAddressValueEnum.LU);
        map.put("MO", AccountAddressValueEnum.MO);
        map.put("MK", AccountAddressValueEnum.MK);
        map.put("MG", AccountAddressValueEnum.MG);
        map.put("MW", AccountAddressValueEnum.MW);
        map.put("MY", AccountAddressValueEnum.MY);
        map.put("MV", AccountAddressValueEnum.MV);
        map.put("ML", AccountAddressValueEnum.ML);
        map.put("MT", AccountAddressValueEnum.MT);
        map.put("MH", AccountAddressValueEnum.MH);
        map.put("MQ", AccountAddressValueEnum.MQ);
        map.put("MR", AccountAddressValueEnum.MR);
        map.put("MU", AccountAddressValueEnum.MU);
        map.put("YT", AccountAddressValueEnum.YT);
        map.put("MX", AccountAddressValueEnum.MX);
        map.put("FM", AccountAddressValueEnum.FM);
        map.put("MD", AccountAddressValueEnum.MD);
        map.put("MC", AccountAddressValueEnum.MC);
        map.put("MN", AccountAddressValueEnum.MN);
        map.put("ME", AccountAddressValueEnum.ME);
        map.put("MS", AccountAddressValueEnum.MS);
        map.put("MA", AccountAddressValueEnum.MA);
        map.put("MZ", AccountAddressValueEnum.MZ);
        map.put("MM", AccountAddressValueEnum.MM);
        map.put("NA", AccountAddressValueEnum.NA);
        map.put("NR", AccountAddressValueEnum.NR);
        map.put("NP", AccountAddressValueEnum.NP);
        map.put("NL", AccountAddressValueEnum.NL);
        map.put("NC", AccountAddressValueEnum.NC);
        map.put("NZ", AccountAddressValueEnum.NZ);
        map.put("NI", AccountAddressValueEnum.NI);
        map.put("NE", AccountAddressValueEnum.NE);
        map.put("NG", AccountAddressValueEnum.NG);
        map.put("NU", AccountAddressValueEnum.NU);
        map.put("NF", AccountAddressValueEnum.NF);
        map.put("MP", AccountAddressValueEnum.MP);
        map.put("NO", AccountAddressValueEnum.NO);
        map.put("OM", AccountAddressValueEnum.OM);
        map.put("PK", AccountAddressValueEnum.PK);
        map.put("PW", AccountAddressValueEnum.PW);
        map.put("PS", AccountAddressValueEnum.PS);
        map.put("PA", AccountAddressValueEnum.PA);
        map.put("PG", AccountAddressValueEnum.PG);
        map.put("PY", AccountAddressValueEnum.PY);
        map.put("PE", AccountAddressValueEnum.PE);
        map.put("PH", AccountAddressValueEnum.PH);
        map.put("PN", AccountAddressValueEnum.PN);
        map.put("PL", AccountAddressValueEnum.PL);
        map.put("PT", AccountAddressValueEnum.PT);
        map.put("PR", AccountAddressValueEnum.PR);
        map.put("QA", AccountAddressValueEnum.QA);
        map.put("RO", AccountAddressValueEnum.RO);
        map.put("RU", AccountAddressValueEnum.RU);
        map.put("RW", AccountAddressValueEnum.RW);
        map.put("RE", AccountAddressValueEnum.RE);
        map.put("BL", AccountAddressValueEnum.BL);
        map.put("SH", AccountAddressValueEnum.SH);
        map.put("KN", AccountAddressValueEnum.KN);
        map.put("LC", AccountAddressValueEnum.LC);
        map.put("MF", AccountAddressValueEnum.MF);
        map.put("PM", AccountAddressValueEnum.PM);
        map.put("VC", AccountAddressValueEnum.VC);
        map.put("WS", AccountAddressValueEnum.WS);
        map.put("SM", AccountAddressValueEnum.SM);
        map.put("ST", AccountAddressValueEnum.ST);
        map.put("SA", AccountAddressValueEnum.SA);
        map.put("SN", AccountAddressValueEnum.SN);
        map.put("RS", AccountAddressValueEnum.RS);
        map.put("SC", AccountAddressValueEnum.SC);
        map.put("SL", AccountAddressValueEnum.SL);
        map.put("SG", AccountAddressValueEnum.SG);
        map.put("SX", AccountAddressValueEnum.SX);
        map.put("SK", AccountAddressValueEnum.SK);
        map.put("SI", AccountAddressValueEnum.SI);
        map.put("SB", AccountAddressValueEnum.SB);
        map.put("SO", AccountAddressValueEnum.SO);
        map.put("ZA", AccountAddressValueEnum.ZA);
        map.put("GS", AccountAddressValueEnum.GS);
        map.put("SS", AccountAddressValueEnum.SS);
        map.put("ES", AccountAddressValueEnum.ES);
        map.put("LK", AccountAddressValueEnum.LK);
        map.put("SD", AccountAddressValueEnum.SD);
        map.put("SR", AccountAddressValueEnum.SR);
        map.put("SJ", AccountAddressValueEnum.SJ);
        map.put("SZ", AccountAddressValueEnum.SZ);
        map.put("SE", AccountAddressValueEnum.SE);
        map.put("CH", AccountAddressValueEnum.CH);
        map.put("SY", AccountAddressValueEnum.SY);
        map.put("TW", AccountAddressValueEnum.TW);
        map.put("TJ", AccountAddressValueEnum.TJ);
        map.put("TZ", AccountAddressValueEnum.TZ);
        map.put("TH", AccountAddressValueEnum.TH);
        map.put("TL", AccountAddressValueEnum.TL);
        map.put("TG", AccountAddressValueEnum.TG);
        map.put("TK", AccountAddressValueEnum.TK);
        map.put("TO", AccountAddressValueEnum.TO);
        map.put("TT", AccountAddressValueEnum.TT);
        map.put("TN", AccountAddressValueEnum.TN);
        map.put("TR", AccountAddressValueEnum.TR);
        map.put("TM", AccountAddressValueEnum.TM);
        map.put("TC", AccountAddressValueEnum.TC);
        map.put("TV", AccountAddressValueEnum.TV);
        map.put("UG", AccountAddressValueEnum.UG);
        map.put("UA", AccountAddressValueEnum.UA);
        map.put("AE", AccountAddressValueEnum.AE);
        map.put("GB", AccountAddressValueEnum.GB);
        map.put("US", AccountAddressValueEnum.US);
        map.put("UM", AccountAddressValueEnum.UM);
        map.put("UY", AccountAddressValueEnum.UY);
        map.put("UZ", AccountAddressValueEnum.UZ);
        map.put("VU", AccountAddressValueEnum.VU);
        map.put("VE", AccountAddressValueEnum.VE);
        map.put("VN", AccountAddressValueEnum.VN);
        map.put("VG", AccountAddressValueEnum.VG);
        map.put("VI", AccountAddressValueEnum.VI);
        map.put("WF", AccountAddressValueEnum.WF);
        map.put("EH", AccountAddressValueEnum.EH);
        map.put("YE", AccountAddressValueEnum.YE);
        map.put("ZM", AccountAddressValueEnum.ZM);
        map.put("ZW", AccountAddressValueEnum.ZW);
        map.put("unmapped_value", AccountAddressValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<AccountAddressValue> {

        protected _Serializer() {
            super(AccountAddressValue.class);
        }

        @Override
        public void serialize(AccountAddressValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<AccountAddressValue> {

        protected _Deserializer() {
            super(AccountAddressValue.class);
        }

        @Override
        public AccountAddressValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return AccountAddressValue.of(v);
        }
    }
    
    public enum AccountAddressValueEnum {

        AF("AF"),
        AL("AL"),
        DZ("DZ"),
        AS("AS"),
        AD("AD"),
        AO("AO"),
        AI("AI"),
        AQ("AQ"),
        AG("AG"),
        AR("AR"),
        AM("AM"),
        AW("AW"),
        AU("AU"),
        AT("AT"),
        AZ("AZ"),
        BS("BS"),
        BH("BH"),
        BD("BD"),
        BB("BB"),
        BY("BY"),
        BE("BE"),
        BZ("BZ"),
        BJ("BJ"),
        BM("BM"),
        BT("BT"),
        BO("BO"),
        BQ("BQ"),
        BA("BA"),
        BW("BW"),
        BV("BV"),
        BR("BR"),
        IO("IO"),
        BN("BN"),
        BG("BG"),
        BF("BF"),
        BI("BI"),
        KH("KH"),
        CM("CM"),
        CA("CA"),
        CV("CV"),
        KY("KY"),
        CF("CF"),
        TD("TD"),
        CL("CL"),
        CN("CN"),
        CX("CX"),
        CC("CC"),
        CO("CO"),
        KM("KM"),
        CG("CG"),
        CD("CD"),
        CK("CK"),
        CR("CR"),
        HR("HR"),
        CU("CU"),
        CW("CW"),
        CY("CY"),
        CZ("CZ"),
        CI("CI"),
        DK("DK"),
        DJ("DJ"),
        DM("DM"),
        DO("DO"),
        EC("EC"),
        EG("EG"),
        SV("SV"),
        GQ("GQ"),
        ER("ER"),
        EE("EE"),
        ET("ET"),
        FK("FK"),
        FO("FO"),
        FJ("FJ"),
        FI("FI"),
        FR("FR"),
        GF("GF"),
        PF("PF"),
        TF("TF"),
        GA("GA"),
        GM("GM"),
        GE("GE"),
        DE("DE"),
        GH("GH"),
        GI("GI"),
        GR("GR"),
        GL("GL"),
        GD("GD"),
        GP("GP"),
        GU("GU"),
        GT("GT"),
        GG("GG"),
        GN("GN"),
        GW("GW"),
        GY("GY"),
        HT("HT"),
        HM("HM"),
        VA("VA"),
        HN("HN"),
        HK("HK"),
        HU("HU"),
        IS("IS"),
        IN("IN"),
        ID("ID"),
        IR("IR"),
        IQ("IQ"),
        IE("IE"),
        IM("IM"),
        IL("IL"),
        IT("IT"),
        JM("JM"),
        JP("JP"),
        JE("JE"),
        JO("JO"),
        KZ("KZ"),
        KE("KE"),
        KI("KI"),
        KP("KP"),
        KR("KR"),
        KW("KW"),
        KG("KG"),
        LA("LA"),
        LV("LV"),
        LB("LB"),
        LS("LS"),
        LR("LR"),
        LY("LY"),
        LI("LI"),
        LT("LT"),
        LU("LU"),
        MO("MO"),
        MK("MK"),
        MG("MG"),
        MW("MW"),
        MY("MY"),
        MV("MV"),
        ML("ML"),
        MT("MT"),
        MH("MH"),
        MQ("MQ"),
        MR("MR"),
        MU("MU"),
        YT("YT"),
        MX("MX"),
        FM("FM"),
        MD("MD"),
        MC("MC"),
        MN("MN"),
        ME("ME"),
        MS("MS"),
        MA("MA"),
        MZ("MZ"),
        MM("MM"),
        NA("NA"),
        NR("NR"),
        NP("NP"),
        NL("NL"),
        NC("NC"),
        NZ("NZ"),
        NI("NI"),
        NE("NE"),
        NG("NG"),
        NU("NU"),
        NF("NF"),
        MP("MP"),
        NO("NO"),
        OM("OM"),
        PK("PK"),
        PW("PW"),
        PS("PS"),
        PA("PA"),
        PG("PG"),
        PY("PY"),
        PE("PE"),
        PH("PH"),
        PN("PN"),
        PL("PL"),
        PT("PT"),
        PR("PR"),
        QA("QA"),
        RO("RO"),
        RU("RU"),
        RW("RW"),
        RE("RE"),
        BL("BL"),
        SH("SH"),
        KN("KN"),
        LC("LC"),
        MF("MF"),
        PM("PM"),
        VC("VC"),
        WS("WS"),
        SM("SM"),
        ST("ST"),
        SA("SA"),
        SN("SN"),
        RS("RS"),
        SC("SC"),
        SL("SL"),
        SG("SG"),
        SX("SX"),
        SK("SK"),
        SI("SI"),
        SB("SB"),
        SO("SO"),
        ZA("ZA"),
        GS("GS"),
        SS("SS"),
        ES("ES"),
        LK("LK"),
        SD("SD"),
        SR("SR"),
        SJ("SJ"),
        SZ("SZ"),
        SE("SE"),
        CH("CH"),
        SY("SY"),
        TW("TW"),
        TJ("TJ"),
        TZ("TZ"),
        TH("TH"),
        TL("TL"),
        TG("TG"),
        TK("TK"),
        TO("TO"),
        TT("TT"),
        TN("TN"),
        TR("TR"),
        TM("TM"),
        TC("TC"),
        TV("TV"),
        UG("UG"),
        UA("UA"),
        AE("AE"),
        GB("GB"),
        US("US"),
        UM("UM"),
        UY("UY"),
        UZ("UZ"),
        VU("VU"),
        VE("VE"),
        VN("VN"),
        VG("VG"),
        VI("VI"),
        WF("WF"),
        EH("EH"),
        YE("YE"),
        ZM("ZM"),
        ZW("ZW"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private AccountAddressValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

