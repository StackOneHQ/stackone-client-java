/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.stackone.stackone_client_java.models.components;
import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = EmploymentTypeValue._Deserializer.class)
@JsonSerialize(using = EmploymentTypeValue._Serializer.class)
public class EmploymentTypeValue {

    public static final EmploymentTypeValue CONTRACTOR = new EmploymentTypeValue("contractor");
    public static final EmploymentTypeValue INTERN = new EmploymentTypeValue("intern");
    public static final EmploymentTypeValue PERMANENT = new EmploymentTypeValue("permanent");
    public static final EmploymentTypeValue APPRENTICE = new EmploymentTypeValue("apprentice");
    public static final EmploymentTypeValue FREELANCE = new EmploymentTypeValue("freelance");
    public static final EmploymentTypeValue TERMINATED = new EmploymentTypeValue("terminated");
    public static final EmploymentTypeValue TEMPORARY = new EmploymentTypeValue("temporary");
    public static final EmploymentTypeValue SEASONAL = new EmploymentTypeValue("seasonal");
    public static final EmploymentTypeValue VOLUNTEER = new EmploymentTypeValue("volunteer");
    public static final EmploymentTypeValue PROBATION = new EmploymentTypeValue("probation");
    public static final EmploymentTypeValue INTERNAL = new EmploymentTypeValue("internal");
    public static final EmploymentTypeValue EXTERNAL = new EmploymentTypeValue("external");
    public static final EmploymentTypeValue EXPATRIATE = new EmploymentTypeValue("expatriate");
    public static final EmploymentTypeValue EMPLOYER_OF_RECORD = new EmploymentTypeValue("employer_of_record");
    public static final EmploymentTypeValue CASUAL = new EmploymentTypeValue("casual");
    public static final EmploymentTypeValue PROGRAMME = new EmploymentTypeValue("Programme");
    public static final EmploymentTypeValue UNMAPPED_VALUE = new EmploymentTypeValue("unmapped_value");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, EmploymentTypeValue> values = createValuesMap();
    private static final Map<String, EmploymentTypeValueEnum> enums = createEnumsMap();

    private final String value;

    private EmploymentTypeValue(String value) {
        this.value = value;
    }

    /**
     * Returns a EmploymentTypeValue with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as EmploymentTypeValue
     */ 
    public static EmploymentTypeValue of(String value) {
        synchronized (EmploymentTypeValue.class) {
            return values.computeIfAbsent(value, v -> new EmploymentTypeValue(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<EmploymentTypeValueEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        EmploymentTypeValue other = (EmploymentTypeValue) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "EmploymentTypeValue [value=" + value + "]";
    }

    // return an array just like an enum
    public static EmploymentTypeValue[] values() {
        synchronized (EmploymentTypeValue.class) {
            return values.values().toArray(new EmploymentTypeValue[] {});
        }
    }

    private static final Map<String, EmploymentTypeValue> createValuesMap() {
        Map<String, EmploymentTypeValue> map = new LinkedHashMap<>();
        map.put("contractor", CONTRACTOR);
        map.put("intern", INTERN);
        map.put("permanent", PERMANENT);
        map.put("apprentice", APPRENTICE);
        map.put("freelance", FREELANCE);
        map.put("terminated", TERMINATED);
        map.put("temporary", TEMPORARY);
        map.put("seasonal", SEASONAL);
        map.put("volunteer", VOLUNTEER);
        map.put("probation", PROBATION);
        map.put("internal", INTERNAL);
        map.put("external", EXTERNAL);
        map.put("expatriate", EXPATRIATE);
        map.put("employer_of_record", EMPLOYER_OF_RECORD);
        map.put("casual", CASUAL);
        map.put("Programme", PROGRAMME);
        map.put("unmapped_value", UNMAPPED_VALUE);
        return map;
    }

    private static final Map<String, EmploymentTypeValueEnum> createEnumsMap() {
        Map<String, EmploymentTypeValueEnum> map = new HashMap<>();
        map.put("contractor", EmploymentTypeValueEnum.CONTRACTOR);
        map.put("intern", EmploymentTypeValueEnum.INTERN);
        map.put("permanent", EmploymentTypeValueEnum.PERMANENT);
        map.put("apprentice", EmploymentTypeValueEnum.APPRENTICE);
        map.put("freelance", EmploymentTypeValueEnum.FREELANCE);
        map.put("terminated", EmploymentTypeValueEnum.TERMINATED);
        map.put("temporary", EmploymentTypeValueEnum.TEMPORARY);
        map.put("seasonal", EmploymentTypeValueEnum.SEASONAL);
        map.put("volunteer", EmploymentTypeValueEnum.VOLUNTEER);
        map.put("probation", EmploymentTypeValueEnum.PROBATION);
        map.put("internal", EmploymentTypeValueEnum.INTERNAL);
        map.put("external", EmploymentTypeValueEnum.EXTERNAL);
        map.put("expatriate", EmploymentTypeValueEnum.EXPATRIATE);
        map.put("employer_of_record", EmploymentTypeValueEnum.EMPLOYER_OF_RECORD);
        map.put("casual", EmploymentTypeValueEnum.CASUAL);
        map.put("Programme", EmploymentTypeValueEnum.PROGRAMME);
        map.put("unmapped_value", EmploymentTypeValueEnum.UNMAPPED_VALUE);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<EmploymentTypeValue> {

        protected _Serializer() {
            super(EmploymentTypeValue.class);
        }

        @Override
        public void serialize(EmploymentTypeValue value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<EmploymentTypeValue> {

        protected _Deserializer() {
            super(EmploymentTypeValue.class);
        }

        @Override
        public EmploymentTypeValue deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return EmploymentTypeValue.of(v);
        }
    }
    
    public enum EmploymentTypeValueEnum {

        CONTRACTOR("contractor"),
        INTERN("intern"),
        PERMANENT("permanent"),
        APPRENTICE("apprentice"),
        FREELANCE("freelance"),
        TERMINATED("terminated"),
        TEMPORARY("temporary"),
        SEASONAL("seasonal"),
        VOLUNTEER("volunteer"),
        PROBATION("probation"),
        INTERNAL("internal"),
        EXTERNAL("external"),
        EXPATRIATE("expatriate"),
        EMPLOYER_OF_RECORD("employer_of_record"),
        CASUAL("casual"),
        PROGRAMME("Programme"),
        UNMAPPED_VALUE("unmapped_value"),;

        private final String value;

        private EmploymentTypeValueEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}
