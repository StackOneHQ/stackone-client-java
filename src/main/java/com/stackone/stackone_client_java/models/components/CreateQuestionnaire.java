/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateQuestionnaire {

    /**
     * Unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answers")
    private JsonNullable<? extends List<CreateAnswer>> answers;

    @JsonCreator
    public CreateQuestionnaire(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("answers") JsonNullable<? extends List<CreateAnswer>> answers) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(answers, "answers");
        this.id = id;
        this.answers = answers;
    }
    
    public CreateQuestionnaire() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<CreateAnswer>> answers() {
        return (JsonNullable<List<CreateAnswer>>) answers;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier
     */
    public CreateQuestionnaire withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier
     */
    public CreateQuestionnaire withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CreateQuestionnaire withAnswers(List<CreateAnswer> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = JsonNullable.of(answers);
        return this;
    }

    public CreateQuestionnaire withAnswers(JsonNullable<? extends List<CreateAnswer>> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = answers;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateQuestionnaire other = (CreateQuestionnaire) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.answers, other.answers);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            answers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateQuestionnaire.class,
                "id", id,
                "answers", answers);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private JsonNullable<? extends List<CreateAnswer>> answers = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder answers(List<CreateAnswer> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = JsonNullable.of(answers);
            return this;
        }

        public Builder answers(JsonNullable<? extends List<CreateAnswer>> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = answers;
            return this;
        }
        
        public CreateQuestionnaire build() {
            return new CreateQuestionnaire(
                id,
                answers);
        }
    }
}
