/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;


public class ClearingCode {
    /**
     * The type of clearing code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends ClearingCodeType> type;

    /**
     * The clearing code value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<String> value;

    @JsonCreator
    public ClearingCode(
            @JsonProperty("type") JsonNullable<? extends ClearingCodeType> type,
            @JsonProperty("value") JsonNullable<String> value) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(value, "value");
        this.type = type;
        this.value = value;
    }
    
    public ClearingCode() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The type of clearing code
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ClearingCodeType> type() {
        return (JsonNullable<ClearingCodeType>) type;
    }

    /**
     * The clearing code value
     */
    @JsonIgnore
    public JsonNullable<String> value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of clearing code
     */
    public ClearingCode withType(ClearingCodeType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of clearing code
     */
    public ClearingCode withType(JsonNullable<? extends ClearingCodeType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The clearing code value
     */
    public ClearingCode withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = JsonNullable.of(value);
        return this;
    }

    /**
     * The clearing code value
     */
    public ClearingCode withValue(JsonNullable<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClearingCode other = (ClearingCode) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClearingCode.class,
                "type", type,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<? extends ClearingCodeType> type = JsonNullable.undefined();

        private JsonNullable<String> value = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of clearing code
         */
        public Builder type(ClearingCodeType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of clearing code
         */
        public Builder type(JsonNullable<? extends ClearingCodeType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The clearing code value
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = JsonNullable.of(value);
            return this;
        }

        /**
         * The clearing code value
         */
        public Builder value(JsonNullable<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public ClearingCode build() {

            return new ClearingCode(
                type, value);
        }

    }
}
