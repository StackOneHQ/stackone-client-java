/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.stackone.stackone_client_java.utils.LazySingletonValue;
import com.stackone.stackone_client_java.utils.SpeakeasyMetadata;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;


public class StackoneListActionsMetaRequest {
    /**
     * The page number of the results to fetch
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    @Deprecated
    private JsonNullable<String> page;

    /**
     * The number of results per page (default value is 25)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page_size")
    private JsonNullable<String> pageSize;

    /**
     * The unified cursor
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=next")
    private JsonNullable<String> next;

    /**
     * The relation to group the results by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=group_by")
    private JsonNullable<String> groupBy;

    /**
     * Actions Metadata filters
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=filter")
    private JsonNullable<? extends StackoneListActionsMetaQueryParamFilter> filter;

    /**
     * Additional data to include in the response
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    private JsonNullable<? extends List<StackoneListActionsMetaQueryParamInclude>> include;

    @JsonCreator
    public StackoneListActionsMetaRequest(
            JsonNullable<String> page,
            JsonNullable<String> pageSize,
            JsonNullable<String> next,
            JsonNullable<String> groupBy,
            JsonNullable<? extends StackoneListActionsMetaQueryParamFilter> filter,
            JsonNullable<? extends List<StackoneListActionsMetaQueryParamInclude>> include) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(groupBy, "groupBy");
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(include, "include");
        this.page = page;
        this.pageSize = pageSize;
        this.next = next;
        this.groupBy = groupBy;
        this.filter = filter;
        this.include = include;
    }
    
    public StackoneListActionsMetaRequest() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The page number of the results to fetch
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public JsonNullable<String> page() {
        return page;
    }

    /**
     * The number of results per page (default value is 25)
     */
    @JsonIgnore
    public JsonNullable<String> pageSize() {
        return pageSize;
    }

    /**
     * The unified cursor
     */
    @JsonIgnore
    public JsonNullable<String> next() {
        return next;
    }

    /**
     * The relation to group the results by
     */
    @JsonIgnore
    public JsonNullable<String> groupBy() {
        return groupBy;
    }

    /**
     * Actions Metadata filters
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StackoneListActionsMetaQueryParamFilter> filter() {
        return (JsonNullable<StackoneListActionsMetaQueryParamFilter>) filter;
    }

    /**
     * Additional data to include in the response
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<StackoneListActionsMetaQueryParamInclude>> include() {
        return (JsonNullable<List<StackoneListActionsMetaQueryParamInclude>>) include;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The page number of the results to fetch
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public StackoneListActionsMetaRequest withPage(String page) {
        Utils.checkNotNull(page, "page");
        this.page = JsonNullable.of(page);
        return this;
    }

    /**
     * The page number of the results to fetch
     * 
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public StackoneListActionsMetaRequest withPage(JsonNullable<String> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * The number of results per page (default value is 25)
     */
    public StackoneListActionsMetaRequest withPageSize(String pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = JsonNullable.of(pageSize);
        return this;
    }

    /**
     * The number of results per page (default value is 25)
     */
    public StackoneListActionsMetaRequest withPageSize(JsonNullable<String> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The unified cursor
     */
    public StackoneListActionsMetaRequest withNext(String next) {
        Utils.checkNotNull(next, "next");
        this.next = JsonNullable.of(next);
        return this;
    }

    /**
     * The unified cursor
     */
    public StackoneListActionsMetaRequest withNext(JsonNullable<String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * The relation to group the results by
     */
    public StackoneListActionsMetaRequest withGroupBy(String groupBy) {
        Utils.checkNotNull(groupBy, "groupBy");
        this.groupBy = JsonNullable.of(groupBy);
        return this;
    }

    /**
     * The relation to group the results by
     */
    public StackoneListActionsMetaRequest withGroupBy(JsonNullable<String> groupBy) {
        Utils.checkNotNull(groupBy, "groupBy");
        this.groupBy = groupBy;
        return this;
    }

    /**
     * Actions Metadata filters
     */
    public StackoneListActionsMetaRequest withFilter(StackoneListActionsMetaQueryParamFilter filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = JsonNullable.of(filter);
        return this;
    }

    /**
     * Actions Metadata filters
     */
    public StackoneListActionsMetaRequest withFilter(JsonNullable<? extends StackoneListActionsMetaQueryParamFilter> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    /**
     * Additional data to include in the response
     */
    public StackoneListActionsMetaRequest withInclude(List<StackoneListActionsMetaQueryParamInclude> include) {
        Utils.checkNotNull(include, "include");
        this.include = JsonNullable.of(include);
        return this;
    }

    /**
     * Additional data to include in the response
     */
    public StackoneListActionsMetaRequest withInclude(JsonNullable<? extends List<StackoneListActionsMetaQueryParamInclude>> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StackoneListActionsMetaRequest other = (StackoneListActionsMetaRequest) o;
        return 
            Utils.enhancedDeepEquals(this.page, other.page) &&
            Utils.enhancedDeepEquals(this.pageSize, other.pageSize) &&
            Utils.enhancedDeepEquals(this.next, other.next) &&
            Utils.enhancedDeepEquals(this.groupBy, other.groupBy) &&
            Utils.enhancedDeepEquals(this.filter, other.filter) &&
            Utils.enhancedDeepEquals(this.include, other.include);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            page, pageSize, next,
            groupBy, filter, include);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StackoneListActionsMetaRequest.class,
                "page", page,
                "pageSize", pageSize,
                "next", next,
                "groupBy", groupBy,
                "filter", filter,
                "include", include);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        @Deprecated
        private JsonNullable<String> page = JsonNullable.undefined();

        private JsonNullable<String> pageSize = JsonNullable.undefined();

        private JsonNullable<String> next = JsonNullable.undefined();

        private JsonNullable<String> groupBy;

        private JsonNullable<? extends StackoneListActionsMetaQueryParamFilter> filter = JsonNullable.undefined();

        private JsonNullable<? extends List<StackoneListActionsMetaQueryParamInclude>> include = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The page number of the results to fetch
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder page(String page) {
            Utils.checkNotNull(page, "page");
            this.page = JsonNullable.of(page);
            return this;
        }

        /**
         * The page number of the results to fetch
         * 
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder page(JsonNullable<String> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }


        /**
         * The number of results per page (default value is 25)
         */
        public Builder pageSize(String pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = JsonNullable.of(pageSize);
            return this;
        }

        /**
         * The number of results per page (default value is 25)
         */
        public Builder pageSize(JsonNullable<String> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }


        /**
         * The unified cursor
         */
        public Builder next(String next) {
            Utils.checkNotNull(next, "next");
            this.next = JsonNullable.of(next);
            return this;
        }

        /**
         * The unified cursor
         */
        public Builder next(JsonNullable<String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }


        /**
         * The relation to group the results by
         */
        public Builder groupBy(String groupBy) {
            Utils.checkNotNull(groupBy, "groupBy");
            this.groupBy = JsonNullable.of(groupBy);
            return this;
        }

        /**
         * The relation to group the results by
         */
        public Builder groupBy(JsonNullable<String> groupBy) {
            Utils.checkNotNull(groupBy, "groupBy");
            this.groupBy = groupBy;
            return this;
        }


        /**
         * Actions Metadata filters
         */
        public Builder filter(StackoneListActionsMetaQueryParamFilter filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = JsonNullable.of(filter);
            return this;
        }

        /**
         * Actions Metadata filters
         */
        public Builder filter(JsonNullable<? extends StackoneListActionsMetaQueryParamFilter> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }


        /**
         * Additional data to include in the response
         */
        public Builder include(List<StackoneListActionsMetaQueryParamInclude> include) {
            Utils.checkNotNull(include, "include");
            this.include = JsonNullable.of(include);
            return this;
        }

        /**
         * Additional data to include in the response
         */
        public Builder include(JsonNullable<? extends List<StackoneListActionsMetaQueryParamInclude>> include) {
            Utils.checkNotNull(include, "include");
            this.include = include;
            return this;
        }

        public StackoneListActionsMetaRequest build() {
            if (groupBy == null) {
                groupBy = _SINGLETON_VALUE_GroupBy.value();
            }

            return new StackoneListActionsMetaRequest(
                page, pageSize, next,
                groupBy, filter, include);
        }


        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_GroupBy =
                new LazySingletonValue<>(
                        "group_by",
                        "\"connector\"",
                        new TypeReference<JsonNullable<String>>() {});
    }
}
