/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.stackone.stackone_client_java.utils.SpeakeasyMetadata;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * QueryParamFilter
 * 
 * <p>Filter parameters that allow greater customisation of the list response
 */
public class QueryParamFilter {
    /**
     * A comma-separated list of account IDs to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=account_ids")
    private JsonNullable<String> accountIds;

    /**
     * A ISO8601 date string to filter the results by start_date.
     */
    @SpeakeasyMetadata("queryParam:name=start_date")
    private JsonNullable<String> startDate;

    /**
     * A ISO8601 date string to filter the results by end_date.
     */
    @SpeakeasyMetadata("queryParam:name=end_date")
    private JsonNullable<String> endDate;

    /**
     * A comma-separated list of request IDs to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=request_ids")
    private JsonNullable<String> requestIds;

    /**
     * A comma-separated list of source types to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=source_types")
    private JsonNullable<String> sourceTypes;

    /**
     * A comma-separated list of source values to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=source_values")
    private JsonNullable<String> sourceValues;

    /**
     * A comma-separated list of source IDs to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=source_ids")
    private JsonNullable<String> sourceIds;

    /**
     * A comma-separated list of HTTP methods to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=http_methods")
    private JsonNullable<String> httpMethods;

    /**
     * A comma-separated list of provider keys to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=providers")
    private JsonNullable<String> providers;

    /**
     * A comma-separated list of services to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=services")
    private JsonNullable<String> services;

    /**
     * A comma-separated list of resources to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=resources")
    private JsonNullable<String> resources;

    /**
     * A comma-separated list of child resources to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=child_resources")
    private JsonNullable<String> childResources;

    /**
     * A comma-separated list of sub resources to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=sub_resources")
    private JsonNullable<String> subResources;

    /**
     * A comma-separated list of actions to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=actions")
    private JsonNullable<String> actions;

    /**
     * A comma-separated list of status codes to filter the results by.
     */
    @SpeakeasyMetadata("queryParam:name=status_codes")
    private JsonNullable<String> statusCodes;

    /**
     * A boolean value to filter the results by success or failure.
     */
    @SpeakeasyMetadata("queryParam:name=success")
    private JsonNullable<Boolean> success;

    /**
     * The field to order the results by.
     */
    @SpeakeasyMetadata("queryParam:name=order_by")
    private JsonNullable<? extends StackoneListLogsQueryParamOrderBy> orderBy;

    /**
     * The direction to order the results by.
     */
    @SpeakeasyMetadata("queryParam:name=order_direction")
    private JsonNullable<? extends StackoneListLogsQueryParamOrderDirection> orderDirection;

    @JsonCreator
    public QueryParamFilter(
            JsonNullable<String> accountIds,
            JsonNullable<String> startDate,
            JsonNullable<String> endDate,
            JsonNullable<String> requestIds,
            JsonNullable<String> sourceTypes,
            JsonNullable<String> sourceValues,
            JsonNullable<String> sourceIds,
            JsonNullable<String> httpMethods,
            JsonNullable<String> providers,
            JsonNullable<String> services,
            JsonNullable<String> resources,
            JsonNullable<String> childResources,
            JsonNullable<String> subResources,
            JsonNullable<String> actions,
            JsonNullable<String> statusCodes,
            JsonNullable<Boolean> success,
            JsonNullable<? extends StackoneListLogsQueryParamOrderBy> orderBy,
            JsonNullable<? extends StackoneListLogsQueryParamOrderDirection> orderDirection) {
        Utils.checkNotNull(accountIds, "accountIds");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(requestIds, "requestIds");
        Utils.checkNotNull(sourceTypes, "sourceTypes");
        Utils.checkNotNull(sourceValues, "sourceValues");
        Utils.checkNotNull(sourceIds, "sourceIds");
        Utils.checkNotNull(httpMethods, "httpMethods");
        Utils.checkNotNull(providers, "providers");
        Utils.checkNotNull(services, "services");
        Utils.checkNotNull(resources, "resources");
        Utils.checkNotNull(childResources, "childResources");
        Utils.checkNotNull(subResources, "subResources");
        Utils.checkNotNull(actions, "actions");
        Utils.checkNotNull(statusCodes, "statusCodes");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(orderDirection, "orderDirection");
        this.accountIds = accountIds;
        this.startDate = startDate;
        this.endDate = endDate;
        this.requestIds = requestIds;
        this.sourceTypes = sourceTypes;
        this.sourceValues = sourceValues;
        this.sourceIds = sourceIds;
        this.httpMethods = httpMethods;
        this.providers = providers;
        this.services = services;
        this.resources = resources;
        this.childResources = childResources;
        this.subResources = subResources;
        this.actions = actions;
        this.statusCodes = statusCodes;
        this.success = success;
        this.orderBy = orderBy;
        this.orderDirection = orderDirection;
    }
    
    public QueryParamFilter() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A comma-separated list of account IDs to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> accountIds() {
        return accountIds;
    }

    /**
     * A ISO8601 date string to filter the results by start_date.
     */
    @JsonIgnore
    public JsonNullable<String> startDate() {
        return startDate;
    }

    /**
     * A ISO8601 date string to filter the results by end_date.
     */
    @JsonIgnore
    public JsonNullable<String> endDate() {
        return endDate;
    }

    /**
     * A comma-separated list of request IDs to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> requestIds() {
        return requestIds;
    }

    /**
     * A comma-separated list of source types to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> sourceTypes() {
        return sourceTypes;
    }

    /**
     * A comma-separated list of source values to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> sourceValues() {
        return sourceValues;
    }

    /**
     * A comma-separated list of source IDs to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> sourceIds() {
        return sourceIds;
    }

    /**
     * A comma-separated list of HTTP methods to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> httpMethods() {
        return httpMethods;
    }

    /**
     * A comma-separated list of provider keys to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> providers() {
        return providers;
    }

    /**
     * A comma-separated list of services to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> services() {
        return services;
    }

    /**
     * A comma-separated list of resources to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> resources() {
        return resources;
    }

    /**
     * A comma-separated list of child resources to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> childResources() {
        return childResources;
    }

    /**
     * A comma-separated list of sub resources to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> subResources() {
        return subResources;
    }

    /**
     * A comma-separated list of actions to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> actions() {
        return actions;
    }

    /**
     * A comma-separated list of status codes to filter the results by.
     */
    @JsonIgnore
    public JsonNullable<String> statusCodes() {
        return statusCodes;
    }

    /**
     * A boolean value to filter the results by success or failure.
     */
    @JsonIgnore
    public JsonNullable<Boolean> success() {
        return success;
    }

    /**
     * The field to order the results by.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StackoneListLogsQueryParamOrderBy> orderBy() {
        return (JsonNullable<StackoneListLogsQueryParamOrderBy>) orderBy;
    }

    /**
     * The direction to order the results by.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<StackoneListLogsQueryParamOrderDirection> orderDirection() {
        return (JsonNullable<StackoneListLogsQueryParamOrderDirection>) orderDirection;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A comma-separated list of account IDs to filter the results by.
     */
    public QueryParamFilter withAccountIds(String accountIds) {
        Utils.checkNotNull(accountIds, "accountIds");
        this.accountIds = JsonNullable.of(accountIds);
        return this;
    }

    /**
     * A comma-separated list of account IDs to filter the results by.
     */
    public QueryParamFilter withAccountIds(JsonNullable<String> accountIds) {
        Utils.checkNotNull(accountIds, "accountIds");
        this.accountIds = accountIds;
        return this;
    }

    /**
     * A ISO8601 date string to filter the results by start_date.
     */
    public QueryParamFilter withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = JsonNullable.of(startDate);
        return this;
    }

    /**
     * A ISO8601 date string to filter the results by start_date.
     */
    public QueryParamFilter withStartDate(JsonNullable<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * A ISO8601 date string to filter the results by end_date.
     */
    public QueryParamFilter withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = JsonNullable.of(endDate);
        return this;
    }

    /**
     * A ISO8601 date string to filter the results by end_date.
     */
    public QueryParamFilter withEndDate(JsonNullable<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * A comma-separated list of request IDs to filter the results by.
     */
    public QueryParamFilter withRequestIds(String requestIds) {
        Utils.checkNotNull(requestIds, "requestIds");
        this.requestIds = JsonNullable.of(requestIds);
        return this;
    }

    /**
     * A comma-separated list of request IDs to filter the results by.
     */
    public QueryParamFilter withRequestIds(JsonNullable<String> requestIds) {
        Utils.checkNotNull(requestIds, "requestIds");
        this.requestIds = requestIds;
        return this;
    }

    /**
     * A comma-separated list of source types to filter the results by.
     */
    public QueryParamFilter withSourceTypes(String sourceTypes) {
        Utils.checkNotNull(sourceTypes, "sourceTypes");
        this.sourceTypes = JsonNullable.of(sourceTypes);
        return this;
    }

    /**
     * A comma-separated list of source types to filter the results by.
     */
    public QueryParamFilter withSourceTypes(JsonNullable<String> sourceTypes) {
        Utils.checkNotNull(sourceTypes, "sourceTypes");
        this.sourceTypes = sourceTypes;
        return this;
    }

    /**
     * A comma-separated list of source values to filter the results by.
     */
    public QueryParamFilter withSourceValues(String sourceValues) {
        Utils.checkNotNull(sourceValues, "sourceValues");
        this.sourceValues = JsonNullable.of(sourceValues);
        return this;
    }

    /**
     * A comma-separated list of source values to filter the results by.
     */
    public QueryParamFilter withSourceValues(JsonNullable<String> sourceValues) {
        Utils.checkNotNull(sourceValues, "sourceValues");
        this.sourceValues = sourceValues;
        return this;
    }

    /**
     * A comma-separated list of source IDs to filter the results by.
     */
    public QueryParamFilter withSourceIds(String sourceIds) {
        Utils.checkNotNull(sourceIds, "sourceIds");
        this.sourceIds = JsonNullable.of(sourceIds);
        return this;
    }

    /**
     * A comma-separated list of source IDs to filter the results by.
     */
    public QueryParamFilter withSourceIds(JsonNullable<String> sourceIds) {
        Utils.checkNotNull(sourceIds, "sourceIds");
        this.sourceIds = sourceIds;
        return this;
    }

    /**
     * A comma-separated list of HTTP methods to filter the results by.
     */
    public QueryParamFilter withHttpMethods(String httpMethods) {
        Utils.checkNotNull(httpMethods, "httpMethods");
        this.httpMethods = JsonNullable.of(httpMethods);
        return this;
    }

    /**
     * A comma-separated list of HTTP methods to filter the results by.
     */
    public QueryParamFilter withHttpMethods(JsonNullable<String> httpMethods) {
        Utils.checkNotNull(httpMethods, "httpMethods");
        this.httpMethods = httpMethods;
        return this;
    }

    /**
     * A comma-separated list of provider keys to filter the results by.
     */
    public QueryParamFilter withProviders(String providers) {
        Utils.checkNotNull(providers, "providers");
        this.providers = JsonNullable.of(providers);
        return this;
    }

    /**
     * A comma-separated list of provider keys to filter the results by.
     */
    public QueryParamFilter withProviders(JsonNullable<String> providers) {
        Utils.checkNotNull(providers, "providers");
        this.providers = providers;
        return this;
    }

    /**
     * A comma-separated list of services to filter the results by.
     */
    public QueryParamFilter withServices(String services) {
        Utils.checkNotNull(services, "services");
        this.services = JsonNullable.of(services);
        return this;
    }

    /**
     * A comma-separated list of services to filter the results by.
     */
    public QueryParamFilter withServices(JsonNullable<String> services) {
        Utils.checkNotNull(services, "services");
        this.services = services;
        return this;
    }

    /**
     * A comma-separated list of resources to filter the results by.
     */
    public QueryParamFilter withResources(String resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = JsonNullable.of(resources);
        return this;
    }

    /**
     * A comma-separated list of resources to filter the results by.
     */
    public QueryParamFilter withResources(JsonNullable<String> resources) {
        Utils.checkNotNull(resources, "resources");
        this.resources = resources;
        return this;
    }

    /**
     * A comma-separated list of child resources to filter the results by.
     */
    public QueryParamFilter withChildResources(String childResources) {
        Utils.checkNotNull(childResources, "childResources");
        this.childResources = JsonNullable.of(childResources);
        return this;
    }

    /**
     * A comma-separated list of child resources to filter the results by.
     */
    public QueryParamFilter withChildResources(JsonNullable<String> childResources) {
        Utils.checkNotNull(childResources, "childResources");
        this.childResources = childResources;
        return this;
    }

    /**
     * A comma-separated list of sub resources to filter the results by.
     */
    public QueryParamFilter withSubResources(String subResources) {
        Utils.checkNotNull(subResources, "subResources");
        this.subResources = JsonNullable.of(subResources);
        return this;
    }

    /**
     * A comma-separated list of sub resources to filter the results by.
     */
    public QueryParamFilter withSubResources(JsonNullable<String> subResources) {
        Utils.checkNotNull(subResources, "subResources");
        this.subResources = subResources;
        return this;
    }

    /**
     * A comma-separated list of actions to filter the results by.
     */
    public QueryParamFilter withActions(String actions) {
        Utils.checkNotNull(actions, "actions");
        this.actions = JsonNullable.of(actions);
        return this;
    }

    /**
     * A comma-separated list of actions to filter the results by.
     */
    public QueryParamFilter withActions(JsonNullable<String> actions) {
        Utils.checkNotNull(actions, "actions");
        this.actions = actions;
        return this;
    }

    /**
     * A comma-separated list of status codes to filter the results by.
     */
    public QueryParamFilter withStatusCodes(String statusCodes) {
        Utils.checkNotNull(statusCodes, "statusCodes");
        this.statusCodes = JsonNullable.of(statusCodes);
        return this;
    }

    /**
     * A comma-separated list of status codes to filter the results by.
     */
    public QueryParamFilter withStatusCodes(JsonNullable<String> statusCodes) {
        Utils.checkNotNull(statusCodes, "statusCodes");
        this.statusCodes = statusCodes;
        return this;
    }

    /**
     * A boolean value to filter the results by success or failure.
     */
    public QueryParamFilter withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = JsonNullable.of(success);
        return this;
    }

    /**
     * A boolean value to filter the results by success or failure.
     */
    public QueryParamFilter withSuccess(JsonNullable<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * The field to order the results by.
     */
    public QueryParamFilter withOrderBy(StackoneListLogsQueryParamOrderBy orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = JsonNullable.of(orderBy);
        return this;
    }

    /**
     * The field to order the results by.
     */
    public QueryParamFilter withOrderBy(JsonNullable<? extends StackoneListLogsQueryParamOrderBy> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * The direction to order the results by.
     */
    public QueryParamFilter withOrderDirection(StackoneListLogsQueryParamOrderDirection orderDirection) {
        Utils.checkNotNull(orderDirection, "orderDirection");
        this.orderDirection = JsonNullable.of(orderDirection);
        return this;
    }

    /**
     * The direction to order the results by.
     */
    public QueryParamFilter withOrderDirection(JsonNullable<? extends StackoneListLogsQueryParamOrderDirection> orderDirection) {
        Utils.checkNotNull(orderDirection, "orderDirection");
        this.orderDirection = orderDirection;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryParamFilter other = (QueryParamFilter) o;
        return 
            Utils.enhancedDeepEquals(this.accountIds, other.accountIds) &&
            Utils.enhancedDeepEquals(this.startDate, other.startDate) &&
            Utils.enhancedDeepEquals(this.endDate, other.endDate) &&
            Utils.enhancedDeepEquals(this.requestIds, other.requestIds) &&
            Utils.enhancedDeepEquals(this.sourceTypes, other.sourceTypes) &&
            Utils.enhancedDeepEquals(this.sourceValues, other.sourceValues) &&
            Utils.enhancedDeepEquals(this.sourceIds, other.sourceIds) &&
            Utils.enhancedDeepEquals(this.httpMethods, other.httpMethods) &&
            Utils.enhancedDeepEquals(this.providers, other.providers) &&
            Utils.enhancedDeepEquals(this.services, other.services) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.childResources, other.childResources) &&
            Utils.enhancedDeepEquals(this.subResources, other.subResources) &&
            Utils.enhancedDeepEquals(this.actions, other.actions) &&
            Utils.enhancedDeepEquals(this.statusCodes, other.statusCodes) &&
            Utils.enhancedDeepEquals(this.success, other.success) &&
            Utils.enhancedDeepEquals(this.orderBy, other.orderBy) &&
            Utils.enhancedDeepEquals(this.orderDirection, other.orderDirection);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountIds, startDate, endDate,
            requestIds, sourceTypes, sourceValues,
            sourceIds, httpMethods, providers,
            services, resources, childResources,
            subResources, actions, statusCodes,
            success, orderBy, orderDirection);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QueryParamFilter.class,
                "accountIds", accountIds,
                "startDate", startDate,
                "endDate", endDate,
                "requestIds", requestIds,
                "sourceTypes", sourceTypes,
                "sourceValues", sourceValues,
                "sourceIds", sourceIds,
                "httpMethods", httpMethods,
                "providers", providers,
                "services", services,
                "resources", resources,
                "childResources", childResources,
                "subResources", subResources,
                "actions", actions,
                "statusCodes", statusCodes,
                "success", success,
                "orderBy", orderBy,
                "orderDirection", orderDirection);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> accountIds = JsonNullable.undefined();

        private JsonNullable<String> startDate = JsonNullable.undefined();

        private JsonNullable<String> endDate = JsonNullable.undefined();

        private JsonNullable<String> requestIds = JsonNullable.undefined();

        private JsonNullable<String> sourceTypes = JsonNullable.undefined();

        private JsonNullable<String> sourceValues = JsonNullable.undefined();

        private JsonNullable<String> sourceIds = JsonNullable.undefined();

        private JsonNullable<String> httpMethods = JsonNullable.undefined();

        private JsonNullable<String> providers = JsonNullable.undefined();

        private JsonNullable<String> services = JsonNullable.undefined();

        private JsonNullable<String> resources = JsonNullable.undefined();

        private JsonNullable<String> childResources = JsonNullable.undefined();

        private JsonNullable<String> subResources = JsonNullable.undefined();

        private JsonNullable<String> actions = JsonNullable.undefined();

        private JsonNullable<String> statusCodes = JsonNullable.undefined();

        private JsonNullable<Boolean> success = JsonNullable.undefined();

        private JsonNullable<? extends StackoneListLogsQueryParamOrderBy> orderBy = JsonNullable.undefined();

        private JsonNullable<? extends StackoneListLogsQueryParamOrderDirection> orderDirection = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A comma-separated list of account IDs to filter the results by.
         */
        public Builder accountIds(String accountIds) {
            Utils.checkNotNull(accountIds, "accountIds");
            this.accountIds = JsonNullable.of(accountIds);
            return this;
        }

        /**
         * A comma-separated list of account IDs to filter the results by.
         */
        public Builder accountIds(JsonNullable<String> accountIds) {
            Utils.checkNotNull(accountIds, "accountIds");
            this.accountIds = accountIds;
            return this;
        }


        /**
         * A ISO8601 date string to filter the results by start_date.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = JsonNullable.of(startDate);
            return this;
        }

        /**
         * A ISO8601 date string to filter the results by start_date.
         */
        public Builder startDate(JsonNullable<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }


        /**
         * A ISO8601 date string to filter the results by end_date.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = JsonNullable.of(endDate);
            return this;
        }

        /**
         * A ISO8601 date string to filter the results by end_date.
         */
        public Builder endDate(JsonNullable<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }


        /**
         * A comma-separated list of request IDs to filter the results by.
         */
        public Builder requestIds(String requestIds) {
            Utils.checkNotNull(requestIds, "requestIds");
            this.requestIds = JsonNullable.of(requestIds);
            return this;
        }

        /**
         * A comma-separated list of request IDs to filter the results by.
         */
        public Builder requestIds(JsonNullable<String> requestIds) {
            Utils.checkNotNull(requestIds, "requestIds");
            this.requestIds = requestIds;
            return this;
        }


        /**
         * A comma-separated list of source types to filter the results by.
         */
        public Builder sourceTypes(String sourceTypes) {
            Utils.checkNotNull(sourceTypes, "sourceTypes");
            this.sourceTypes = JsonNullable.of(sourceTypes);
            return this;
        }

        /**
         * A comma-separated list of source types to filter the results by.
         */
        public Builder sourceTypes(JsonNullable<String> sourceTypes) {
            Utils.checkNotNull(sourceTypes, "sourceTypes");
            this.sourceTypes = sourceTypes;
            return this;
        }


        /**
         * A comma-separated list of source values to filter the results by.
         */
        public Builder sourceValues(String sourceValues) {
            Utils.checkNotNull(sourceValues, "sourceValues");
            this.sourceValues = JsonNullable.of(sourceValues);
            return this;
        }

        /**
         * A comma-separated list of source values to filter the results by.
         */
        public Builder sourceValues(JsonNullable<String> sourceValues) {
            Utils.checkNotNull(sourceValues, "sourceValues");
            this.sourceValues = sourceValues;
            return this;
        }


        /**
         * A comma-separated list of source IDs to filter the results by.
         */
        public Builder sourceIds(String sourceIds) {
            Utils.checkNotNull(sourceIds, "sourceIds");
            this.sourceIds = JsonNullable.of(sourceIds);
            return this;
        }

        /**
         * A comma-separated list of source IDs to filter the results by.
         */
        public Builder sourceIds(JsonNullable<String> sourceIds) {
            Utils.checkNotNull(sourceIds, "sourceIds");
            this.sourceIds = sourceIds;
            return this;
        }


        /**
         * A comma-separated list of HTTP methods to filter the results by.
         */
        public Builder httpMethods(String httpMethods) {
            Utils.checkNotNull(httpMethods, "httpMethods");
            this.httpMethods = JsonNullable.of(httpMethods);
            return this;
        }

        /**
         * A comma-separated list of HTTP methods to filter the results by.
         */
        public Builder httpMethods(JsonNullable<String> httpMethods) {
            Utils.checkNotNull(httpMethods, "httpMethods");
            this.httpMethods = httpMethods;
            return this;
        }


        /**
         * A comma-separated list of provider keys to filter the results by.
         */
        public Builder providers(String providers) {
            Utils.checkNotNull(providers, "providers");
            this.providers = JsonNullable.of(providers);
            return this;
        }

        /**
         * A comma-separated list of provider keys to filter the results by.
         */
        public Builder providers(JsonNullable<String> providers) {
            Utils.checkNotNull(providers, "providers");
            this.providers = providers;
            return this;
        }


        /**
         * A comma-separated list of services to filter the results by.
         */
        public Builder services(String services) {
            Utils.checkNotNull(services, "services");
            this.services = JsonNullable.of(services);
            return this;
        }

        /**
         * A comma-separated list of services to filter the results by.
         */
        public Builder services(JsonNullable<String> services) {
            Utils.checkNotNull(services, "services");
            this.services = services;
            return this;
        }


        /**
         * A comma-separated list of resources to filter the results by.
         */
        public Builder resources(String resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = JsonNullable.of(resources);
            return this;
        }

        /**
         * A comma-separated list of resources to filter the results by.
         */
        public Builder resources(JsonNullable<String> resources) {
            Utils.checkNotNull(resources, "resources");
            this.resources = resources;
            return this;
        }


        /**
         * A comma-separated list of child resources to filter the results by.
         */
        public Builder childResources(String childResources) {
            Utils.checkNotNull(childResources, "childResources");
            this.childResources = JsonNullable.of(childResources);
            return this;
        }

        /**
         * A comma-separated list of child resources to filter the results by.
         */
        public Builder childResources(JsonNullable<String> childResources) {
            Utils.checkNotNull(childResources, "childResources");
            this.childResources = childResources;
            return this;
        }


        /**
         * A comma-separated list of sub resources to filter the results by.
         */
        public Builder subResources(String subResources) {
            Utils.checkNotNull(subResources, "subResources");
            this.subResources = JsonNullable.of(subResources);
            return this;
        }

        /**
         * A comma-separated list of sub resources to filter the results by.
         */
        public Builder subResources(JsonNullable<String> subResources) {
            Utils.checkNotNull(subResources, "subResources");
            this.subResources = subResources;
            return this;
        }


        /**
         * A comma-separated list of actions to filter the results by.
         */
        public Builder actions(String actions) {
            Utils.checkNotNull(actions, "actions");
            this.actions = JsonNullable.of(actions);
            return this;
        }

        /**
         * A comma-separated list of actions to filter the results by.
         */
        public Builder actions(JsonNullable<String> actions) {
            Utils.checkNotNull(actions, "actions");
            this.actions = actions;
            return this;
        }


        /**
         * A comma-separated list of status codes to filter the results by.
         */
        public Builder statusCodes(String statusCodes) {
            Utils.checkNotNull(statusCodes, "statusCodes");
            this.statusCodes = JsonNullable.of(statusCodes);
            return this;
        }

        /**
         * A comma-separated list of status codes to filter the results by.
         */
        public Builder statusCodes(JsonNullable<String> statusCodes) {
            Utils.checkNotNull(statusCodes, "statusCodes");
            this.statusCodes = statusCodes;
            return this;
        }


        /**
         * A boolean value to filter the results by success or failure.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = JsonNullable.of(success);
            return this;
        }

        /**
         * A boolean value to filter the results by success or failure.
         */
        public Builder success(JsonNullable<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }


        /**
         * The field to order the results by.
         */
        public Builder orderBy(StackoneListLogsQueryParamOrderBy orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = JsonNullable.of(orderBy);
            return this;
        }

        /**
         * The field to order the results by.
         */
        public Builder orderBy(JsonNullable<? extends StackoneListLogsQueryParamOrderBy> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }


        /**
         * The direction to order the results by.
         */
        public Builder orderDirection(StackoneListLogsQueryParamOrderDirection orderDirection) {
            Utils.checkNotNull(orderDirection, "orderDirection");
            this.orderDirection = JsonNullable.of(orderDirection);
            return this;
        }

        /**
         * The direction to order the results by.
         */
        public Builder orderDirection(JsonNullable<? extends StackoneListLogsQueryParamOrderDirection> orderDirection) {
            Utils.checkNotNull(orderDirection, "orderDirection");
            this.orderDirection = orderDirection;
            return this;
        }

        public QueryParamFilter build() {

            return new QueryParamFilter(
                accountIds, startDate, endDate,
                requestIds, sourceTypes, sourceValues,
                sourceIds, httpMethods, providers,
                services, resources, childResources,
                subResources, actions, statusCodes,
                success, orderBy, orderDirection);
        }

    }
}
