/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.operations.async;

import static com.stackone.stackone_client_java.operations.Operations.AsyncRequestOperation;

import com.stackone.stackone_client_java.SDKConfiguration;
import com.stackone.stackone_client_java.models.components.HrisCreateWorkEligibilityRequestDto;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeWorkEligibilityRequestRequest;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeWorkEligibilityRequest;
import com.stackone.stackone_client_java.utils.Headers;
import com.stackone.stackone_client_java.utils.Options;
import com.stackone.stackone_client_java.utils.RetryConfig;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder {

    private String id;
    private String subResourceId;
    private String xAccountId;
    private HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder id(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder subResourceId(String subResourceId) {
        Utils.checkNotNull(subResourceId, "subResourceId");
        this.subResourceId = subResourceId;
        return this;
    }

    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder xAccountId(String xAccountId) {
        Utils.checkNotNull(xAccountId, "xAccountId");
        this.xAccountId = xAccountId;
        return this;
    }

    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder hrisCreateWorkEligibilityRequestDto(HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto) {
        Utils.checkNotNull(hrisCreateWorkEligibilityRequestDto, "hrisCreateWorkEligibilityRequestDto");
        this.hrisCreateWorkEligibilityRequestDto = hrisCreateWorkEligibilityRequestDto;
        return this;
    }
                
    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private HrisUpdateEmployeeWorkEligibilityRequestRequest buildRequest() {

        HrisUpdateEmployeeWorkEligibilityRequestRequest request = new HrisUpdateEmployeeWorkEligibilityRequestRequest(id,
            subResourceId,
            xAccountId,
            hrisCreateWorkEligibilityRequestDto);

        return request;
    }

    public CompletableFuture<HrisUpdateEmployeeWorkEligibilityRequestResponse> call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        AsyncRequestOperation<HrisUpdateEmployeeWorkEligibilityRequestRequest, HrisUpdateEmployeeWorkEligibilityRequestResponse> operation
              = new HrisUpdateEmployeeWorkEligibilityRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        HrisUpdateEmployeeWorkEligibilityRequestRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
