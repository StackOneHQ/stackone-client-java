/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.operations;

import static com.stackone.stackone_client_java.operations.Operations.RequestOperation;

import com.stackone.stackone_client_java.SDKConfiguration;
import com.stackone.stackone_client_java.models.components.AtsRejectApplicationRequestDto;
import com.stackone.stackone_client_java.operations.AtsRejectApplicationOperation;
import com.stackone.stackone_client_java.utils.Options;
import com.stackone.stackone_client_java.utils.RetryConfig;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class AtsRejectApplicationRequestBuilder {

    private String xAccountId;
    private String id;
    private AtsRejectApplicationRequestDto atsRejectApplicationRequestDto;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public AtsRejectApplicationRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public AtsRejectApplicationRequestBuilder xAccountId(String xAccountId) {
        Utils.checkNotNull(xAccountId, "xAccountId");
        this.xAccountId = xAccountId;
        return this;
    }

    public AtsRejectApplicationRequestBuilder id(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AtsRejectApplicationRequestBuilder atsRejectApplicationRequestDto(AtsRejectApplicationRequestDto atsRejectApplicationRequestDto) {
        Utils.checkNotNull(atsRejectApplicationRequestDto, "atsRejectApplicationRequestDto");
        this.atsRejectApplicationRequestDto = atsRejectApplicationRequestDto;
        return this;
    }
                
    public AtsRejectApplicationRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public AtsRejectApplicationRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private AtsRejectApplicationRequest buildRequest() {

        AtsRejectApplicationRequest request = new AtsRejectApplicationRequest(xAccountId,
            id,
            atsRejectApplicationRequestDto);

        return request;
    }

    public AtsRejectApplicationResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<AtsRejectApplicationRequest, AtsRejectApplicationResponse> operation
              = new AtsRejectApplicationOperation(sdkConfiguration, options);
        AtsRejectApplicationRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
