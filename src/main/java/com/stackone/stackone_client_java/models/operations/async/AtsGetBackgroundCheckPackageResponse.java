/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.operations.async;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.stackone.stackone_client_java.models.components.BackgroundCheckPackageResult;
import com.stackone.stackone_client_java.utils.AsyncResponse;
import com.stackone.stackone_client_java.utils.Blob;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Map;
import java.util.Optional;


public class AtsGetBackgroundCheckPackageResponse implements AsyncResponse {
    /**
     * HTTP response content type for this operation
     */
    private String contentType;

    /**
     * HTTP response status code for this operation
     */
    private int statusCode;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    private HttpResponse<Blob> rawResponse;

    /**
     * The background check package with the given identifier was retrieved.
     */
    private Optional<? extends BackgroundCheckPackageResult> backgroundCheckPackageResult;


    private Map<String, List<String>> headers;

    @JsonCreator
    public AtsGetBackgroundCheckPackageResponse(
            String contentType,
            int statusCode,
            HttpResponse<Blob> rawResponse,
            Optional<? extends BackgroundCheckPackageResult> backgroundCheckPackageResult,
            Map<String, List<String>> headers) {
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(rawResponse, "rawResponse");
        Utils.checkNotNull(backgroundCheckPackageResult, "backgroundCheckPackageResult");
        headers = Utils.emptyMapIfNull(headers);
        Utils.checkNotNull(headers, "headers");
        this.contentType = contentType;
        this.statusCode = statusCode;
        this.rawResponse = rawResponse;
        this.backgroundCheckPackageResult = backgroundCheckPackageResult;
        this.headers = headers;
    }
    
    public AtsGetBackgroundCheckPackageResponse(
            String contentType,
            int statusCode,
            HttpResponse<Blob> rawResponse,
            Map<String, List<String>> headers) {
        this(contentType, statusCode, rawResponse,
            Optional.empty(), headers);
    }

    /**
     * HTTP response content type for this operation
     */
    @JsonIgnore
    public String contentType() {
        return contentType;
    }

    /**
     * HTTP response status code for this operation
     */
    @JsonIgnore
    public int statusCode() {
        return statusCode;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonIgnore
    public HttpResponse<Blob> rawResponse() {
        return rawResponse;
    }

    /**
     * The background check package with the given identifier was retrieved.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BackgroundCheckPackageResult> backgroundCheckPackageResult() {
        return (Optional<BackgroundCheckPackageResult>) backgroundCheckPackageResult;
    }

    @JsonIgnore
    public Map<String, List<String>> headers() {
        return headers;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * HTTP response content type for this operation
     */
    public AtsGetBackgroundCheckPackageResponse withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    /**
     * HTTP response status code for this operation
     */
    public AtsGetBackgroundCheckPackageResponse withStatusCode(int statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public AtsGetBackgroundCheckPackageResponse withRawResponse(HttpResponse<Blob> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    /**
     * The background check package with the given identifier was retrieved.
     */
    public AtsGetBackgroundCheckPackageResponse withBackgroundCheckPackageResult(BackgroundCheckPackageResult backgroundCheckPackageResult) {
        Utils.checkNotNull(backgroundCheckPackageResult, "backgroundCheckPackageResult");
        this.backgroundCheckPackageResult = Optional.ofNullable(backgroundCheckPackageResult);
        return this;
    }


    /**
     * The background check package with the given identifier was retrieved.
     */
    public AtsGetBackgroundCheckPackageResponse withBackgroundCheckPackageResult(Optional<? extends BackgroundCheckPackageResult> backgroundCheckPackageResult) {
        Utils.checkNotNull(backgroundCheckPackageResult, "backgroundCheckPackageResult");
        this.backgroundCheckPackageResult = backgroundCheckPackageResult;
        return this;
    }

    public AtsGetBackgroundCheckPackageResponse withHeaders(Map<String, List<String>> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = headers;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtsGetBackgroundCheckPackageResponse other = (AtsGetBackgroundCheckPackageResponse) o;
        return 
            Utils.enhancedDeepEquals(this.contentType, other.contentType) &&
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse) &&
            Utils.enhancedDeepEquals(this.backgroundCheckPackageResult, other.backgroundCheckPackageResult) &&
            Utils.enhancedDeepEquals(this.headers, other.headers);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            contentType, statusCode, rawResponse,
            backgroundCheckPackageResult, headers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtsGetBackgroundCheckPackageResponse.class,
                "contentType", contentType,
                "statusCode", statusCode,
                "rawResponse", rawResponse,
                "backgroundCheckPackageResult", backgroundCheckPackageResult,
                "headers", headers);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String contentType;

        private Integer statusCode;

        private HttpResponse<Blob> rawResponse;

        private Optional<? extends BackgroundCheckPackageResult> backgroundCheckPackageResult = Optional.empty();

        private Map<String, List<String>> headers;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * HTTP response content type for this operation
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }


        /**
         * HTTP response status code for this operation
         */
        public Builder statusCode(int statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }


        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<Blob> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }


        /**
         * The background check package with the given identifier was retrieved.
         */
        public Builder backgroundCheckPackageResult(BackgroundCheckPackageResult backgroundCheckPackageResult) {
            Utils.checkNotNull(backgroundCheckPackageResult, "backgroundCheckPackageResult");
            this.backgroundCheckPackageResult = Optional.ofNullable(backgroundCheckPackageResult);
            return this;
        }

        /**
         * The background check package with the given identifier was retrieved.
         */
        public Builder backgroundCheckPackageResult(Optional<? extends BackgroundCheckPackageResult> backgroundCheckPackageResult) {
            Utils.checkNotNull(backgroundCheckPackageResult, "backgroundCheckPackageResult");
            this.backgroundCheckPackageResult = backgroundCheckPackageResult;
            return this;
        }


        public Builder headers(Map<String, List<String>> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = headers;
            return this;
        }

        public AtsGetBackgroundCheckPackageResponse build() {

            return new AtsGetBackgroundCheckPackageResponse(
                contentType, statusCode, rawResponse,
                backgroundCheckPackageResult, headers);
        }

    }
}
