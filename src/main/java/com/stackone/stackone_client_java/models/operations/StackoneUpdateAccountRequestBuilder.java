/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java.models.operations;

import static com.stackone.stackone_client_java.operations.Operations.RequestOperation;

import com.stackone.stackone_client_java.SDKConfiguration;
import com.stackone.stackone_client_java.models.components.PatchAccountExternalDto;
import com.stackone.stackone_client_java.operations.StackoneUpdateAccount;
import com.stackone.stackone_client_java.utils.Headers;
import com.stackone.stackone_client_java.utils.Options;
import com.stackone.stackone_client_java.utils.RetryConfig;
import com.stackone.stackone_client_java.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class StackoneUpdateAccountRequestBuilder {

    private String id;
    private PatchAccountExternalDto patchAccountExternalDto;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public StackoneUpdateAccountRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public StackoneUpdateAccountRequestBuilder id(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public StackoneUpdateAccountRequestBuilder patchAccountExternalDto(PatchAccountExternalDto patchAccountExternalDto) {
        Utils.checkNotNull(patchAccountExternalDto, "patchAccountExternalDto");
        this.patchAccountExternalDto = patchAccountExternalDto;
        return this;
    }
                
    public StackoneUpdateAccountRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public StackoneUpdateAccountRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private StackoneUpdateAccountRequest buildRequest() {

        StackoneUpdateAccountRequest request = new StackoneUpdateAccountRequest(id,
            patchAccountExternalDto);

        return request;
    }

    public StackoneUpdateAccountResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<StackoneUpdateAccountRequest, StackoneUpdateAccountResponse> operation
              = new StackoneUpdateAccount.Sync(sdkConfiguration, options, _headers);
        StackoneUpdateAccountRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
