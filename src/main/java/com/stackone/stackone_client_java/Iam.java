/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import static com.stackone.stackone_client_java.operations.Operations.RequestOperation;

import com.stackone.stackone_client_java.models.components.IamUpdateUserRequestDto;
import com.stackone.stackone_client_java.models.operations.IamDeleteUserRequest;
import com.stackone.stackone_client_java.models.operations.IamDeleteUserRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamDeleteUserResponse;
import com.stackone.stackone_client_java.models.operations.IamGetGroupRequest;
import com.stackone.stackone_client_java.models.operations.IamGetGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamGetGroupResponse;
import com.stackone.stackone_client_java.models.operations.IamGetPolicyRequest;
import com.stackone.stackone_client_java.models.operations.IamGetPolicyRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamGetPolicyResponse;
import com.stackone.stackone_client_java.models.operations.IamGetRoleRequest;
import com.stackone.stackone_client_java.models.operations.IamGetRoleRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamGetRoleResponse;
import com.stackone.stackone_client_java.models.operations.IamGetUserRequest;
import com.stackone.stackone_client_java.models.operations.IamGetUserRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamGetUserResponse;
import com.stackone.stackone_client_java.models.operations.IamListGroupsRequest;
import com.stackone.stackone_client_java.models.operations.IamListGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamListGroupsResponse;
import com.stackone.stackone_client_java.models.operations.IamListPoliciesRequest;
import com.stackone.stackone_client_java.models.operations.IamListPoliciesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamListPoliciesResponse;
import com.stackone.stackone_client_java.models.operations.IamListRolesRequest;
import com.stackone.stackone_client_java.models.operations.IamListRolesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamListRolesResponse;
import com.stackone.stackone_client_java.models.operations.IamListUsersRequest;
import com.stackone.stackone_client_java.models.operations.IamListUsersRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamListUsersResponse;
import com.stackone.stackone_client_java.models.operations.IamUpdateUserRequest;
import com.stackone.stackone_client_java.models.operations.IamUpdateUserRequestBuilder;
import com.stackone.stackone_client_java.models.operations.IamUpdateUserResponse;
import com.stackone.stackone_client_java.operations.IamDeleteUser;
import com.stackone.stackone_client_java.operations.IamGetGroup;
import com.stackone.stackone_client_java.operations.IamGetPolicy;
import com.stackone.stackone_client_java.operations.IamGetRole;
import com.stackone.stackone_client_java.operations.IamGetUser;
import com.stackone.stackone_client_java.operations.IamListGroups;
import com.stackone.stackone_client_java.operations.IamListPolicies;
import com.stackone.stackone_client_java.operations.IamListRoles;
import com.stackone.stackone_client_java.operations.IamListUsers;
import com.stackone.stackone_client_java.operations.IamUpdateUser;
import com.stackone.stackone_client_java.utils.Headers;
import com.stackone.stackone_client_java.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Iam {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncIam asyncSDK;

    Iam(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncIam(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncIam async() {
        return asyncSDK;
    }

    /**
     * List Users
     * 
     * @return The call builder
     */
    public IamListUsersRequestBuilder listUsers() {
        return new IamListUsersRequestBuilder(sdkConfiguration);
    }

    /**
     * List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListUsersResponse listUsers(IamListUsersRequest request) throws Exception {
        return listUsers(request, Optional.empty());
    }

    /**
     * List Users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListUsersResponse listUsers(IamListUsersRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamListUsersRequest, IamListUsersResponse> operation
              = new IamListUsers.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get User
     * 
     * @return The call builder
     */
    public IamGetUserRequestBuilder getUser() {
        return new IamGetUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Get User
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetUserResponse getUser(IamGetUserRequest request) throws Exception {
        return getUser(request, Optional.empty());
    }

    /**
     * Get User
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetUserResponse getUser(IamGetUserRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamGetUserRequest, IamGetUserResponse> operation
              = new IamGetUser.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete User
     * 
     * @return The call builder
     */
    public IamDeleteUserRequestBuilder deleteUser() {
        return new IamDeleteUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete User
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamDeleteUserResponse deleteUser(String xAccountId, String id) throws Exception {
        return deleteUser(xAccountId, id, Optional.empty());
    }

    /**
     * Delete User
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamDeleteUserResponse deleteUser(
            String xAccountId, String id,
            Optional<Options> options) throws Exception {
        IamDeleteUserRequest request =
            IamDeleteUserRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .build();
        RequestOperation<IamDeleteUserRequest, IamDeleteUserResponse> operation
              = new IamDeleteUser.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update User
     * 
     * @return The call builder
     */
    public IamUpdateUserRequestBuilder updateUser() {
        return new IamUpdateUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Update User
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param iamUpdateUserRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamUpdateUserResponse updateUser(
            String xAccountId, String id,
            IamUpdateUserRequestDto iamUpdateUserRequestDto) throws Exception {
        return updateUser(xAccountId, id, iamUpdateUserRequestDto,
            Optional.empty());
    }

    /**
     * Update User
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param iamUpdateUserRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamUpdateUserResponse updateUser(
            String xAccountId, String id,
            IamUpdateUserRequestDto iamUpdateUserRequestDto, Optional<Options> options) throws Exception {
        IamUpdateUserRequest request =
            IamUpdateUserRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .iamUpdateUserRequestDto(iamUpdateUserRequestDto)
                .build();
        RequestOperation<IamUpdateUserRequest, IamUpdateUserResponse> operation
              = new IamUpdateUser.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Roles
     * 
     * @return The call builder
     */
    public IamListRolesRequestBuilder listRoles() {
        return new IamListRolesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Roles
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListRolesResponse listRoles(IamListRolesRequest request) throws Exception {
        return listRoles(request, Optional.empty());
    }

    /**
     * List Roles
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListRolesResponse listRoles(IamListRolesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamListRolesRequest, IamListRolesResponse> operation
              = new IamListRoles.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Role
     * 
     * @return The call builder
     */
    public IamGetRoleRequestBuilder getRole() {
        return new IamGetRoleRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Role
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetRoleResponse getRole(IamGetRoleRequest request) throws Exception {
        return getRole(request, Optional.empty());
    }

    /**
     * Get Role
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetRoleResponse getRole(IamGetRoleRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamGetRoleRequest, IamGetRoleResponse> operation
              = new IamGetRole.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Groups
     * 
     * @return The call builder
     */
    public IamListGroupsRequestBuilder listGroups() {
        return new IamListGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListGroupsResponse listGroups(IamListGroupsRequest request) throws Exception {
        return listGroups(request, Optional.empty());
    }

    /**
     * List Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListGroupsResponse listGroups(IamListGroupsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamListGroupsRequest, IamListGroupsResponse> operation
              = new IamListGroups.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Group
     * 
     * @return The call builder
     */
    public IamGetGroupRequestBuilder getGroup() {
        return new IamGetGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetGroupResponse getGroup(IamGetGroupRequest request) throws Exception {
        return getGroup(request, Optional.empty());
    }

    /**
     * Get Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetGroupResponse getGroup(IamGetGroupRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamGetGroupRequest, IamGetGroupResponse> operation
              = new IamGetGroup.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Policies
     * 
     * @return The call builder
     */
    public IamListPoliciesRequestBuilder listPolicies() {
        return new IamListPoliciesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListPoliciesResponse listPolicies(IamListPoliciesRequest request) throws Exception {
        return listPolicies(request, Optional.empty());
    }

    /**
     * List Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamListPoliciesResponse listPolicies(IamListPoliciesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamListPoliciesRequest, IamListPoliciesResponse> operation
              = new IamListPolicies.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Policy
     * 
     * @return The call builder
     */
    public IamGetPolicyRequestBuilder getPolicy() {
        return new IamGetPolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetPolicyResponse getPolicy(IamGetPolicyRequest request) throws Exception {
        return getPolicy(request, Optional.empty());
    }

    /**
     * Get Policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public IamGetPolicyResponse getPolicy(IamGetPolicyRequest request, Optional<Options> options) throws Exception {
        RequestOperation<IamGetPolicyRequest, IamGetPolicyResponse> operation
              = new IamGetPolicy.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
