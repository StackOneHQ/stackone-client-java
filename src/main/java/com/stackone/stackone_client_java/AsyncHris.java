/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import static com.stackone.stackone_client_java.operations.Operations.AsyncRequestOperation;

import com.stackone.stackone_client_java.models.components.EntitySkillsCreateRequestDto;
import com.stackone.stackone_client_java.models.components.HrisBatchDocumentUploadRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateEmployeeRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateEmploymentRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateTimeOffRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateWorkEligibilityRequestDto;
import com.stackone.stackone_client_java.models.components.HrisDocumentsUploadRequestDto;
import com.stackone.stackone_client_java.models.components.HrisInviteEmployeeRequestDto;
import com.stackone.stackone_client_java.models.components.HrisUpdateEmployeeRequestDto;
import com.stackone.stackone_client_java.models.components.HrisUpdateEmploymentRequestDto;
import com.stackone.stackone_client_java.models.components.UpdateTaskRequestDto;
import com.stackone.stackone_client_java.models.operations.HrisBatchUploadEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.HrisCancelEmployeeTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeSkillRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeWorkEligibilityRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisDownloadEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetBenefitRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetCostCenterGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetDepartmentGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetDivisionGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeCustomFieldDefinitionRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentCategoryRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeShiftRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeSkillRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTaskRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTimeOffBalanceRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesWorkEligibilityRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetJobRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetLocationRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetPositionRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetShiftRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTaskRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTeamGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeEntriesRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffPolicyRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffTypeRequest;
import com.stackone.stackone_client_java.models.operations.HrisInviteEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisListBenefitsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListCostCenterGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListDepartmentGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListDivisionGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCategoriesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCustomFieldDefinitionsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeDocumentsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeEmploymentsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeShiftsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeSkillsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTasksRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffBalancesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffPoliciesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffRequestsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeWorkEligibilityRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmploymentsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListJobsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListLocationsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListPositionsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListShiftsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTasksRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTeamGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeEntriesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffPoliciesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffRequestsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffTypesRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeTaskRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeWorkEligibilityRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisUploadEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.async.HrisBatchUploadEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisBatchUploadEmployeeDocumentResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisCancelEmployeeTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisCancelEmployeeTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeSkillRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeSkillResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeWorkEligibilityRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisCreateEmployeeWorkEligibilityRequestResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisDownloadEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisDownloadEmployeeDocumentResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetBenefitRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetBenefitResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetCompanyGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetCompanyGroupResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetCompanyRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetCompanyResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetCostCenterGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetCostCenterGroupResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetDepartmentGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetDepartmentGroupResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetDivisionGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetDivisionGroupResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeCustomFieldDefinitionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeCustomFieldDefinitionResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeDocumentCategoryRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeDocumentCategoryResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeDocumentResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeShiftRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeShiftResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeSkillRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeSkillResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeTaskRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeTaskResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeTimeOffBalanceRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeeTimeOffBalanceResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeesTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeesTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeesWorkEligibilityRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmployeesWorkEligibilityResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetGroupResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetJobRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetJobResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetLocationRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetLocationResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetPositionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetPositionResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetShiftRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetShiftResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTaskRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTaskResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTeamGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTeamGroupResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeEntriesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeEntriesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeOffPolicyRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeOffPolicyResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeOffTypeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisGetTimeOffTypeResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisInviteEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisInviteEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListBenefitsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListBenefitsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListCompaniesGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListCompaniesGroupsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListCompaniesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListCompaniesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListCostCenterGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListCostCenterGroupsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListDepartmentGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListDepartmentGroupsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListDivisionGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListDivisionGroupsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeCategoriesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeCategoriesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeCustomFieldDefinitionsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeCustomFieldDefinitionsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeDocumentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeDocumentsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeEmploymentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeEmploymentsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeShiftsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeShiftsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeSkillsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeSkillsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTasksRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTasksResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTimeOffBalancesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTimeOffBalancesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTimeOffPoliciesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTimeOffPoliciesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTimeOffRequestsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeTimeOffRequestsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeWorkEligibilityRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeeWorkEligibilityResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmployeesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmploymentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListEmploymentsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListGroupsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListJobsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListJobsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListLocationsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListLocationsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListPositionsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListPositionsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListShiftsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListShiftsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListTasksRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListTasksResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListTeamGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListTeamGroupsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeEntriesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeEntriesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeOffPoliciesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeOffPoliciesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeOffRequestsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeOffRequestsResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeOffTypesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisListTimeOffTypesResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeTaskRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeTaskResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisUpdateEmployeeWorkEligibilityRequestResponse;
import com.stackone.stackone_client_java.models.operations.async.HrisUploadEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.HrisUploadEmployeeDocumentResponse;
import com.stackone.stackone_client_java.operations.HrisBatchUploadEmployeeDocument;
import com.stackone.stackone_client_java.operations.HrisCancelEmployeeTimeOffRequest;
import com.stackone.stackone_client_java.operations.HrisCreateEmployee;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeEmployment;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeSkill;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeTimeOffRequest;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeWorkEligibilityRequest;
import com.stackone.stackone_client_java.operations.HrisDownloadEmployeeDocument;
import com.stackone.stackone_client_java.operations.HrisGetBenefit;
import com.stackone.stackone_client_java.operations.HrisGetCompany;
import com.stackone.stackone_client_java.operations.HrisGetCompanyGroup;
import com.stackone.stackone_client_java.operations.HrisGetCostCenterGroup;
import com.stackone.stackone_client_java.operations.HrisGetDepartmentGroup;
import com.stackone.stackone_client_java.operations.HrisGetDivisionGroup;
import com.stackone.stackone_client_java.operations.HrisGetEmployee;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeCustomFieldDefinition;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeDocument;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeDocumentCategory;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeEmployment;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeShift;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeSkill;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeTask;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeTimeOffBalance;
import com.stackone.stackone_client_java.operations.HrisGetEmployeesTimeOffRequest;
import com.stackone.stackone_client_java.operations.HrisGetEmployeesWorkEligibility;
import com.stackone.stackone_client_java.operations.HrisGetEmployment;
import com.stackone.stackone_client_java.operations.HrisGetGroup;
import com.stackone.stackone_client_java.operations.HrisGetJob;
import com.stackone.stackone_client_java.operations.HrisGetLocation;
import com.stackone.stackone_client_java.operations.HrisGetPosition;
import com.stackone.stackone_client_java.operations.HrisGetShift;
import com.stackone.stackone_client_java.operations.HrisGetTask;
import com.stackone.stackone_client_java.operations.HrisGetTeamGroup;
import com.stackone.stackone_client_java.operations.HrisGetTimeEntries;
import com.stackone.stackone_client_java.operations.HrisGetTimeOffPolicy;
import com.stackone.stackone_client_java.operations.HrisGetTimeOffRequest;
import com.stackone.stackone_client_java.operations.HrisGetTimeOffType;
import com.stackone.stackone_client_java.operations.HrisInviteEmployee;
import com.stackone.stackone_client_java.operations.HrisListBenefits;
import com.stackone.stackone_client_java.operations.HrisListCompanies;
import com.stackone.stackone_client_java.operations.HrisListCompaniesGroups;
import com.stackone.stackone_client_java.operations.HrisListCostCenterGroups;
import com.stackone.stackone_client_java.operations.HrisListDepartmentGroups;
import com.stackone.stackone_client_java.operations.HrisListDivisionGroups;
import com.stackone.stackone_client_java.operations.HrisListEmployeeCategories;
import com.stackone.stackone_client_java.operations.HrisListEmployeeCustomFieldDefinitions;
import com.stackone.stackone_client_java.operations.HrisListEmployeeDocuments;
import com.stackone.stackone_client_java.operations.HrisListEmployeeEmployments;
import com.stackone.stackone_client_java.operations.HrisListEmployeeShifts;
import com.stackone.stackone_client_java.operations.HrisListEmployeeSkills;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTasks;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTimeOffBalances;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTimeOffPolicies;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTimeOffRequests;
import com.stackone.stackone_client_java.operations.HrisListEmployeeWorkEligibility;
import com.stackone.stackone_client_java.operations.HrisListEmployees;
import com.stackone.stackone_client_java.operations.HrisListEmployments;
import com.stackone.stackone_client_java.operations.HrisListGroups;
import com.stackone.stackone_client_java.operations.HrisListJobs;
import com.stackone.stackone_client_java.operations.HrisListLocations;
import com.stackone.stackone_client_java.operations.HrisListPositions;
import com.stackone.stackone_client_java.operations.HrisListShifts;
import com.stackone.stackone_client_java.operations.HrisListTasks;
import com.stackone.stackone_client_java.operations.HrisListTeamGroups;
import com.stackone.stackone_client_java.operations.HrisListTimeEntries;
import com.stackone.stackone_client_java.operations.HrisListTimeOffPolicies;
import com.stackone.stackone_client_java.operations.HrisListTimeOffRequests;
import com.stackone.stackone_client_java.operations.HrisListTimeOffTypes;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployee;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeEmployment;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeTask;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeTimeOffRequest;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeWorkEligibilityRequest;
import com.stackone.stackone_client_java.operations.HrisUploadEmployeeDocument;
import com.stackone.stackone_client_java.utils.Headers;
import com.stackone.stackone_client_java.utils.Options;
import java.lang.Deprecated;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncHris {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Hris syncSDK;

    AsyncHris(Hris syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Hris sync() {
        return syncSDK;
    }


    /**
     * List Companies
     * 
     * @return The async call builder
     */
    public HrisListCompaniesRequestBuilder listCompanies() {
        return new HrisListCompaniesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListCompaniesResponse>} - The async response
     */
    public CompletableFuture<HrisListCompaniesResponse> listCompanies(HrisListCompaniesRequest request) {
        return listCompanies(request, Optional.empty());
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListCompaniesResponse>} - The async response
     */
    public CompletableFuture<HrisListCompaniesResponse> listCompanies(HrisListCompaniesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListCompaniesRequest, HrisListCompaniesResponse> operation
              = new HrisListCompanies.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Company
     * 
     * @return The async call builder
     */
    public HrisGetCompanyRequestBuilder getCompany() {
        return new HrisGetCompanyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetCompanyResponse>} - The async response
     */
    public CompletableFuture<HrisGetCompanyResponse> getCompany(HrisGetCompanyRequest request) {
        return getCompany(request, Optional.empty());
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetCompanyResponse>} - The async response
     */
    public CompletableFuture<HrisGetCompanyResponse> getCompany(HrisGetCompanyRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetCompanyRequest, HrisGetCompanyResponse> operation
              = new HrisGetCompany.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List employee Custom Field Definitions
     * 
     * @return The async call builder
     */
    public HrisListEmployeeCustomFieldDefinitionsRequestBuilder listEmployeeCustomFieldDefinitions() {
        return new HrisListEmployeeCustomFieldDefinitionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List employee Custom Field Definitions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeCustomFieldDefinitionsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeCustomFieldDefinitionsResponse> listEmployeeCustomFieldDefinitions(HrisListEmployeeCustomFieldDefinitionsRequest request) {
        return listEmployeeCustomFieldDefinitions(request, Optional.empty());
    }

    /**
     * List employee Custom Field Definitions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeCustomFieldDefinitionsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeCustomFieldDefinitionsResponse> listEmployeeCustomFieldDefinitions(HrisListEmployeeCustomFieldDefinitionsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeCustomFieldDefinitionsRequest, HrisListEmployeeCustomFieldDefinitionsResponse> operation
              = new HrisListEmployeeCustomFieldDefinitions.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get employee Custom Field Definition
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeCustomFieldDefinitionRequestBuilder getEmployeeCustomFieldDefinition() {
        return new HrisGetEmployeeCustomFieldDefinitionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get employee Custom Field Definition
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeCustomFieldDefinitionResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeCustomFieldDefinitionResponse> getEmployeeCustomFieldDefinition(HrisGetEmployeeCustomFieldDefinitionRequest request) {
        return getEmployeeCustomFieldDefinition(request, Optional.empty());
    }

    /**
     * Get employee Custom Field Definition
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeCustomFieldDefinitionResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeCustomFieldDefinitionResponse> getEmployeeCustomFieldDefinition(HrisGetEmployeeCustomFieldDefinitionRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeCustomFieldDefinitionRequest, HrisGetEmployeeCustomFieldDefinitionResponse> operation
              = new HrisGetEmployeeCustomFieldDefinition.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employees
     * 
     * @return The async call builder
     */
    public HrisListEmployeesRequestBuilder listEmployees() {
        return new HrisListEmployeesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employees
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeesResponse> listEmployees(HrisListEmployeesRequest request) {
        return listEmployees(request, Optional.empty());
    }

    /**
     * List Employees
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeesResponse> listEmployees(HrisListEmployeesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeesRequest, HrisListEmployeesResponse> operation
              = new HrisListEmployees.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Employee
     * 
     * @return The async call builder
     */
    public HrisCreateEmployeeRequestBuilder createEmployee() {
        return new HrisCreateEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee
     * 
     * @param xAccountId The account identifier
     * @param hrisCreateEmployeeRequestDto 
     * @return {@code CompletableFuture<HrisCreateEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeResponse> createEmployee(String xAccountId, HrisCreateEmployeeRequestDto hrisCreateEmployeeRequestDto) {
        return createEmployee(xAccountId, hrisCreateEmployeeRequestDto, Optional.empty());
    }

    /**
     * Create Employee
     * 
     * @param xAccountId The account identifier
     * @param hrisCreateEmployeeRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisCreateEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeResponse> createEmployee(
            String xAccountId, HrisCreateEmployeeRequestDto hrisCreateEmployeeRequestDto,
            Optional<Options> options) {
        HrisCreateEmployeeRequest request =
            HrisCreateEmployeeRequest
                .builder()
                .xAccountId(xAccountId)
                .hrisCreateEmployeeRequestDto(hrisCreateEmployeeRequestDto)
                .build();
        AsyncRequestOperation<HrisCreateEmployeeRequest, HrisCreateEmployeeResponse> operation
              = new HrisCreateEmployee.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeRequestBuilder getEmployee() {
        return new HrisGetEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeResponse> getEmployee(HrisGetEmployeeRequest request) {
        return getEmployee(request, Optional.empty());
    }

    /**
     * Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeResponse> getEmployee(HrisGetEmployeeRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeRequest, HrisGetEmployeeResponse> operation
              = new HrisGetEmployee.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Employee
     * 
     * @return The async call builder
     */
    public HrisUpdateEmployeeRequestBuilder updateEmployee() {
        return new HrisUpdateEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisUpdateEmployeeRequestDto 
     * @return {@code CompletableFuture<HrisUpdateEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeResponse> updateEmployee(
            String xAccountId, String id,
            HrisUpdateEmployeeRequestDto hrisUpdateEmployeeRequestDto) {
        return updateEmployee(
                xAccountId, id, hrisUpdateEmployeeRequestDto,
                Optional.empty());
    }

    /**
     * Update Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisUpdateEmployeeRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisUpdateEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeResponse> updateEmployee(
            String xAccountId, String id,
            HrisUpdateEmployeeRequestDto hrisUpdateEmployeeRequestDto, Optional<Options> options) {
        HrisUpdateEmployeeRequest request =
            HrisUpdateEmployeeRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisUpdateEmployeeRequestDto(hrisUpdateEmployeeRequestDto)
                .build();
        AsyncRequestOperation<HrisUpdateEmployeeRequest, HrisUpdateEmployeeResponse> operation
              = new HrisUpdateEmployee.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Invite Employee
     * 
     * @return The async call builder
     */
    public HrisInviteEmployeeRequestBuilder inviteEmployee() {
        return new HrisInviteEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Invite Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisInviteEmployeeRequestDto 
     * @return {@code CompletableFuture<HrisInviteEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisInviteEmployeeResponse> inviteEmployee(
            String xAccountId, String id,
            HrisInviteEmployeeRequestDto hrisInviteEmployeeRequestDto) {
        return inviteEmployee(
                xAccountId, id, hrisInviteEmployeeRequestDto,
                Optional.empty());
    }

    /**
     * Invite Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisInviteEmployeeRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisInviteEmployeeResponse>} - The async response
     */
    public CompletableFuture<HrisInviteEmployeeResponse> inviteEmployee(
            String xAccountId, String id,
            HrisInviteEmployeeRequestDto hrisInviteEmployeeRequestDto, Optional<Options> options) {
        HrisInviteEmployeeRequest request =
            HrisInviteEmployeeRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisInviteEmployeeRequestDto(hrisInviteEmployeeRequestDto)
                .build();
        AsyncRequestOperation<HrisInviteEmployeeRequest, HrisInviteEmployeeResponse> operation
              = new HrisInviteEmployee.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Shifts
     * 
     * @return The async call builder
     */
    public HrisListEmployeeShiftsRequestBuilder listEmployeeShifts() {
        return new HrisListEmployeeShiftsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Shifts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeShiftsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeShiftsResponse> listEmployeeShifts(HrisListEmployeeShiftsRequest request) {
        return listEmployeeShifts(request, Optional.empty());
    }

    /**
     * List Employee Shifts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeShiftsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeShiftsResponse> listEmployeeShifts(HrisListEmployeeShiftsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeShiftsRequest, HrisListEmployeeShiftsResponse> operation
              = new HrisListEmployeeShifts.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Shift
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeShiftRequestBuilder getEmployeeShift() {
        return new HrisGetEmployeeShiftRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Shift
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeShiftResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeShiftResponse> getEmployeeShift(HrisGetEmployeeShiftRequest request) {
        return getEmployeeShift(request, Optional.empty());
    }

    /**
     * Get Employee Shift
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeShiftResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeShiftResponse> getEmployeeShift(HrisGetEmployeeShiftRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeShiftRequest, HrisGetEmployeeShiftResponse> operation
              = new HrisGetEmployeeShift.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Time Off Requests
     * 
     * @return The async call builder
     */
    public HrisListEmployeeTimeOffRequestsRequestBuilder listEmployeeTimeOffRequests() {
        return new HrisListEmployeeTimeOffRequestsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Time Off Requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeTimeOffRequestsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTimeOffRequestsResponse> listEmployeeTimeOffRequests(HrisListEmployeeTimeOffRequestsRequest request) {
        return listEmployeeTimeOffRequests(request, Optional.empty());
    }

    /**
     * List Employee Time Off Requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeTimeOffRequestsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTimeOffRequestsResponse> listEmployeeTimeOffRequests(HrisListEmployeeTimeOffRequestsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeTimeOffRequestsRequest, HrisListEmployeeTimeOffRequestsResponse> operation
              = new HrisListEmployeeTimeOffRequests.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Employee Time Off Request
     * 
     * @return The async call builder
     */
    public HrisCreateEmployeeTimeOffRequestRequestBuilder createEmployeeTimeOffRequest() {
        return new HrisCreateEmployeeTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateTimeOffRequestDto 
     * @return {@code CompletableFuture<HrisCreateEmployeeTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeTimeOffRequestResponse> createEmployeeTimeOffRequest(
            String xAccountId, String id,
            HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto) {
        return createEmployeeTimeOffRequest(
                xAccountId, id, hrisCreateTimeOffRequestDto,
                Optional.empty());
    }

    /**
     * Create Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateTimeOffRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisCreateEmployeeTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeTimeOffRequestResponse> createEmployeeTimeOffRequest(
            String xAccountId, String id,
            HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto, Optional<Options> options) {
        HrisCreateEmployeeTimeOffRequestRequest request =
            HrisCreateEmployeeTimeOffRequestRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisCreateTimeOffRequestDto(hrisCreateTimeOffRequestDto)
                .build();
        AsyncRequestOperation<HrisCreateEmployeeTimeOffRequestRequest, HrisCreateEmployeeTimeOffRequestResponse> operation
              = new HrisCreateEmployeeTimeOffRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employees Time Off Request
     * 
     * @return The async call builder
     */
    public HrisGetEmployeesTimeOffRequestRequestBuilder getEmployeesTimeOffRequest() {
        return new HrisGetEmployeesTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employees Time Off Request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeesTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeesTimeOffRequestResponse> getEmployeesTimeOffRequest(HrisGetEmployeesTimeOffRequestRequest request) {
        return getEmployeesTimeOffRequest(request, Optional.empty());
    }

    /**
     * Get Employees Time Off Request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeesTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeesTimeOffRequestResponse> getEmployeesTimeOffRequest(HrisGetEmployeesTimeOffRequestRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeesTimeOffRequestRequest, HrisGetEmployeesTimeOffRequestResponse> operation
              = new HrisGetEmployeesTimeOffRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Cancel Employee Time Off Request
     * 
     * @return The async call builder
     */
    public HrisCancelEmployeeTimeOffRequestRequestBuilder cancelEmployeeTimeOffRequest() {
        return new HrisCancelEmployeeTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @return {@code CompletableFuture<HrisCancelEmployeeTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisCancelEmployeeTimeOffRequestResponse> cancelEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId) {
        return cancelEmployeeTimeOffRequest(
                xAccountId, id, subResourceId,
                Optional.empty());
    }

    /**
     * Cancel Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param options additional options
     * @return {@code CompletableFuture<HrisCancelEmployeeTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisCancelEmployeeTimeOffRequestResponse> cancelEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId, Optional<Options> options) {
        HrisCancelEmployeeTimeOffRequestRequest request =
            HrisCancelEmployeeTimeOffRequestRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .build();
        AsyncRequestOperation<HrisCancelEmployeeTimeOffRequestRequest, HrisCancelEmployeeTimeOffRequestResponse> operation
              = new HrisCancelEmployeeTimeOffRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Employee Time Off Request
     * 
     * @return The async call builder
     */
    public HrisUpdateEmployeeTimeOffRequestRequestBuilder updateEmployeeTimeOffRequest() {
        return new HrisUpdateEmployeeTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisCreateTimeOffRequestDto 
     * @return {@code CompletableFuture<HrisUpdateEmployeeTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeTimeOffRequestResponse> updateEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId, HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto) {
        return updateEmployeeTimeOffRequest(
                xAccountId, id, subResourceId,
                hrisCreateTimeOffRequestDto, Optional.empty());
    }

    /**
     * Update Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisCreateTimeOffRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisUpdateEmployeeTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeTimeOffRequestResponse> updateEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId, HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto,
            Optional<Options> options) {
        HrisUpdateEmployeeTimeOffRequestRequest request =
            HrisUpdateEmployeeTimeOffRequestRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .hrisCreateTimeOffRequestDto(hrisCreateTimeOffRequestDto)
                .build();
        AsyncRequestOperation<HrisUpdateEmployeeTimeOffRequestRequest, HrisUpdateEmployeeTimeOffRequestResponse> operation
              = new HrisUpdateEmployeeTimeOffRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Batch Upload Employee Document
     * 
     * @return The async call builder
     */
    public HrisBatchUploadEmployeeDocumentRequestBuilder batchUploadEmployeeDocument() {
        return new HrisBatchUploadEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Batch Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisBatchDocumentUploadRequestDto 
     * @return {@code CompletableFuture<HrisBatchUploadEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisBatchUploadEmployeeDocumentResponse> batchUploadEmployeeDocument(
            String xAccountId, String id,
            HrisBatchDocumentUploadRequestDto hrisBatchDocumentUploadRequestDto) {
        return batchUploadEmployeeDocument(
                xAccountId, id, hrisBatchDocumentUploadRequestDto,
                Optional.empty());
    }

    /**
     * Batch Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisBatchDocumentUploadRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisBatchUploadEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisBatchUploadEmployeeDocumentResponse> batchUploadEmployeeDocument(
            String xAccountId, String id,
            HrisBatchDocumentUploadRequestDto hrisBatchDocumentUploadRequestDto, Optional<Options> options) {
        HrisBatchUploadEmployeeDocumentRequest request =
            HrisBatchUploadEmployeeDocumentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisBatchDocumentUploadRequestDto(hrisBatchDocumentUploadRequestDto)
                .build();
        AsyncRequestOperation<HrisBatchUploadEmployeeDocumentRequest, HrisBatchUploadEmployeeDocumentResponse> operation
              = new HrisBatchUploadEmployeeDocument.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Upload Employee Document
     * 
     * @return The async call builder
     */
    public HrisUploadEmployeeDocumentRequestBuilder uploadEmployeeDocument() {
        return new HrisUploadEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisDocumentsUploadRequestDto 
     * @return {@code CompletableFuture<HrisUploadEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisUploadEmployeeDocumentResponse> uploadEmployeeDocument(
            String xAccountId, String id,
            HrisDocumentsUploadRequestDto hrisDocumentsUploadRequestDto) {
        return uploadEmployeeDocument(
                xAccountId, id, hrisDocumentsUploadRequestDto,
                Optional.empty());
    }

    /**
     * Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisDocumentsUploadRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisUploadEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisUploadEmployeeDocumentResponse> uploadEmployeeDocument(
            String xAccountId, String id,
            HrisDocumentsUploadRequestDto hrisDocumentsUploadRequestDto, Optional<Options> options) {
        HrisUploadEmployeeDocumentRequest request =
            HrisUploadEmployeeDocumentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisDocumentsUploadRequestDto(hrisDocumentsUploadRequestDto)
                .build();
        AsyncRequestOperation<HrisUploadEmployeeDocumentRequest, HrisUploadEmployeeDocumentResponse> operation
              = new HrisUploadEmployeeDocument.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Download Employee Document
     * 
     * @return The async call builder
     */
    public HrisDownloadEmployeeDocumentRequestBuilder downloadEmployeeDocument() {
        return new HrisDownloadEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Download Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisDownloadEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisDownloadEmployeeDocumentResponse> downloadEmployeeDocument(HrisDownloadEmployeeDocumentRequest request) {
        return downloadEmployeeDocument(request, Optional.empty());
    }

    /**
     * Download Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisDownloadEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisDownloadEmployeeDocumentResponse> downloadEmployeeDocument(HrisDownloadEmployeeDocumentRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisDownloadEmployeeDocumentRequest, HrisDownloadEmployeeDocumentResponse> operation
              = new HrisDownloadEmployeeDocument.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Documents
     * 
     * @return The async call builder
     */
    public HrisListEmployeeDocumentsRequestBuilder listEmployeeDocuments() {
        return new HrisListEmployeeDocumentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Documents
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeDocumentsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeDocumentsResponse> listEmployeeDocuments(HrisListEmployeeDocumentsRequest request) {
        return listEmployeeDocuments(request, Optional.empty());
    }

    /**
     * List Employee Documents
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeDocumentsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeDocumentsResponse> listEmployeeDocuments(HrisListEmployeeDocumentsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeDocumentsRequest, HrisListEmployeeDocumentsResponse> operation
              = new HrisListEmployeeDocuments.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Document
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeDocumentRequestBuilder getEmployeeDocument() {
        return new HrisGetEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeDocumentResponse> getEmployeeDocument(HrisGetEmployeeDocumentRequest request) {
        return getEmployeeDocument(request, Optional.empty());
    }

    /**
     * Get Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeDocumentResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeDocumentResponse> getEmployeeDocument(HrisGetEmployeeDocumentRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeDocumentRequest, HrisGetEmployeeDocumentResponse> operation
              = new HrisGetEmployeeDocument.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Document Categories
     * 
     * @return The async call builder
     */
    public HrisListEmployeeCategoriesRequestBuilder listEmployeeCategories() {
        return new HrisListEmployeeCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Document Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeCategoriesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeCategoriesResponse> listEmployeeCategories(HrisListEmployeeCategoriesRequest request) {
        return listEmployeeCategories(request, Optional.empty());
    }

    /**
     * List Employee Document Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeCategoriesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeCategoriesResponse> listEmployeeCategories(HrisListEmployeeCategoriesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeCategoriesRequest, HrisListEmployeeCategoriesResponse> operation
              = new HrisListEmployeeCategories.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Document Category
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeDocumentCategoryRequestBuilder getEmployeeDocumentCategory() {
        return new HrisGetEmployeeDocumentCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Document Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeDocumentCategoryResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeDocumentCategoryResponse> getEmployeeDocumentCategory(HrisGetEmployeeDocumentCategoryRequest request) {
        return getEmployeeDocumentCategory(request, Optional.empty());
    }

    /**
     * Get Employee Document Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeDocumentCategoryResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeDocumentCategoryResponse> getEmployeeDocumentCategory(HrisGetEmployeeDocumentCategoryRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeDocumentCategoryRequest, HrisGetEmployeeDocumentCategoryResponse> operation
              = new HrisGetEmployeeDocumentCategory.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Work Eligibility
     * 
     * @return The async call builder
     */
    public HrisListEmployeeWorkEligibilityRequestBuilder listEmployeeWorkEligibility() {
        return new HrisListEmployeeWorkEligibilityRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeWorkEligibilityResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeWorkEligibilityResponse> listEmployeeWorkEligibility(HrisListEmployeeWorkEligibilityRequest request) {
        return listEmployeeWorkEligibility(request, Optional.empty());
    }

    /**
     * List Employee Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeWorkEligibilityResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeWorkEligibilityResponse> listEmployeeWorkEligibility(HrisListEmployeeWorkEligibilityRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeWorkEligibilityRequest, HrisListEmployeeWorkEligibilityResponse> operation
              = new HrisListEmployeeWorkEligibility.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Employee Work Eligibility Request
     * 
     * @return The async call builder
     */
    public HrisCreateEmployeeWorkEligibilityRequestRequestBuilder createEmployeeWorkEligibilityRequest() {
        return new HrisCreateEmployeeWorkEligibilityRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Work Eligibility Request
     * 
     * @param id 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @return {@code CompletableFuture<HrisCreateEmployeeWorkEligibilityRequestResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeWorkEligibilityRequestResponse> createEmployeeWorkEligibilityRequest(
            String id, String xAccountId,
            HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto) {
        return createEmployeeWorkEligibilityRequest(
                id, xAccountId, hrisCreateWorkEligibilityRequestDto,
                Optional.empty());
    }

    /**
     * Create Employee Work Eligibility Request
     * 
     * @param id 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisCreateEmployeeWorkEligibilityRequestResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeWorkEligibilityRequestResponse> createEmployeeWorkEligibilityRequest(
            String id, String xAccountId,
            HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto, Optional<Options> options) {
        HrisCreateEmployeeWorkEligibilityRequestRequest request =
            HrisCreateEmployeeWorkEligibilityRequestRequest
                .builder()
                .id(id)
                .xAccountId(xAccountId)
                .hrisCreateWorkEligibilityRequestDto(hrisCreateWorkEligibilityRequestDto)
                .build();
        AsyncRequestOperation<HrisCreateEmployeeWorkEligibilityRequestRequest, HrisCreateEmployeeWorkEligibilityRequestResponse> operation
              = new HrisCreateEmployeeWorkEligibilityRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employees Work Eligibility
     * 
     * @return The async call builder
     */
    public HrisGetEmployeesWorkEligibilityRequestBuilder getEmployeesWorkEligibility() {
        return new HrisGetEmployeesWorkEligibilityRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employees Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeesWorkEligibilityResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeesWorkEligibilityResponse> getEmployeesWorkEligibility(HrisGetEmployeesWorkEligibilityRequest request) {
        return getEmployeesWorkEligibility(request, Optional.empty());
    }

    /**
     * Get Employees Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeesWorkEligibilityResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeesWorkEligibilityResponse> getEmployeesWorkEligibility(HrisGetEmployeesWorkEligibilityRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeesWorkEligibilityRequest, HrisGetEmployeesWorkEligibilityResponse> operation
              = new HrisGetEmployeesWorkEligibility.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Employee Work Eligibility Request
     * 
     * @return The async call builder
     */
    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder updateEmployeeWorkEligibilityRequest() {
        return new HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee Work Eligibility Request
     * 
     * @param id 
     * @param subResourceId 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @return {@code CompletableFuture<HrisUpdateEmployeeWorkEligibilityRequestResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeWorkEligibilityRequestResponse> updateEmployeeWorkEligibilityRequest(
            String id, String subResourceId,
            String xAccountId, HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto) {
        return updateEmployeeWorkEligibilityRequest(
                id, subResourceId, xAccountId,
                hrisCreateWorkEligibilityRequestDto, Optional.empty());
    }

    /**
     * Update Employee Work Eligibility Request
     * 
     * @param id 
     * @param subResourceId 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisUpdateEmployeeWorkEligibilityRequestResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeWorkEligibilityRequestResponse> updateEmployeeWorkEligibilityRequest(
            String id, String subResourceId,
            String xAccountId, HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto,
            Optional<Options> options) {
        HrisUpdateEmployeeWorkEligibilityRequestRequest request =
            HrisUpdateEmployeeWorkEligibilityRequestRequest
                .builder()
                .id(id)
                .subResourceId(subResourceId)
                .xAccountId(xAccountId)
                .hrisCreateWorkEligibilityRequestDto(hrisCreateWorkEligibilityRequestDto)
                .build();
        AsyncRequestOperation<HrisUpdateEmployeeWorkEligibilityRequestRequest, HrisUpdateEmployeeWorkEligibilityRequestResponse> operation
              = new HrisUpdateEmployeeWorkEligibilityRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Time Off Balances
     * 
     * @return The async call builder
     */
    public HrisListEmployeeTimeOffBalancesRequestBuilder listEmployeeTimeOffBalances() {
        return new HrisListEmployeeTimeOffBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Time Off Balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeTimeOffBalancesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTimeOffBalancesResponse> listEmployeeTimeOffBalances(HrisListEmployeeTimeOffBalancesRequest request) {
        return listEmployeeTimeOffBalances(request, Optional.empty());
    }

    /**
     * List Employee Time Off Balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeTimeOffBalancesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTimeOffBalancesResponse> listEmployeeTimeOffBalances(HrisListEmployeeTimeOffBalancesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeTimeOffBalancesRequest, HrisListEmployeeTimeOffBalancesResponse> operation
              = new HrisListEmployeeTimeOffBalances.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Time Off Balance
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeTimeOffBalanceRequestBuilder getEmployeeTimeOffBalance() {
        return new HrisGetEmployeeTimeOffBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Time Off Balance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeTimeOffBalanceResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeTimeOffBalanceResponse> getEmployeeTimeOffBalance(HrisGetEmployeeTimeOffBalanceRequest request) {
        return getEmployeeTimeOffBalance(request, Optional.empty());
    }

    /**
     * Get Employee Time Off Balance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeTimeOffBalanceResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeTimeOffBalanceResponse> getEmployeeTimeOffBalance(HrisGetEmployeeTimeOffBalanceRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeTimeOffBalanceRequest, HrisGetEmployeeTimeOffBalanceResponse> operation
              = new HrisGetEmployeeTimeOffBalance.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employments
     * 
     * @return The async call builder
     */
    public HrisListEmploymentsRequestBuilder listEmployments() {
        return new HrisListEmploymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmploymentsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmploymentsResponse> listEmployments(HrisListEmploymentsRequest request) {
        return listEmployments(request, Optional.empty());
    }

    /**
     * List Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmploymentsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmploymentsResponse> listEmployments(HrisListEmploymentsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmploymentsRequest, HrisListEmploymentsResponse> operation
              = new HrisListEmployments.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employment
     * 
     * @return The async call builder
     */
    public HrisGetEmploymentRequestBuilder getEmployment() {
        return new HrisGetEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmploymentResponse> getEmployment(HrisGetEmploymentRequest request) {
        return getEmployment(request, Optional.empty());
    }

    /**
     * Get Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmploymentResponse> getEmployment(HrisGetEmploymentRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmploymentRequest, HrisGetEmploymentResponse> operation
              = new HrisGetEmployment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Employments
     * 
     * @return The async call builder
     */
    public HrisListEmployeeEmploymentsRequestBuilder listEmployeeEmployments() {
        return new HrisListEmployeeEmploymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeEmploymentsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeEmploymentsResponse> listEmployeeEmployments(HrisListEmployeeEmploymentsRequest request) {
        return listEmployeeEmployments(request, Optional.empty());
    }

    /**
     * List Employee Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeEmploymentsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeEmploymentsResponse> listEmployeeEmployments(HrisListEmployeeEmploymentsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeEmploymentsRequest, HrisListEmployeeEmploymentsResponse> operation
              = new HrisListEmployeeEmployments.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Employee Employment
     * 
     * @return The async call builder
     */
    public HrisCreateEmployeeEmploymentRequestBuilder createEmployeeEmployment() {
        return new HrisCreateEmployeeEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateEmploymentRequestDto 
     * @return {@code CompletableFuture<HrisCreateEmployeeEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeEmploymentResponse> createEmployeeEmployment(
            String xAccountId, String id,
            HrisCreateEmploymentRequestDto hrisCreateEmploymentRequestDto) {
        return createEmployeeEmployment(
                xAccountId, id, hrisCreateEmploymentRequestDto,
                Optional.empty());
    }

    /**
     * Create Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateEmploymentRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisCreateEmployeeEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeEmploymentResponse> createEmployeeEmployment(
            String xAccountId, String id,
            HrisCreateEmploymentRequestDto hrisCreateEmploymentRequestDto, Optional<Options> options) {
        HrisCreateEmployeeEmploymentRequest request =
            HrisCreateEmployeeEmploymentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisCreateEmploymentRequestDto(hrisCreateEmploymentRequestDto)
                .build();
        AsyncRequestOperation<HrisCreateEmployeeEmploymentRequest, HrisCreateEmployeeEmploymentResponse> operation
              = new HrisCreateEmployeeEmployment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Employment
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeEmploymentRequestBuilder getEmployeeEmployment() {
        return new HrisGetEmployeeEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeEmploymentResponse> getEmployeeEmployment(HrisGetEmployeeEmploymentRequest request) {
        return getEmployeeEmployment(request, Optional.empty());
    }

    /**
     * Get Employee Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeEmploymentResponse> getEmployeeEmployment(HrisGetEmployeeEmploymentRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeEmploymentRequest, HrisGetEmployeeEmploymentResponse> operation
              = new HrisGetEmployeeEmployment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Employee Employment
     * 
     * @return The async call builder
     */
    public HrisUpdateEmployeeEmploymentRequestBuilder updateEmployeeEmployment() {
        return new HrisUpdateEmployeeEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisUpdateEmploymentRequestDto 
     * @return {@code CompletableFuture<HrisUpdateEmployeeEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeEmploymentResponse> updateEmployeeEmployment(
            String xAccountId, String id,
            String subResourceId, HrisUpdateEmploymentRequestDto hrisUpdateEmploymentRequestDto) {
        return updateEmployeeEmployment(
                xAccountId, id, subResourceId,
                hrisUpdateEmploymentRequestDto, Optional.empty());
    }

    /**
     * Update Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisUpdateEmploymentRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisUpdateEmployeeEmploymentResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeEmploymentResponse> updateEmployeeEmployment(
            String xAccountId, String id,
            String subResourceId, HrisUpdateEmploymentRequestDto hrisUpdateEmploymentRequestDto,
            Optional<Options> options) {
        HrisUpdateEmployeeEmploymentRequest request =
            HrisUpdateEmployeeEmploymentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .hrisUpdateEmploymentRequestDto(hrisUpdateEmploymentRequestDto)
                .build();
        AsyncRequestOperation<HrisUpdateEmployeeEmploymentRequest, HrisUpdateEmployeeEmploymentResponse> operation
              = new HrisUpdateEmployeeEmployment.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Groups
     * 
     * @return The async call builder
     */
    public HrisListGroupsRequestBuilder listGroups() {
        return new HrisListGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListGroupsResponse> listGroups(HrisListGroupsRequest request) {
        return listGroups(request, Optional.empty());
    }

    /**
     * List Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListGroupsResponse> listGroups(HrisListGroupsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListGroupsRequest, HrisListGroupsResponse> operation
              = new HrisListGroups.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Department Groups
     * 
     * @return The async call builder
     */
    public HrisListDepartmentGroupsRequestBuilder listDepartmentGroups() {
        return new HrisListDepartmentGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Department Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListDepartmentGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListDepartmentGroupsResponse> listDepartmentGroups(HrisListDepartmentGroupsRequest request) {
        return listDepartmentGroups(request, Optional.empty());
    }

    /**
     * List Department Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListDepartmentGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListDepartmentGroupsResponse> listDepartmentGroups(HrisListDepartmentGroupsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListDepartmentGroupsRequest, HrisListDepartmentGroupsResponse> operation
              = new HrisListDepartmentGroups.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Cost Center Groups
     * 
     * @return The async call builder
     */
    public HrisListCostCenterGroupsRequestBuilder listCostCenterGroups() {
        return new HrisListCostCenterGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Cost Center Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListCostCenterGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListCostCenterGroupsResponse> listCostCenterGroups(HrisListCostCenterGroupsRequest request) {
        return listCostCenterGroups(request, Optional.empty());
    }

    /**
     * List Cost Center Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListCostCenterGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListCostCenterGroupsResponse> listCostCenterGroups(HrisListCostCenterGroupsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListCostCenterGroupsRequest, HrisListCostCenterGroupsResponse> operation
              = new HrisListCostCenterGroups.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Team Groups
     * 
     * @return The async call builder
     */
    public HrisListTeamGroupsRequestBuilder listTeamGroups() {
        return new HrisListTeamGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Team Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListTeamGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListTeamGroupsResponse> listTeamGroups(HrisListTeamGroupsRequest request) {
        return listTeamGroups(request, Optional.empty());
    }

    /**
     * List Team Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListTeamGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListTeamGroupsResponse> listTeamGroups(HrisListTeamGroupsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListTeamGroupsRequest, HrisListTeamGroupsResponse> operation
              = new HrisListTeamGroups.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Division Groups
     * 
     * @return The async call builder
     */
    public HrisListDivisionGroupsRequestBuilder listDivisionGroups() {
        return new HrisListDivisionGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Division Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListDivisionGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListDivisionGroupsResponse> listDivisionGroups(HrisListDivisionGroupsRequest request) {
        return listDivisionGroups(request, Optional.empty());
    }

    /**
     * List Division Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListDivisionGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListDivisionGroupsResponse> listDivisionGroups(HrisListDivisionGroupsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListDivisionGroupsRequest, HrisListDivisionGroupsResponse> operation
              = new HrisListDivisionGroups.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Companies Groups
     * 
     * @return The async call builder
     */
    public HrisListCompaniesGroupsRequestBuilder listCompaniesGroups() {
        return new HrisListCompaniesGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListCompaniesGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListCompaniesGroupsResponse> listCompaniesGroups(HrisListCompaniesGroupsRequest request) {
        return listCompaniesGroups(request, Optional.empty());
    }

    /**
     * List Companies Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListCompaniesGroupsResponse>} - The async response
     */
    public CompletableFuture<HrisListCompaniesGroupsResponse> listCompaniesGroups(HrisListCompaniesGroupsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListCompaniesGroupsRequest, HrisListCompaniesGroupsResponse> operation
              = new HrisListCompaniesGroups.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Group
     * 
     * @return The async call builder
     */
    public HrisGetGroupRequestBuilder getGroup() {
        return new HrisGetGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetGroupResponse> getGroup(HrisGetGroupRequest request) {
        return getGroup(request, Optional.empty());
    }

    /**
     * Get Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetGroupResponse> getGroup(HrisGetGroupRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetGroupRequest, HrisGetGroupResponse> operation
              = new HrisGetGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Department Group
     * 
     * @return The async call builder
     */
    public HrisGetDepartmentGroupRequestBuilder getDepartmentGroup() {
        return new HrisGetDepartmentGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Department Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetDepartmentGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetDepartmentGroupResponse> getDepartmentGroup(HrisGetDepartmentGroupRequest request) {
        return getDepartmentGroup(request, Optional.empty());
    }

    /**
     * Get Department Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetDepartmentGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetDepartmentGroupResponse> getDepartmentGroup(HrisGetDepartmentGroupRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetDepartmentGroupRequest, HrisGetDepartmentGroupResponse> operation
              = new HrisGetDepartmentGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Cost Center Group
     * 
     * @return The async call builder
     */
    public HrisGetCostCenterGroupRequestBuilder getCostCenterGroup() {
        return new HrisGetCostCenterGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Cost Center Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetCostCenterGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetCostCenterGroupResponse> getCostCenterGroup(HrisGetCostCenterGroupRequest request) {
        return getCostCenterGroup(request, Optional.empty());
    }

    /**
     * Get Cost Center Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetCostCenterGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetCostCenterGroupResponse> getCostCenterGroup(HrisGetCostCenterGroupRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetCostCenterGroupRequest, HrisGetCostCenterGroupResponse> operation
              = new HrisGetCostCenterGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Team Group
     * 
     * @return The async call builder
     */
    public HrisGetTeamGroupRequestBuilder getTeamGroup() {
        return new HrisGetTeamGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Team Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetTeamGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetTeamGroupResponse> getTeamGroup(HrisGetTeamGroupRequest request) {
        return getTeamGroup(request, Optional.empty());
    }

    /**
     * Get Team Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetTeamGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetTeamGroupResponse> getTeamGroup(HrisGetTeamGroupRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetTeamGroupRequest, HrisGetTeamGroupResponse> operation
              = new HrisGetTeamGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Division Group
     * 
     * @return The async call builder
     */
    public HrisGetDivisionGroupRequestBuilder getDivisionGroup() {
        return new HrisGetDivisionGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Division Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetDivisionGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetDivisionGroupResponse> getDivisionGroup(HrisGetDivisionGroupRequest request) {
        return getDivisionGroup(request, Optional.empty());
    }

    /**
     * Get Division Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetDivisionGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetDivisionGroupResponse> getDivisionGroup(HrisGetDivisionGroupRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetDivisionGroupRequest, HrisGetDivisionGroupResponse> operation
              = new HrisGetDivisionGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Company Group
     * 
     * @return The async call builder
     */
    public HrisGetCompanyGroupRequestBuilder getCompanyGroup() {
        return new HrisGetCompanyGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetCompanyGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetCompanyGroupResponse> getCompanyGroup(HrisGetCompanyGroupRequest request) {
        return getCompanyGroup(request, Optional.empty());
    }

    /**
     * Get Company Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetCompanyGroupResponse>} - The async response
     */
    public CompletableFuture<HrisGetCompanyGroupResponse> getCompanyGroup(HrisGetCompanyGroupRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetCompanyGroupRequest, HrisGetCompanyGroupResponse> operation
              = new HrisGetCompanyGroup.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Jobs
     * 
     * @return The async call builder
     */
    public HrisListJobsRequestBuilder listJobs() {
        return new HrisListJobsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Jobs
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListJobsResponse>} - The async response
     */
    public CompletableFuture<HrisListJobsResponse> listJobs(HrisListJobsRequest request) {
        return listJobs(request, Optional.empty());
    }

    /**
     * List Jobs
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListJobsResponse>} - The async response
     */
    public CompletableFuture<HrisListJobsResponse> listJobs(HrisListJobsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListJobsRequest, HrisListJobsResponse> operation
              = new HrisListJobs.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Job
     * 
     * @return The async call builder
     */
    public HrisGetJobRequestBuilder getJob() {
        return new HrisGetJobRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Job
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetJobResponse>} - The async response
     */
    public CompletableFuture<HrisGetJobResponse> getJob(HrisGetJobRequest request) {
        return getJob(request, Optional.empty());
    }

    /**
     * Get Job
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetJobResponse>} - The async response
     */
    public CompletableFuture<HrisGetJobResponse> getJob(HrisGetJobRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetJobRequest, HrisGetJobResponse> operation
              = new HrisGetJob.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Work Locations
     * 
     * @return The async call builder
     */
    public HrisListLocationsRequestBuilder listLocations() {
        return new HrisListLocationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Work Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListLocationsResponse>} - The async response
     */
    public CompletableFuture<HrisListLocationsResponse> listLocations(HrisListLocationsRequest request) {
        return listLocations(request, Optional.empty());
    }

    /**
     * List Work Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListLocationsResponse>} - The async response
     */
    public CompletableFuture<HrisListLocationsResponse> listLocations(HrisListLocationsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListLocationsRequest, HrisListLocationsResponse> operation
              = new HrisListLocations.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Work Location
     * 
     * @return The async call builder
     */
    public HrisGetLocationRequestBuilder getLocation() {
        return new HrisGetLocationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Work Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetLocationResponse>} - The async response
     */
    public CompletableFuture<HrisGetLocationResponse> getLocation(HrisGetLocationRequest request) {
        return getLocation(request, Optional.empty());
    }

    /**
     * Get Work Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetLocationResponse>} - The async response
     */
    public CompletableFuture<HrisGetLocationResponse> getLocation(HrisGetLocationRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetLocationRequest, HrisGetLocationResponse> operation
              = new HrisGetLocation.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Positions
     * 
     * @return The async call builder
     */
    public HrisListPositionsRequestBuilder listPositions() {
        return new HrisListPositionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Positions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListPositionsResponse>} - The async response
     */
    public CompletableFuture<HrisListPositionsResponse> listPositions(HrisListPositionsRequest request) {
        return listPositions(request, Optional.empty());
    }

    /**
     * List Positions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListPositionsResponse>} - The async response
     */
    public CompletableFuture<HrisListPositionsResponse> listPositions(HrisListPositionsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListPositionsRequest, HrisListPositionsResponse> operation
              = new HrisListPositions.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Position
     * 
     * @return The async call builder
     */
    public HrisGetPositionRequestBuilder getPosition() {
        return new HrisGetPositionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Position
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetPositionResponse>} - The async response
     */
    public CompletableFuture<HrisGetPositionResponse> getPosition(HrisGetPositionRequest request) {
        return getPosition(request, Optional.empty());
    }

    /**
     * Get Position
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetPositionResponse>} - The async response
     */
    public CompletableFuture<HrisGetPositionResponse> getPosition(HrisGetPositionRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetPositionRequest, HrisGetPositionResponse> operation
              = new HrisGetPosition.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Time Entries
     * 
     * @return The async call builder
     */
    public HrisListTimeEntriesRequestBuilder listTimeEntries() {
        return new HrisListTimeEntriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Time Entries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListTimeEntriesResponse>} - The async response
     */
    public CompletableFuture<HrisListTimeEntriesResponse> listTimeEntries(HrisListTimeEntriesRequest request) {
        return listTimeEntries(request, Optional.empty());
    }

    /**
     * List Time Entries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListTimeEntriesResponse>} - The async response
     */
    public CompletableFuture<HrisListTimeEntriesResponse> listTimeEntries(HrisListTimeEntriesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListTimeEntriesRequest, HrisListTimeEntriesResponse> operation
              = new HrisListTimeEntries.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Time Entry
     * 
     * @return The async call builder
     */
    public HrisGetTimeEntriesRequestBuilder getTimeEntries() {
        return new HrisGetTimeEntriesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Time Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetTimeEntriesResponse>} - The async response
     */
    public CompletableFuture<HrisGetTimeEntriesResponse> getTimeEntries(HrisGetTimeEntriesRequest request) {
        return getTimeEntries(request, Optional.empty());
    }

    /**
     * Get Time Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetTimeEntriesResponse>} - The async response
     */
    public CompletableFuture<HrisGetTimeEntriesResponse> getTimeEntries(HrisGetTimeEntriesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetTimeEntriesRequest, HrisGetTimeEntriesResponse> operation
              = new HrisGetTimeEntries.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List time off requests
     * 
     * @return The async call builder
     */
    public HrisListTimeOffRequestsRequestBuilder listTimeOffRequests() {
        return new HrisListTimeOffRequestsRequestBuilder(sdkConfiguration);
    }

    /**
     * List time off requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListTimeOffRequestsResponse>} - The async response
     */
    public CompletableFuture<HrisListTimeOffRequestsResponse> listTimeOffRequests(HrisListTimeOffRequestsRequest request) {
        return listTimeOffRequests(request, Optional.empty());
    }

    /**
     * List time off requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListTimeOffRequestsResponse>} - The async response
     */
    public CompletableFuture<HrisListTimeOffRequestsResponse> listTimeOffRequests(HrisListTimeOffRequestsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListTimeOffRequestsRequest, HrisListTimeOffRequestsResponse> operation
              = new HrisListTimeOffRequests.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get time off request
     * 
     * @return The async call builder
     */
    public HrisGetTimeOffRequestRequestBuilder getTimeOffRequest() {
        return new HrisGetTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get time off request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisGetTimeOffRequestResponse> getTimeOffRequest(HrisGetTimeOffRequestRequest request) {
        return getTimeOffRequest(request, Optional.empty());
    }

    /**
     * Get time off request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetTimeOffRequestResponse>} - The async response
     */
    public CompletableFuture<HrisGetTimeOffRequestResponse> getTimeOffRequest(HrisGetTimeOffRequestRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetTimeOffRequestRequest, HrisGetTimeOffRequestResponse> operation
              = new HrisGetTimeOffRequest.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Shifts
     * 
     * @return The async call builder
     */
    public HrisListShiftsRequestBuilder listShifts() {
        return new HrisListShiftsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Shifts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListShiftsResponse>} - The async response
     */
    public CompletableFuture<HrisListShiftsResponse> listShifts(HrisListShiftsRequest request) {
        return listShifts(request, Optional.empty());
    }

    /**
     * List Shifts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListShiftsResponse>} - The async response
     */
    public CompletableFuture<HrisListShiftsResponse> listShifts(HrisListShiftsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListShiftsRequest, HrisListShiftsResponse> operation
              = new HrisListShifts.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Shift
     * 
     * @return The async call builder
     */
    public HrisGetShiftRequestBuilder getShift() {
        return new HrisGetShiftRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Shift
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetShiftResponse>} - The async response
     */
    public CompletableFuture<HrisGetShiftResponse> getShift(HrisGetShiftRequest request) {
        return getShift(request, Optional.empty());
    }

    /**
     * Get Shift
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetShiftResponse>} - The async response
     */
    public CompletableFuture<HrisGetShiftResponse> getShift(HrisGetShiftRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetShiftRequest, HrisGetShiftResponse> operation
              = new HrisGetShift.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List time off types
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisListTimeOffTypesRequestBuilder listTimeOffTypes() {
        return new HrisListTimeOffTypesRequestBuilder(sdkConfiguration);
    }

    /**
     * List time off types
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListTimeOffTypesResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<HrisListTimeOffTypesResponse> listTimeOffTypes(HrisListTimeOffTypesRequest request) {
        return listTimeOffTypes(request, Optional.empty());
    }

    /**
     * List time off types
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListTimeOffTypesResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<HrisListTimeOffTypesResponse> listTimeOffTypes(HrisListTimeOffTypesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListTimeOffTypesRequest, HrisListTimeOffTypesResponse> operation
              = new HrisListTimeOffTypes.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get time off type
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisGetTimeOffTypeRequestBuilder getTimeOffType() {
        return new HrisGetTimeOffTypeRequestBuilder(sdkConfiguration);
    }

    /**
     * Get time off type
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetTimeOffTypeResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<HrisGetTimeOffTypeResponse> getTimeOffType(HrisGetTimeOffTypeRequest request) {
        return getTimeOffType(request, Optional.empty());
    }

    /**
     * Get time off type
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetTimeOffTypeResponse>} - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<HrisGetTimeOffTypeResponse> getTimeOffType(HrisGetTimeOffTypeRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetTimeOffTypeRequest, HrisGetTimeOffTypeResponse> operation
              = new HrisGetTimeOffType.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Time Off Policies
     * 
     * @return The async call builder
     */
    public HrisListTimeOffPoliciesRequestBuilder listTimeOffPolicies() {
        return new HrisListTimeOffPoliciesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListTimeOffPoliciesResponse>} - The async response
     */
    public CompletableFuture<HrisListTimeOffPoliciesResponse> listTimeOffPolicies(HrisListTimeOffPoliciesRequest request) {
        return listTimeOffPolicies(request, Optional.empty());
    }

    /**
     * List Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListTimeOffPoliciesResponse>} - The async response
     */
    public CompletableFuture<HrisListTimeOffPoliciesResponse> listTimeOffPolicies(HrisListTimeOffPoliciesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListTimeOffPoliciesRequest, HrisListTimeOffPoliciesResponse> operation
              = new HrisListTimeOffPolicies.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Time Off Policy
     * 
     * @return The async call builder
     */
    public HrisGetTimeOffPolicyRequestBuilder getTimeOffPolicy() {
        return new HrisGetTimeOffPolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Time Off Policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetTimeOffPolicyResponse>} - The async response
     */
    public CompletableFuture<HrisGetTimeOffPolicyResponse> getTimeOffPolicy(HrisGetTimeOffPolicyRequest request) {
        return getTimeOffPolicy(request, Optional.empty());
    }

    /**
     * Get Time Off Policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetTimeOffPolicyResponse>} - The async response
     */
    public CompletableFuture<HrisGetTimeOffPolicyResponse> getTimeOffPolicy(HrisGetTimeOffPolicyRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetTimeOffPolicyRequest, HrisGetTimeOffPolicyResponse> operation
              = new HrisGetTimeOffPolicy.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Assigned Time Off Policies
     * 
     * @return The async call builder
     */
    public HrisListEmployeeTimeOffPoliciesRequestBuilder listEmployeeTimeOffPolicies() {
        return new HrisListEmployeeTimeOffPoliciesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Assigned Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeTimeOffPoliciesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTimeOffPoliciesResponse> listEmployeeTimeOffPolicies(HrisListEmployeeTimeOffPoliciesRequest request) {
        return listEmployeeTimeOffPolicies(request, Optional.empty());
    }

    /**
     * List Assigned Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeTimeOffPoliciesResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTimeOffPoliciesResponse> listEmployeeTimeOffPolicies(HrisListEmployeeTimeOffPoliciesRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeTimeOffPoliciesRequest, HrisListEmployeeTimeOffPoliciesResponse> operation
              = new HrisListEmployeeTimeOffPolicies.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List benefits
     * 
     * @return The async call builder
     */
    public HrisListBenefitsRequestBuilder listBenefits() {
        return new HrisListBenefitsRequestBuilder(sdkConfiguration);
    }

    /**
     * List benefits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListBenefitsResponse>} - The async response
     */
    public CompletableFuture<HrisListBenefitsResponse> listBenefits(HrisListBenefitsRequest request) {
        return listBenefits(request, Optional.empty());
    }

    /**
     * List benefits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListBenefitsResponse>} - The async response
     */
    public CompletableFuture<HrisListBenefitsResponse> listBenefits(HrisListBenefitsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListBenefitsRequest, HrisListBenefitsResponse> operation
              = new HrisListBenefits.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Benefit
     * 
     * @return The async call builder
     */
    public HrisGetBenefitRequestBuilder getBenefit() {
        return new HrisGetBenefitRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Benefit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetBenefitResponse>} - The async response
     */
    public CompletableFuture<HrisGetBenefitResponse> getBenefit(HrisGetBenefitRequest request) {
        return getBenefit(request, Optional.empty());
    }

    /**
     * Get Benefit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetBenefitResponse>} - The async response
     */
    public CompletableFuture<HrisGetBenefitResponse> getBenefit(HrisGetBenefitRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetBenefitRequest, HrisGetBenefitResponse> operation
              = new HrisGetBenefit.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Skills
     * 
     * @return The async call builder
     */
    public HrisListEmployeeSkillsRequestBuilder listEmployeeSkills() {
        return new HrisListEmployeeSkillsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Skills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeSkillsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeSkillsResponse> listEmployeeSkills(HrisListEmployeeSkillsRequest request) {
        return listEmployeeSkills(request, Optional.empty());
    }

    /**
     * List Employee Skills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeSkillsResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeSkillsResponse> listEmployeeSkills(HrisListEmployeeSkillsRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeSkillsRequest, HrisListEmployeeSkillsResponse> operation
              = new HrisListEmployeeSkills.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Employee Skill
     * 
     * @return The async call builder
     */
    public HrisCreateEmployeeSkillRequestBuilder createEmployeeSkill() {
        return new HrisCreateEmployeeSkillRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Skill
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param entitySkillsCreateRequestDto 
     * @return {@code CompletableFuture<HrisCreateEmployeeSkillResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeSkillResponse> createEmployeeSkill(
            String xAccountId, String id,
            EntitySkillsCreateRequestDto entitySkillsCreateRequestDto) {
        return createEmployeeSkill(
                xAccountId, id, entitySkillsCreateRequestDto,
                Optional.empty());
    }

    /**
     * Create Employee Skill
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param entitySkillsCreateRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisCreateEmployeeSkillResponse>} - The async response
     */
    public CompletableFuture<HrisCreateEmployeeSkillResponse> createEmployeeSkill(
            String xAccountId, String id,
            EntitySkillsCreateRequestDto entitySkillsCreateRequestDto, Optional<Options> options) {
        HrisCreateEmployeeSkillRequest request =
            HrisCreateEmployeeSkillRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .entitySkillsCreateRequestDto(entitySkillsCreateRequestDto)
                .build();
        AsyncRequestOperation<HrisCreateEmployeeSkillRequest, HrisCreateEmployeeSkillResponse> operation
              = new HrisCreateEmployeeSkill.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Skill
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeSkillRequestBuilder getEmployeeSkill() {
        return new HrisGetEmployeeSkillRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Skill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeSkillResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeSkillResponse> getEmployeeSkill(HrisGetEmployeeSkillRequest request) {
        return getEmployeeSkill(request, Optional.empty());
    }

    /**
     * Get Employee Skill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeSkillResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeSkillResponse> getEmployeeSkill(HrisGetEmployeeSkillRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeSkillRequest, HrisGetEmployeeSkillResponse> operation
              = new HrisGetEmployeeSkill.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Employee Tasks
     * 
     * @return The async call builder
     */
    public HrisListEmployeeTasksRequestBuilder listEmployeeTasks() {
        return new HrisListEmployeeTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListEmployeeTasksResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTasksResponse> listEmployeeTasks(HrisListEmployeeTasksRequest request) {
        return listEmployeeTasks(request, Optional.empty());
    }

    /**
     * List Employee Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListEmployeeTasksResponse>} - The async response
     */
    public CompletableFuture<HrisListEmployeeTasksResponse> listEmployeeTasks(HrisListEmployeeTasksRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListEmployeeTasksRequest, HrisListEmployeeTasksResponse> operation
              = new HrisListEmployeeTasks.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Employee Task
     * 
     * @return The async call builder
     */
    public HrisGetEmployeeTaskRequestBuilder getEmployeeTask() {
        return new HrisGetEmployeeTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetEmployeeTaskResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeTaskResponse> getEmployeeTask(HrisGetEmployeeTaskRequest request) {
        return getEmployeeTask(request, Optional.empty());
    }

    /**
     * Get Employee Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetEmployeeTaskResponse>} - The async response
     */
    public CompletableFuture<HrisGetEmployeeTaskResponse> getEmployeeTask(HrisGetEmployeeTaskRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetEmployeeTaskRequest, HrisGetEmployeeTaskResponse> operation
              = new HrisGetEmployeeTask.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update Employee Task
     * 
     * @return The async call builder
     */
    public HrisUpdateEmployeeTaskRequestBuilder updateEmployeeTask() {
        return new HrisUpdateEmployeeTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee Task
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param updateTaskRequestDto 
     * @return {@code CompletableFuture<HrisUpdateEmployeeTaskResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeTaskResponse> updateEmployeeTask(
            String xAccountId, String id,
            String subResourceId, UpdateTaskRequestDto updateTaskRequestDto) {
        return updateEmployeeTask(
                xAccountId, id, subResourceId,
                updateTaskRequestDto, Optional.empty());
    }

    /**
     * Update Employee Task
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param updateTaskRequestDto 
     * @param options additional options
     * @return {@code CompletableFuture<HrisUpdateEmployeeTaskResponse>} - The async response
     */
    public CompletableFuture<HrisUpdateEmployeeTaskResponse> updateEmployeeTask(
            String xAccountId, String id,
            String subResourceId, UpdateTaskRequestDto updateTaskRequestDto,
            Optional<Options> options) {
        HrisUpdateEmployeeTaskRequest request =
            HrisUpdateEmployeeTaskRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .updateTaskRequestDto(updateTaskRequestDto)
                .build();
        AsyncRequestOperation<HrisUpdateEmployeeTaskRequest, HrisUpdateEmployeeTaskResponse> operation
              = new HrisUpdateEmployeeTask.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Tasks
     * 
     * @return The async call builder
     */
    public HrisListTasksRequestBuilder listTasks() {
        return new HrisListTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisListTasksResponse>} - The async response
     */
    public CompletableFuture<HrisListTasksResponse> listTasks(HrisListTasksRequest request) {
        return listTasks(request, Optional.empty());
    }

    /**
     * List Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisListTasksResponse>} - The async response
     */
    public CompletableFuture<HrisListTasksResponse> listTasks(HrisListTasksRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisListTasksRequest, HrisListTasksResponse> operation
              = new HrisListTasks.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Task
     * 
     * @return The async call builder
     */
    public HrisGetTaskRequestBuilder getTask() {
        return new HrisGetTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<HrisGetTaskResponse>} - The async response
     */
    public CompletableFuture<HrisGetTaskResponse> getTask(HrisGetTaskRequest request) {
        return getTask(request, Optional.empty());
    }

    /**
     * Get Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return {@code CompletableFuture<HrisGetTaskResponse>} - The async response
     */
    public CompletableFuture<HrisGetTaskResponse> getTask(HrisGetTaskRequest request, Optional<Options> options) {
        AsyncRequestOperation<HrisGetTaskRequest, HrisGetTaskResponse> operation
              = new HrisGetTask.Async(
                                    sdkConfiguration, options, sdkConfiguration.retryScheduler(),
                                    _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
