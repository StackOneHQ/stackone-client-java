/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import static com.stackone.stackone_client_java.operations.Operations.RequestOperation;

import com.stackone.stackone_client_java.models.components.EntitySkillsCreateRequestDto;
import com.stackone.stackone_client_java.models.components.HrisBatchDocumentUploadRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateEmployeeRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateEmploymentRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateTimeOffRequestDto;
import com.stackone.stackone_client_java.models.components.HrisCreateWorkEligibilityRequestDto;
import com.stackone.stackone_client_java.models.components.HrisDocumentsUploadRequestDto;
import com.stackone.stackone_client_java.models.components.HrisInviteEmployeeRequestDto;
import com.stackone.stackone_client_java.models.components.HrisUpdateEmployeeRequestDto;
import com.stackone.stackone_client_java.models.components.HrisUpdateEmploymentRequestDto;
import com.stackone.stackone_client_java.models.operations.HrisBatchUploadEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.HrisBatchUploadEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisBatchUploadEmployeeDocumentResponse;
import com.stackone.stackone_client_java.models.operations.HrisCancelEmployeeTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisCancelEmployeeTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisCancelEmployeeTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeSkillRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeSkillRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeSkillResponse;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeWorkEligibilityRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeWorkEligibilityRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisCreateEmployeeWorkEligibilityRequestResponse;
import com.stackone.stackone_client_java.models.operations.HrisDownloadEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.HrisDownloadEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisDownloadEmployeeDocumentResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetBenefitRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetBenefitRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetBenefitResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyGroupResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetCompanyResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetCostCenterGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetCostCenterGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetCostCenterGroupResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetDepartmentGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetDepartmentGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetDepartmentGroupResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetDivisionGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetDivisionGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetDivisionGroupResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeCustomFieldDefinitionRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeCustomFieldDefinitionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeCustomFieldDefinitionResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentCategoryRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentCategoryRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentCategoryResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeDocumentResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeSkillRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeSkillRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeSkillResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTaskRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTaskRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTaskResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTimeOffBalanceRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTimeOffBalanceRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeeTimeOffBalanceResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesWorkEligibilityRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesWorkEligibilityRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmployeesWorkEligibilityResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetGroupResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetJobRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetJobRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetJobResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetLocationRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetLocationRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetLocationResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetPositionRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetPositionRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetPositionResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetShiftRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetShiftRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetShiftResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetTaskRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTaskRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetTaskResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetTeamGroupRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTeamGroupRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetTeamGroupResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeEntriesRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeEntriesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeEntriesResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffPolicyRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffPolicyRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffPolicyResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffTypeRequest;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffTypeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisGetTimeOffTypeResponse;
import com.stackone.stackone_client_java.models.operations.HrisInviteEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisInviteEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisInviteEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.HrisListBenefitsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListBenefitsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListBenefitsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesGroupsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListCompaniesResponse;
import com.stackone.stackone_client_java.models.operations.HrisListCostCenterGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListCostCenterGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListCostCenterGroupsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListDepartmentGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListDepartmentGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListDepartmentGroupsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListDivisionGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListDivisionGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListDivisionGroupsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCategoriesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCategoriesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCategoriesResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCustomFieldDefinitionsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCustomFieldDefinitionsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeCustomFieldDefinitionsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeDocumentsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeDocumentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeDocumentsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeEmploymentsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeEmploymentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeEmploymentsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeSkillsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeSkillsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeSkillsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTasksRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTasksRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTasksResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffBalancesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffBalancesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffBalancesResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffPoliciesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffPoliciesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffPoliciesResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffRequestsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffRequestsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeTimeOffRequestsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeWorkEligibilityRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeWorkEligibilityRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeeWorkEligibilityResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmployeesResponse;
import com.stackone.stackone_client_java.models.operations.HrisListEmploymentsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListEmploymentsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListEmploymentsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListGroupsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListJobsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListJobsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListJobsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListLocationsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListLocationsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListLocationsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListPositionsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListPositionsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListPositionsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListShiftsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListShiftsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListShiftsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListTasksRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTasksRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListTasksResponse;
import com.stackone.stackone_client_java.models.operations.HrisListTeamGroupsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTeamGroupsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListTeamGroupsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListTimeEntriesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeEntriesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListTimeEntriesResponse;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffPoliciesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffPoliciesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffPoliciesResponse;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffRequestsRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffRequestsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffRequestsResponse;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffTypesRequest;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffTypesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisListTimeOffTypesResponse;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeEmploymentRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeEmploymentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeEmploymentResponse;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeResponse;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeTimeOffRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeTimeOffRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeTimeOffRequestResponse;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeWorkEligibilityRequestRequest;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisUpdateEmployeeWorkEligibilityRequestResponse;
import com.stackone.stackone_client_java.models.operations.HrisUploadEmployeeDocumentRequest;
import com.stackone.stackone_client_java.models.operations.HrisUploadEmployeeDocumentRequestBuilder;
import com.stackone.stackone_client_java.models.operations.HrisUploadEmployeeDocumentResponse;
import com.stackone.stackone_client_java.operations.HrisBatchUploadEmployeeDocumentOperation;
import com.stackone.stackone_client_java.operations.HrisCancelEmployeeTimeOffRequestOperation;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeEmploymentOperation;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeOperation;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeSkillOperation;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeTimeOffRequestOperation;
import com.stackone.stackone_client_java.operations.HrisCreateEmployeeWorkEligibilityRequestOperation;
import com.stackone.stackone_client_java.operations.HrisDownloadEmployeeDocumentOperation;
import com.stackone.stackone_client_java.operations.HrisGetBenefitOperation;
import com.stackone.stackone_client_java.operations.HrisGetCompanyGroupOperation;
import com.stackone.stackone_client_java.operations.HrisGetCompanyOperation;
import com.stackone.stackone_client_java.operations.HrisGetCostCenterGroupOperation;
import com.stackone.stackone_client_java.operations.HrisGetDepartmentGroupOperation;
import com.stackone.stackone_client_java.operations.HrisGetDivisionGroupOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeCustomFieldDefinitionOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeDocumentCategoryOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeDocumentOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeEmploymentOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeSkillOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeTaskOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeeTimeOffBalanceOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeesTimeOffRequestOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmployeesWorkEligibilityOperation;
import com.stackone.stackone_client_java.operations.HrisGetEmploymentOperation;
import com.stackone.stackone_client_java.operations.HrisGetGroupOperation;
import com.stackone.stackone_client_java.operations.HrisGetJobOperation;
import com.stackone.stackone_client_java.operations.HrisGetLocationOperation;
import com.stackone.stackone_client_java.operations.HrisGetPositionOperation;
import com.stackone.stackone_client_java.operations.HrisGetShiftOperation;
import com.stackone.stackone_client_java.operations.HrisGetTaskOperation;
import com.stackone.stackone_client_java.operations.HrisGetTeamGroupOperation;
import com.stackone.stackone_client_java.operations.HrisGetTimeEntriesOperation;
import com.stackone.stackone_client_java.operations.HrisGetTimeOffPolicyOperation;
import com.stackone.stackone_client_java.operations.HrisGetTimeOffRequestOperation;
import com.stackone.stackone_client_java.operations.HrisGetTimeOffTypeOperation;
import com.stackone.stackone_client_java.operations.HrisInviteEmployeeOperation;
import com.stackone.stackone_client_java.operations.HrisListBenefitsOperation;
import com.stackone.stackone_client_java.operations.HrisListCompaniesGroupsOperation;
import com.stackone.stackone_client_java.operations.HrisListCompaniesOperation;
import com.stackone.stackone_client_java.operations.HrisListCostCenterGroupsOperation;
import com.stackone.stackone_client_java.operations.HrisListDepartmentGroupsOperation;
import com.stackone.stackone_client_java.operations.HrisListDivisionGroupsOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeCategoriesOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeCustomFieldDefinitionsOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeDocumentsOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeEmploymentsOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeSkillsOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTasksOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTimeOffBalancesOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTimeOffPoliciesOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeTimeOffRequestsOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeeWorkEligibilityOperation;
import com.stackone.stackone_client_java.operations.HrisListEmployeesOperation;
import com.stackone.stackone_client_java.operations.HrisListEmploymentsOperation;
import com.stackone.stackone_client_java.operations.HrisListGroupsOperation;
import com.stackone.stackone_client_java.operations.HrisListJobsOperation;
import com.stackone.stackone_client_java.operations.HrisListLocationsOperation;
import com.stackone.stackone_client_java.operations.HrisListPositionsOperation;
import com.stackone.stackone_client_java.operations.HrisListShiftsOperation;
import com.stackone.stackone_client_java.operations.HrisListTasksOperation;
import com.stackone.stackone_client_java.operations.HrisListTeamGroupsOperation;
import com.stackone.stackone_client_java.operations.HrisListTimeEntriesOperation;
import com.stackone.stackone_client_java.operations.HrisListTimeOffPoliciesOperation;
import com.stackone.stackone_client_java.operations.HrisListTimeOffRequestsOperation;
import com.stackone.stackone_client_java.operations.HrisListTimeOffTypesOperation;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeEmploymentOperation;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeOperation;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeTimeOffRequestOperation;
import com.stackone.stackone_client_java.operations.HrisUpdateEmployeeWorkEligibilityRequestOperation;
import com.stackone.stackone_client_java.operations.HrisUploadEmployeeDocumentOperation;
import com.stackone.stackone_client_java.utils.Options;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Hris {
    private final SDKConfiguration sdkConfiguration;

    Hris(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Companies
     * 
     * @return The call builder
     */
    public HrisListCompaniesRequestBuilder listCompanies() {
        return new HrisListCompaniesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListCompaniesResponse listCompanies(HrisListCompaniesRequest request) throws Exception {
        return listCompanies(request, Optional.empty());
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListCompaniesResponse listCompanies(HrisListCompaniesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListCompaniesRequest, HrisListCompaniesResponse> operation
              = new HrisListCompaniesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Company
     * 
     * @return The call builder
     */
    public HrisGetCompanyRequestBuilder getCompany() {
        return new HrisGetCompanyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetCompanyResponse getCompany(HrisGetCompanyRequest request) throws Exception {
        return getCompany(request, Optional.empty());
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetCompanyResponse getCompany(HrisGetCompanyRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetCompanyRequest, HrisGetCompanyResponse> operation
              = new HrisGetCompanyOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List employee Custom Field Definitions
     * 
     * @return The call builder
     */
    public HrisListEmployeeCustomFieldDefinitionsRequestBuilder listEmployeeCustomFieldDefinitions() {
        return new HrisListEmployeeCustomFieldDefinitionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List employee Custom Field Definitions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeCustomFieldDefinitionsResponse listEmployeeCustomFieldDefinitions(HrisListEmployeeCustomFieldDefinitionsRequest request) throws Exception {
        return listEmployeeCustomFieldDefinitions(request, Optional.empty());
    }

    /**
     * List employee Custom Field Definitions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeCustomFieldDefinitionsResponse listEmployeeCustomFieldDefinitions(HrisListEmployeeCustomFieldDefinitionsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeCustomFieldDefinitionsRequest, HrisListEmployeeCustomFieldDefinitionsResponse> operation
              = new HrisListEmployeeCustomFieldDefinitionsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get employee Custom Field Definition
     * 
     * @return The call builder
     */
    public HrisGetEmployeeCustomFieldDefinitionRequestBuilder getEmployeeCustomFieldDefinition() {
        return new HrisGetEmployeeCustomFieldDefinitionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get employee Custom Field Definition
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeCustomFieldDefinitionResponse getEmployeeCustomFieldDefinition(HrisGetEmployeeCustomFieldDefinitionRequest request) throws Exception {
        return getEmployeeCustomFieldDefinition(request, Optional.empty());
    }

    /**
     * Get employee Custom Field Definition
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeCustomFieldDefinitionResponse getEmployeeCustomFieldDefinition(HrisGetEmployeeCustomFieldDefinitionRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeCustomFieldDefinitionRequest, HrisGetEmployeeCustomFieldDefinitionResponse> operation
              = new HrisGetEmployeeCustomFieldDefinitionOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employees
     * 
     * @return The call builder
     */
    public HrisListEmployeesRequestBuilder listEmployees() {
        return new HrisListEmployeesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employees
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeesResponse listEmployees(HrisListEmployeesRequest request) throws Exception {
        return listEmployees(request, Optional.empty());
    }

    /**
     * List Employees
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeesResponse listEmployees(HrisListEmployeesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeesRequest, HrisListEmployeesResponse> operation
              = new HrisListEmployeesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Employee
     * 
     * @return The call builder
     */
    public HrisCreateEmployeeRequestBuilder createEmployee() {
        return new HrisCreateEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee
     * 
     * @param xAccountId The account identifier
     * @param hrisCreateEmployeeRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeResponse createEmployee(String xAccountId, HrisCreateEmployeeRequestDto hrisCreateEmployeeRequestDto) throws Exception {
        return createEmployee(xAccountId, hrisCreateEmployeeRequestDto, Optional.empty());
    }

    /**
     * Create Employee
     * 
     * @param xAccountId The account identifier
     * @param hrisCreateEmployeeRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeResponse createEmployee(
            String xAccountId, HrisCreateEmployeeRequestDto hrisCreateEmployeeRequestDto,
            Optional<Options> options) throws Exception {
        HrisCreateEmployeeRequest request =
            HrisCreateEmployeeRequest
                .builder()
                .xAccountId(xAccountId)
                .hrisCreateEmployeeRequestDto(hrisCreateEmployeeRequestDto)
                .build();
        RequestOperation<HrisCreateEmployeeRequest, HrisCreateEmployeeResponse> operation
              = new HrisCreateEmployeeOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee
     * 
     * @return The call builder
     */
    public HrisGetEmployeeRequestBuilder getEmployee() {
        return new HrisGetEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeResponse getEmployee(HrisGetEmployeeRequest request) throws Exception {
        return getEmployee(request, Optional.empty());
    }

    /**
     * Get Employee
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeResponse getEmployee(HrisGetEmployeeRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeRequest, HrisGetEmployeeResponse> operation
              = new HrisGetEmployeeOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Employee
     * 
     * @return The call builder
     */
    public HrisUpdateEmployeeRequestBuilder updateEmployee() {
        return new HrisUpdateEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisUpdateEmployeeRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeResponse updateEmployee(
            String xAccountId, String id,
            HrisUpdateEmployeeRequestDto hrisUpdateEmployeeRequestDto) throws Exception {
        return updateEmployee(xAccountId, id, hrisUpdateEmployeeRequestDto,
            Optional.empty());
    }

    /**
     * Update Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisUpdateEmployeeRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeResponse updateEmployee(
            String xAccountId, String id,
            HrisUpdateEmployeeRequestDto hrisUpdateEmployeeRequestDto, Optional<Options> options) throws Exception {
        HrisUpdateEmployeeRequest request =
            HrisUpdateEmployeeRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisUpdateEmployeeRequestDto(hrisUpdateEmployeeRequestDto)
                .build();
        RequestOperation<HrisUpdateEmployeeRequest, HrisUpdateEmployeeResponse> operation
              = new HrisUpdateEmployeeOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Invite Employee
     * 
     * @return The call builder
     */
    public HrisInviteEmployeeRequestBuilder inviteEmployee() {
        return new HrisInviteEmployeeRequestBuilder(sdkConfiguration);
    }

    /**
     * Invite Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisInviteEmployeeRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisInviteEmployeeResponse inviteEmployee(
            String xAccountId, String id,
            HrisInviteEmployeeRequestDto hrisInviteEmployeeRequestDto) throws Exception {
        return inviteEmployee(xAccountId, id, hrisInviteEmployeeRequestDto,
            Optional.empty());
    }

    /**
     * Invite Employee
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisInviteEmployeeRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisInviteEmployeeResponse inviteEmployee(
            String xAccountId, String id,
            HrisInviteEmployeeRequestDto hrisInviteEmployeeRequestDto, Optional<Options> options) throws Exception {
        HrisInviteEmployeeRequest request =
            HrisInviteEmployeeRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisInviteEmployeeRequestDto(hrisInviteEmployeeRequestDto)
                .build();
        RequestOperation<HrisInviteEmployeeRequest, HrisInviteEmployeeResponse> operation
              = new HrisInviteEmployeeOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Time Off Requests
     * 
     * @return The call builder
     */
    public HrisListEmployeeTimeOffRequestsRequestBuilder listEmployeeTimeOffRequests() {
        return new HrisListEmployeeTimeOffRequestsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Time Off Requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTimeOffRequestsResponse listEmployeeTimeOffRequests(HrisListEmployeeTimeOffRequestsRequest request) throws Exception {
        return listEmployeeTimeOffRequests(request, Optional.empty());
    }

    /**
     * List Employee Time Off Requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTimeOffRequestsResponse listEmployeeTimeOffRequests(HrisListEmployeeTimeOffRequestsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeTimeOffRequestsRequest, HrisListEmployeeTimeOffRequestsResponse> operation
              = new HrisListEmployeeTimeOffRequestsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Employee Time Off Request
     * 
     * @return The call builder
     */
    public HrisCreateEmployeeTimeOffRequestRequestBuilder createEmployeeTimeOffRequest() {
        return new HrisCreateEmployeeTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateTimeOffRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeTimeOffRequestResponse createEmployeeTimeOffRequest(
            String xAccountId, String id,
            HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto) throws Exception {
        return createEmployeeTimeOffRequest(xAccountId, id, hrisCreateTimeOffRequestDto,
            Optional.empty());
    }

    /**
     * Create Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateTimeOffRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeTimeOffRequestResponse createEmployeeTimeOffRequest(
            String xAccountId, String id,
            HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto, Optional<Options> options) throws Exception {
        HrisCreateEmployeeTimeOffRequestRequest request =
            HrisCreateEmployeeTimeOffRequestRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisCreateTimeOffRequestDto(hrisCreateTimeOffRequestDto)
                .build();
        RequestOperation<HrisCreateEmployeeTimeOffRequestRequest, HrisCreateEmployeeTimeOffRequestResponse> operation
              = new HrisCreateEmployeeTimeOffRequestOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employees Time Off Request
     * 
     * @return The call builder
     */
    public HrisGetEmployeesTimeOffRequestRequestBuilder getEmployeesTimeOffRequest() {
        return new HrisGetEmployeesTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employees Time Off Request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeesTimeOffRequestResponse getEmployeesTimeOffRequest(HrisGetEmployeesTimeOffRequestRequest request) throws Exception {
        return getEmployeesTimeOffRequest(request, Optional.empty());
    }

    /**
     * Get Employees Time Off Request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeesTimeOffRequestResponse getEmployeesTimeOffRequest(HrisGetEmployeesTimeOffRequestRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeesTimeOffRequestRequest, HrisGetEmployeesTimeOffRequestResponse> operation
              = new HrisGetEmployeesTimeOffRequestOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel Employee Time Off Request
     * 
     * @return The call builder
     */
    public HrisCancelEmployeeTimeOffRequestRequestBuilder cancelEmployeeTimeOffRequest() {
        return new HrisCancelEmployeeTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCancelEmployeeTimeOffRequestResponse cancelEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId) throws Exception {
        return cancelEmployeeTimeOffRequest(xAccountId, id, subResourceId,
            Optional.empty());
    }

    /**
     * Cancel Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCancelEmployeeTimeOffRequestResponse cancelEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId, Optional<Options> options) throws Exception {
        HrisCancelEmployeeTimeOffRequestRequest request =
            HrisCancelEmployeeTimeOffRequestRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .build();
        RequestOperation<HrisCancelEmployeeTimeOffRequestRequest, HrisCancelEmployeeTimeOffRequestResponse> operation
              = new HrisCancelEmployeeTimeOffRequestOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Employee Time Off Request
     * 
     * @return The call builder
     */
    public HrisUpdateEmployeeTimeOffRequestRequestBuilder updateEmployeeTimeOffRequest() {
        return new HrisUpdateEmployeeTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisCreateTimeOffRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeTimeOffRequestResponse updateEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId, HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto) throws Exception {
        return updateEmployeeTimeOffRequest(xAccountId, id, subResourceId,
            hrisCreateTimeOffRequestDto, Optional.empty());
    }

    /**
     * Update Employee Time Off Request
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisCreateTimeOffRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeTimeOffRequestResponse updateEmployeeTimeOffRequest(
            String xAccountId, String id,
            String subResourceId, HrisCreateTimeOffRequestDto hrisCreateTimeOffRequestDto,
            Optional<Options> options) throws Exception {
        HrisUpdateEmployeeTimeOffRequestRequest request =
            HrisUpdateEmployeeTimeOffRequestRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .hrisCreateTimeOffRequestDto(hrisCreateTimeOffRequestDto)
                .build();
        RequestOperation<HrisUpdateEmployeeTimeOffRequestRequest, HrisUpdateEmployeeTimeOffRequestResponse> operation
              = new HrisUpdateEmployeeTimeOffRequestOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Batch Upload Employee Document
     * 
     * @return The call builder
     */
    public HrisBatchUploadEmployeeDocumentRequestBuilder batchUploadEmployeeDocument() {
        return new HrisBatchUploadEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Batch Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisBatchDocumentUploadRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisBatchUploadEmployeeDocumentResponse batchUploadEmployeeDocument(
            String xAccountId, String id,
            HrisBatchDocumentUploadRequestDto hrisBatchDocumentUploadRequestDto) throws Exception {
        return batchUploadEmployeeDocument(xAccountId, id, hrisBatchDocumentUploadRequestDto,
            Optional.empty());
    }

    /**
     * Batch Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisBatchDocumentUploadRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisBatchUploadEmployeeDocumentResponse batchUploadEmployeeDocument(
            String xAccountId, String id,
            HrisBatchDocumentUploadRequestDto hrisBatchDocumentUploadRequestDto, Optional<Options> options) throws Exception {
        HrisBatchUploadEmployeeDocumentRequest request =
            HrisBatchUploadEmployeeDocumentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisBatchDocumentUploadRequestDto(hrisBatchDocumentUploadRequestDto)
                .build();
        RequestOperation<HrisBatchUploadEmployeeDocumentRequest, HrisBatchUploadEmployeeDocumentResponse> operation
              = new HrisBatchUploadEmployeeDocumentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Upload Employee Document
     * 
     * @return The call builder
     */
    public HrisUploadEmployeeDocumentRequestBuilder uploadEmployeeDocument() {
        return new HrisUploadEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisDocumentsUploadRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUploadEmployeeDocumentResponse uploadEmployeeDocument(
            String xAccountId, String id,
            HrisDocumentsUploadRequestDto hrisDocumentsUploadRequestDto) throws Exception {
        return uploadEmployeeDocument(xAccountId, id, hrisDocumentsUploadRequestDto,
            Optional.empty());
    }

    /**
     * Upload Employee Document
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisDocumentsUploadRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUploadEmployeeDocumentResponse uploadEmployeeDocument(
            String xAccountId, String id,
            HrisDocumentsUploadRequestDto hrisDocumentsUploadRequestDto, Optional<Options> options) throws Exception {
        HrisUploadEmployeeDocumentRequest request =
            HrisUploadEmployeeDocumentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisDocumentsUploadRequestDto(hrisDocumentsUploadRequestDto)
                .build();
        RequestOperation<HrisUploadEmployeeDocumentRequest, HrisUploadEmployeeDocumentResponse> operation
              = new HrisUploadEmployeeDocumentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Download Employee Document
     * 
     * @return The call builder
     */
    public HrisDownloadEmployeeDocumentRequestBuilder downloadEmployeeDocument() {
        return new HrisDownloadEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Download Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDownloadEmployeeDocumentResponse downloadEmployeeDocument(HrisDownloadEmployeeDocumentRequest request) throws Exception {
        return downloadEmployeeDocument(request, Optional.empty());
    }

    /**
     * Download Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisDownloadEmployeeDocumentResponse downloadEmployeeDocument(HrisDownloadEmployeeDocumentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisDownloadEmployeeDocumentRequest, HrisDownloadEmployeeDocumentResponse> operation
              = new HrisDownloadEmployeeDocumentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Documents
     * 
     * @return The call builder
     */
    public HrisListEmployeeDocumentsRequestBuilder listEmployeeDocuments() {
        return new HrisListEmployeeDocumentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Documents
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeDocumentsResponse listEmployeeDocuments(HrisListEmployeeDocumentsRequest request) throws Exception {
        return listEmployeeDocuments(request, Optional.empty());
    }

    /**
     * List Employee Documents
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeDocumentsResponse listEmployeeDocuments(HrisListEmployeeDocumentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeDocumentsRequest, HrisListEmployeeDocumentsResponse> operation
              = new HrisListEmployeeDocumentsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee Document
     * 
     * @return The call builder
     */
    public HrisGetEmployeeDocumentRequestBuilder getEmployeeDocument() {
        return new HrisGetEmployeeDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeDocumentResponse getEmployeeDocument(HrisGetEmployeeDocumentRequest request) throws Exception {
        return getEmployeeDocument(request, Optional.empty());
    }

    /**
     * Get Employee Document
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeDocumentResponse getEmployeeDocument(HrisGetEmployeeDocumentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeDocumentRequest, HrisGetEmployeeDocumentResponse> operation
              = new HrisGetEmployeeDocumentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Document Categories
     * 
     * @return The call builder
     */
    public HrisListEmployeeCategoriesRequestBuilder listEmployeeCategories() {
        return new HrisListEmployeeCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Document Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeCategoriesResponse listEmployeeCategories(HrisListEmployeeCategoriesRequest request) throws Exception {
        return listEmployeeCategories(request, Optional.empty());
    }

    /**
     * List Employee Document Categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeCategoriesResponse listEmployeeCategories(HrisListEmployeeCategoriesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeCategoriesRequest, HrisListEmployeeCategoriesResponse> operation
              = new HrisListEmployeeCategoriesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee Document Category
     * 
     * @return The call builder
     */
    public HrisGetEmployeeDocumentCategoryRequestBuilder getEmployeeDocumentCategory() {
        return new HrisGetEmployeeDocumentCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Document Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeDocumentCategoryResponse getEmployeeDocumentCategory(HrisGetEmployeeDocumentCategoryRequest request) throws Exception {
        return getEmployeeDocumentCategory(request, Optional.empty());
    }

    /**
     * Get Employee Document Category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeDocumentCategoryResponse getEmployeeDocumentCategory(HrisGetEmployeeDocumentCategoryRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeDocumentCategoryRequest, HrisGetEmployeeDocumentCategoryResponse> operation
              = new HrisGetEmployeeDocumentCategoryOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Work Eligibility
     * 
     * @return The call builder
     */
    public HrisListEmployeeWorkEligibilityRequestBuilder listEmployeeWorkEligibility() {
        return new HrisListEmployeeWorkEligibilityRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeWorkEligibilityResponse listEmployeeWorkEligibility(HrisListEmployeeWorkEligibilityRequest request) throws Exception {
        return listEmployeeWorkEligibility(request, Optional.empty());
    }

    /**
     * List Employee Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeWorkEligibilityResponse listEmployeeWorkEligibility(HrisListEmployeeWorkEligibilityRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeWorkEligibilityRequest, HrisListEmployeeWorkEligibilityResponse> operation
              = new HrisListEmployeeWorkEligibilityOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Employee Work Eligibility Request
     * 
     * @return The call builder
     */
    public HrisCreateEmployeeWorkEligibilityRequestRequestBuilder createEmployeeWorkEligibilityRequest() {
        return new HrisCreateEmployeeWorkEligibilityRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Work Eligibility Request
     * 
     * @param id 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeWorkEligibilityRequestResponse createEmployeeWorkEligibilityRequest(
            String id, String xAccountId,
            HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto) throws Exception {
        return createEmployeeWorkEligibilityRequest(id, xAccountId, hrisCreateWorkEligibilityRequestDto,
            Optional.empty());
    }

    /**
     * Create Employee Work Eligibility Request
     * 
     * @param id 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeWorkEligibilityRequestResponse createEmployeeWorkEligibilityRequest(
            String id, String xAccountId,
            HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto, Optional<Options> options) throws Exception {
        HrisCreateEmployeeWorkEligibilityRequestRequest request =
            HrisCreateEmployeeWorkEligibilityRequestRequest
                .builder()
                .id(id)
                .xAccountId(xAccountId)
                .hrisCreateWorkEligibilityRequestDto(hrisCreateWorkEligibilityRequestDto)
                .build();
        RequestOperation<HrisCreateEmployeeWorkEligibilityRequestRequest, HrisCreateEmployeeWorkEligibilityRequestResponse> operation
              = new HrisCreateEmployeeWorkEligibilityRequestOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employees Work Eligibility
     * 
     * @return The call builder
     */
    public HrisGetEmployeesWorkEligibilityRequestBuilder getEmployeesWorkEligibility() {
        return new HrisGetEmployeesWorkEligibilityRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employees Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeesWorkEligibilityResponse getEmployeesWorkEligibility(HrisGetEmployeesWorkEligibilityRequest request) throws Exception {
        return getEmployeesWorkEligibility(request, Optional.empty());
    }

    /**
     * Get Employees Work Eligibility
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeesWorkEligibilityResponse getEmployeesWorkEligibility(HrisGetEmployeesWorkEligibilityRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeesWorkEligibilityRequest, HrisGetEmployeesWorkEligibilityResponse> operation
              = new HrisGetEmployeesWorkEligibilityOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Employee Work Eligibility Request
     * 
     * @return The call builder
     */
    public HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder updateEmployeeWorkEligibilityRequest() {
        return new HrisUpdateEmployeeWorkEligibilityRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee Work Eligibility Request
     * 
     * @param id 
     * @param subResourceId 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeWorkEligibilityRequestResponse updateEmployeeWorkEligibilityRequest(
            String id, String subResourceId,
            String xAccountId, HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto) throws Exception {
        return updateEmployeeWorkEligibilityRequest(id, subResourceId, xAccountId,
            hrisCreateWorkEligibilityRequestDto, Optional.empty());
    }

    /**
     * Update Employee Work Eligibility Request
     * 
     * @param id 
     * @param subResourceId 
     * @param xAccountId The account identifier
     * @param hrisCreateWorkEligibilityRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeWorkEligibilityRequestResponse updateEmployeeWorkEligibilityRequest(
            String id, String subResourceId,
            String xAccountId, HrisCreateWorkEligibilityRequestDto hrisCreateWorkEligibilityRequestDto,
            Optional<Options> options) throws Exception {
        HrisUpdateEmployeeWorkEligibilityRequestRequest request =
            HrisUpdateEmployeeWorkEligibilityRequestRequest
                .builder()
                .id(id)
                .subResourceId(subResourceId)
                .xAccountId(xAccountId)
                .hrisCreateWorkEligibilityRequestDto(hrisCreateWorkEligibilityRequestDto)
                .build();
        RequestOperation<HrisUpdateEmployeeWorkEligibilityRequestRequest, HrisUpdateEmployeeWorkEligibilityRequestResponse> operation
              = new HrisUpdateEmployeeWorkEligibilityRequestOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Time Off Balances
     * 
     * @return The call builder
     */
    public HrisListEmployeeTimeOffBalancesRequestBuilder listEmployeeTimeOffBalances() {
        return new HrisListEmployeeTimeOffBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Time Off Balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTimeOffBalancesResponse listEmployeeTimeOffBalances(HrisListEmployeeTimeOffBalancesRequest request) throws Exception {
        return listEmployeeTimeOffBalances(request, Optional.empty());
    }

    /**
     * List Employee Time Off Balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTimeOffBalancesResponse listEmployeeTimeOffBalances(HrisListEmployeeTimeOffBalancesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeTimeOffBalancesRequest, HrisListEmployeeTimeOffBalancesResponse> operation
              = new HrisListEmployeeTimeOffBalancesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee Time Off Balance
     * 
     * @return The call builder
     */
    public HrisGetEmployeeTimeOffBalanceRequestBuilder getEmployeeTimeOffBalance() {
        return new HrisGetEmployeeTimeOffBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Time Off Balance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeTimeOffBalanceResponse getEmployeeTimeOffBalance(HrisGetEmployeeTimeOffBalanceRequest request) throws Exception {
        return getEmployeeTimeOffBalance(request, Optional.empty());
    }

    /**
     * Get Employee Time Off Balance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeTimeOffBalanceResponse getEmployeeTimeOffBalance(HrisGetEmployeeTimeOffBalanceRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeTimeOffBalanceRequest, HrisGetEmployeeTimeOffBalanceResponse> operation
              = new HrisGetEmployeeTimeOffBalanceOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employments
     * 
     * @return The call builder
     */
    public HrisListEmploymentsRequestBuilder listEmployments() {
        return new HrisListEmploymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmploymentsResponse listEmployments(HrisListEmploymentsRequest request) throws Exception {
        return listEmployments(request, Optional.empty());
    }

    /**
     * List Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmploymentsResponse listEmployments(HrisListEmploymentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmploymentsRequest, HrisListEmploymentsResponse> operation
              = new HrisListEmploymentsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employment
     * 
     * @return The call builder
     */
    public HrisGetEmploymentRequestBuilder getEmployment() {
        return new HrisGetEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmploymentResponse getEmployment(HrisGetEmploymentRequest request) throws Exception {
        return getEmployment(request, Optional.empty());
    }

    /**
     * Get Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmploymentResponse getEmployment(HrisGetEmploymentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmploymentRequest, HrisGetEmploymentResponse> operation
              = new HrisGetEmploymentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Employments
     * 
     * @return The call builder
     */
    public HrisListEmployeeEmploymentsRequestBuilder listEmployeeEmployments() {
        return new HrisListEmployeeEmploymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeEmploymentsResponse listEmployeeEmployments(HrisListEmployeeEmploymentsRequest request) throws Exception {
        return listEmployeeEmployments(request, Optional.empty());
    }

    /**
     * List Employee Employments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeEmploymentsResponse listEmployeeEmployments(HrisListEmployeeEmploymentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeEmploymentsRequest, HrisListEmployeeEmploymentsResponse> operation
              = new HrisListEmployeeEmploymentsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Employee Employment
     * 
     * @return The call builder
     */
    public HrisCreateEmployeeEmploymentRequestBuilder createEmployeeEmployment() {
        return new HrisCreateEmployeeEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateEmploymentRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeEmploymentResponse createEmployeeEmployment(
            String xAccountId, String id,
            HrisCreateEmploymentRequestDto hrisCreateEmploymentRequestDto) throws Exception {
        return createEmployeeEmployment(xAccountId, id, hrisCreateEmploymentRequestDto,
            Optional.empty());
    }

    /**
     * Create Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param hrisCreateEmploymentRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeEmploymentResponse createEmployeeEmployment(
            String xAccountId, String id,
            HrisCreateEmploymentRequestDto hrisCreateEmploymentRequestDto, Optional<Options> options) throws Exception {
        HrisCreateEmployeeEmploymentRequest request =
            HrisCreateEmployeeEmploymentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .hrisCreateEmploymentRequestDto(hrisCreateEmploymentRequestDto)
                .build();
        RequestOperation<HrisCreateEmployeeEmploymentRequest, HrisCreateEmployeeEmploymentResponse> operation
              = new HrisCreateEmployeeEmploymentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee Employment
     * 
     * @return The call builder
     */
    public HrisGetEmployeeEmploymentRequestBuilder getEmployeeEmployment() {
        return new HrisGetEmployeeEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeEmploymentResponse getEmployeeEmployment(HrisGetEmployeeEmploymentRequest request) throws Exception {
        return getEmployeeEmployment(request, Optional.empty());
    }

    /**
     * Get Employee Employment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeEmploymentResponse getEmployeeEmployment(HrisGetEmployeeEmploymentRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeEmploymentRequest, HrisGetEmployeeEmploymentResponse> operation
              = new HrisGetEmployeeEmploymentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Employee Employment
     * 
     * @return The call builder
     */
    public HrisUpdateEmployeeEmploymentRequestBuilder updateEmployeeEmployment() {
        return new HrisUpdateEmployeeEmploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisUpdateEmploymentRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeEmploymentResponse updateEmployeeEmployment(
            String xAccountId, String id,
            String subResourceId, HrisUpdateEmploymentRequestDto hrisUpdateEmploymentRequestDto) throws Exception {
        return updateEmployeeEmployment(xAccountId, id, subResourceId,
            hrisUpdateEmploymentRequestDto, Optional.empty());
    }

    /**
     * Update Employee Employment
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param subResourceId 
     * @param hrisUpdateEmploymentRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisUpdateEmployeeEmploymentResponse updateEmployeeEmployment(
            String xAccountId, String id,
            String subResourceId, HrisUpdateEmploymentRequestDto hrisUpdateEmploymentRequestDto,
            Optional<Options> options) throws Exception {
        HrisUpdateEmployeeEmploymentRequest request =
            HrisUpdateEmployeeEmploymentRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .subResourceId(subResourceId)
                .hrisUpdateEmploymentRequestDto(hrisUpdateEmploymentRequestDto)
                .build();
        RequestOperation<HrisUpdateEmployeeEmploymentRequest, HrisUpdateEmployeeEmploymentResponse> operation
              = new HrisUpdateEmployeeEmploymentOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Groups
     * 
     * @return The call builder
     */
    public HrisListGroupsRequestBuilder listGroups() {
        return new HrisListGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListGroupsResponse listGroups(HrisListGroupsRequest request) throws Exception {
        return listGroups(request, Optional.empty());
    }

    /**
     * List Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListGroupsResponse listGroups(HrisListGroupsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListGroupsRequest, HrisListGroupsResponse> operation
              = new HrisListGroupsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Department Groups
     * 
     * @return The call builder
     */
    public HrisListDepartmentGroupsRequestBuilder listDepartmentGroups() {
        return new HrisListDepartmentGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Department Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListDepartmentGroupsResponse listDepartmentGroups(HrisListDepartmentGroupsRequest request) throws Exception {
        return listDepartmentGroups(request, Optional.empty());
    }

    /**
     * List Department Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListDepartmentGroupsResponse listDepartmentGroups(HrisListDepartmentGroupsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListDepartmentGroupsRequest, HrisListDepartmentGroupsResponse> operation
              = new HrisListDepartmentGroupsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Cost Center Groups
     * 
     * @return The call builder
     */
    public HrisListCostCenterGroupsRequestBuilder listCostCenterGroups() {
        return new HrisListCostCenterGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Cost Center Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListCostCenterGroupsResponse listCostCenterGroups(HrisListCostCenterGroupsRequest request) throws Exception {
        return listCostCenterGroups(request, Optional.empty());
    }

    /**
     * List Cost Center Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListCostCenterGroupsResponse listCostCenterGroups(HrisListCostCenterGroupsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListCostCenterGroupsRequest, HrisListCostCenterGroupsResponse> operation
              = new HrisListCostCenterGroupsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Team Groups
     * 
     * @return The call builder
     */
    public HrisListTeamGroupsRequestBuilder listTeamGroups() {
        return new HrisListTeamGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Team Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTeamGroupsResponse listTeamGroups(HrisListTeamGroupsRequest request) throws Exception {
        return listTeamGroups(request, Optional.empty());
    }

    /**
     * List Team Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTeamGroupsResponse listTeamGroups(HrisListTeamGroupsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListTeamGroupsRequest, HrisListTeamGroupsResponse> operation
              = new HrisListTeamGroupsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Division Groups
     * 
     * @return The call builder
     */
    public HrisListDivisionGroupsRequestBuilder listDivisionGroups() {
        return new HrisListDivisionGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Division Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListDivisionGroupsResponse listDivisionGroups(HrisListDivisionGroupsRequest request) throws Exception {
        return listDivisionGroups(request, Optional.empty());
    }

    /**
     * List Division Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListDivisionGroupsResponse listDivisionGroups(HrisListDivisionGroupsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListDivisionGroupsRequest, HrisListDivisionGroupsResponse> operation
              = new HrisListDivisionGroupsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Companies Groups
     * 
     * @return The call builder
     */
    public HrisListCompaniesGroupsRequestBuilder listCompaniesGroups() {
        return new HrisListCompaniesGroupsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListCompaniesGroupsResponse listCompaniesGroups(HrisListCompaniesGroupsRequest request) throws Exception {
        return listCompaniesGroups(request, Optional.empty());
    }

    /**
     * List Companies Groups
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListCompaniesGroupsResponse listCompaniesGroups(HrisListCompaniesGroupsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListCompaniesGroupsRequest, HrisListCompaniesGroupsResponse> operation
              = new HrisListCompaniesGroupsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Group
     * 
     * @return The call builder
     */
    public HrisGetGroupRequestBuilder getGroup() {
        return new HrisGetGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetGroupResponse getGroup(HrisGetGroupRequest request) throws Exception {
        return getGroup(request, Optional.empty());
    }

    /**
     * Get Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetGroupResponse getGroup(HrisGetGroupRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetGroupRequest, HrisGetGroupResponse> operation
              = new HrisGetGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Department Group
     * 
     * @return The call builder
     */
    public HrisGetDepartmentGroupRequestBuilder getDepartmentGroup() {
        return new HrisGetDepartmentGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Department Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetDepartmentGroupResponse getDepartmentGroup(HrisGetDepartmentGroupRequest request) throws Exception {
        return getDepartmentGroup(request, Optional.empty());
    }

    /**
     * Get Department Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetDepartmentGroupResponse getDepartmentGroup(HrisGetDepartmentGroupRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetDepartmentGroupRequest, HrisGetDepartmentGroupResponse> operation
              = new HrisGetDepartmentGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Cost Center Group
     * 
     * @return The call builder
     */
    public HrisGetCostCenterGroupRequestBuilder getCostCenterGroup() {
        return new HrisGetCostCenterGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Cost Center Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetCostCenterGroupResponse getCostCenterGroup(HrisGetCostCenterGroupRequest request) throws Exception {
        return getCostCenterGroup(request, Optional.empty());
    }

    /**
     * Get Cost Center Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetCostCenterGroupResponse getCostCenterGroup(HrisGetCostCenterGroupRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetCostCenterGroupRequest, HrisGetCostCenterGroupResponse> operation
              = new HrisGetCostCenterGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Team Group
     * 
     * @return The call builder
     */
    public HrisGetTeamGroupRequestBuilder getTeamGroup() {
        return new HrisGetTeamGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Team Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTeamGroupResponse getTeamGroup(HrisGetTeamGroupRequest request) throws Exception {
        return getTeamGroup(request, Optional.empty());
    }

    /**
     * Get Team Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTeamGroupResponse getTeamGroup(HrisGetTeamGroupRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetTeamGroupRequest, HrisGetTeamGroupResponse> operation
              = new HrisGetTeamGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Division Group
     * 
     * @return The call builder
     */
    public HrisGetDivisionGroupRequestBuilder getDivisionGroup() {
        return new HrisGetDivisionGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Division Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetDivisionGroupResponse getDivisionGroup(HrisGetDivisionGroupRequest request) throws Exception {
        return getDivisionGroup(request, Optional.empty());
    }

    /**
     * Get Division Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetDivisionGroupResponse getDivisionGroup(HrisGetDivisionGroupRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetDivisionGroupRequest, HrisGetDivisionGroupResponse> operation
              = new HrisGetDivisionGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Company Group
     * 
     * @return The call builder
     */
    public HrisGetCompanyGroupRequestBuilder getCompanyGroup() {
        return new HrisGetCompanyGroupRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetCompanyGroupResponse getCompanyGroup(HrisGetCompanyGroupRequest request) throws Exception {
        return getCompanyGroup(request, Optional.empty());
    }

    /**
     * Get Company Group
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetCompanyGroupResponse getCompanyGroup(HrisGetCompanyGroupRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetCompanyGroupRequest, HrisGetCompanyGroupResponse> operation
              = new HrisGetCompanyGroupOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Jobs
     * 
     * @return The call builder
     */
    public HrisListJobsRequestBuilder listJobs() {
        return new HrisListJobsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Jobs
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListJobsResponse listJobs(HrisListJobsRequest request) throws Exception {
        return listJobs(request, Optional.empty());
    }

    /**
     * List Jobs
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListJobsResponse listJobs(HrisListJobsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListJobsRequest, HrisListJobsResponse> operation
              = new HrisListJobsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Job
     * 
     * @return The call builder
     */
    public HrisGetJobRequestBuilder getJob() {
        return new HrisGetJobRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Job
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetJobResponse getJob(HrisGetJobRequest request) throws Exception {
        return getJob(request, Optional.empty());
    }

    /**
     * Get Job
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetJobResponse getJob(HrisGetJobRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetJobRequest, HrisGetJobResponse> operation
              = new HrisGetJobOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Work Locations
     * 
     * @return The call builder
     */
    public HrisListLocationsRequestBuilder listLocations() {
        return new HrisListLocationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Work Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListLocationsResponse listLocations(HrisListLocationsRequest request) throws Exception {
        return listLocations(request, Optional.empty());
    }

    /**
     * List Work Locations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListLocationsResponse listLocations(HrisListLocationsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListLocationsRequest, HrisListLocationsResponse> operation
              = new HrisListLocationsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Work Location
     * 
     * @return The call builder
     */
    public HrisGetLocationRequestBuilder getLocation() {
        return new HrisGetLocationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Work Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetLocationResponse getLocation(HrisGetLocationRequest request) throws Exception {
        return getLocation(request, Optional.empty());
    }

    /**
     * Get Work Location
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetLocationResponse getLocation(HrisGetLocationRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetLocationRequest, HrisGetLocationResponse> operation
              = new HrisGetLocationOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Positions
     * 
     * @return The call builder
     */
    public HrisListPositionsRequestBuilder listPositions() {
        return new HrisListPositionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Positions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListPositionsResponse listPositions(HrisListPositionsRequest request) throws Exception {
        return listPositions(request, Optional.empty());
    }

    /**
     * List Positions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListPositionsResponse listPositions(HrisListPositionsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListPositionsRequest, HrisListPositionsResponse> operation
              = new HrisListPositionsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Position
     * 
     * @return The call builder
     */
    public HrisGetPositionRequestBuilder getPosition() {
        return new HrisGetPositionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Position
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetPositionResponse getPosition(HrisGetPositionRequest request) throws Exception {
        return getPosition(request, Optional.empty());
    }

    /**
     * Get Position
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetPositionResponse getPosition(HrisGetPositionRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetPositionRequest, HrisGetPositionResponse> operation
              = new HrisGetPositionOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Time Entries
     * 
     * @return The call builder
     */
    public HrisListTimeEntriesRequestBuilder listTimeEntries() {
        return new HrisListTimeEntriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Time Entries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTimeEntriesResponse listTimeEntries(HrisListTimeEntriesRequest request) throws Exception {
        return listTimeEntries(request, Optional.empty());
    }

    /**
     * List Time Entries
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTimeEntriesResponse listTimeEntries(HrisListTimeEntriesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListTimeEntriesRequest, HrisListTimeEntriesResponse> operation
              = new HrisListTimeEntriesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Time Entry
     * 
     * @return The call builder
     */
    public HrisGetTimeEntriesRequestBuilder getTimeEntries() {
        return new HrisGetTimeEntriesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Time Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTimeEntriesResponse getTimeEntries(HrisGetTimeEntriesRequest request) throws Exception {
        return getTimeEntries(request, Optional.empty());
    }

    /**
     * Get Time Entry
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTimeEntriesResponse getTimeEntries(HrisGetTimeEntriesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetTimeEntriesRequest, HrisGetTimeEntriesResponse> operation
              = new HrisGetTimeEntriesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List time off requests
     * 
     * @return The call builder
     */
    public HrisListTimeOffRequestsRequestBuilder listTimeOffRequests() {
        return new HrisListTimeOffRequestsRequestBuilder(sdkConfiguration);
    }

    /**
     * List time off requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTimeOffRequestsResponse listTimeOffRequests(HrisListTimeOffRequestsRequest request) throws Exception {
        return listTimeOffRequests(request, Optional.empty());
    }

    /**
     * List time off requests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTimeOffRequestsResponse listTimeOffRequests(HrisListTimeOffRequestsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListTimeOffRequestsRequest, HrisListTimeOffRequestsResponse> operation
              = new HrisListTimeOffRequestsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get time off request
     * 
     * @return The call builder
     */
    public HrisGetTimeOffRequestRequestBuilder getTimeOffRequest() {
        return new HrisGetTimeOffRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get time off request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTimeOffRequestResponse getTimeOffRequest(HrisGetTimeOffRequestRequest request) throws Exception {
        return getTimeOffRequest(request, Optional.empty());
    }

    /**
     * Get time off request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTimeOffRequestResponse getTimeOffRequest(HrisGetTimeOffRequestRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetTimeOffRequestRequest, HrisGetTimeOffRequestResponse> operation
              = new HrisGetTimeOffRequestOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Shifts
     * 
     * @return The call builder
     */
    public HrisListShiftsRequestBuilder listShifts() {
        return new HrisListShiftsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Shifts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListShiftsResponse listShifts(HrisListShiftsRequest request) throws Exception {
        return listShifts(request, Optional.empty());
    }

    /**
     * List Shifts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListShiftsResponse listShifts(HrisListShiftsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListShiftsRequest, HrisListShiftsResponse> operation
              = new HrisListShiftsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Shift
     * 
     * @return The call builder
     */
    public HrisGetShiftRequestBuilder getShift() {
        return new HrisGetShiftRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Shift
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetShiftResponse getShift(HrisGetShiftRequest request) throws Exception {
        return getShift(request, Optional.empty());
    }

    /**
     * Get Shift
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetShiftResponse getShift(HrisGetShiftRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetShiftRequest, HrisGetShiftResponse> operation
              = new HrisGetShiftOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List time off types
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisListTimeOffTypesRequestBuilder listTimeOffTypes() {
        return new HrisListTimeOffTypesRequestBuilder(sdkConfiguration);
    }

    /**
     * List time off types
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisListTimeOffTypesResponse listTimeOffTypes(HrisListTimeOffTypesRequest request) throws Exception {
        return listTimeOffTypes(request, Optional.empty());
    }

    /**
     * List time off types
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisListTimeOffTypesResponse listTimeOffTypes(HrisListTimeOffTypesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListTimeOffTypesRequest, HrisListTimeOffTypesResponse> operation
              = new HrisListTimeOffTypesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get time off type
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisGetTimeOffTypeRequestBuilder getTimeOffType() {
        return new HrisGetTimeOffTypeRequestBuilder(sdkConfiguration);
    }

    /**
     * Get time off type
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisGetTimeOffTypeResponse getTimeOffType(HrisGetTimeOffTypeRequest request) throws Exception {
        return getTimeOffType(request, Optional.empty());
    }

    /**
     * Get time off type
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public HrisGetTimeOffTypeResponse getTimeOffType(HrisGetTimeOffTypeRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetTimeOffTypeRequest, HrisGetTimeOffTypeResponse> operation
              = new HrisGetTimeOffTypeOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Time Off Policies
     * 
     * @return The call builder
     */
    public HrisListTimeOffPoliciesRequestBuilder listTimeOffPolicies() {
        return new HrisListTimeOffPoliciesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTimeOffPoliciesResponse listTimeOffPolicies(HrisListTimeOffPoliciesRequest request) throws Exception {
        return listTimeOffPolicies(request, Optional.empty());
    }

    /**
     * List Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTimeOffPoliciesResponse listTimeOffPolicies(HrisListTimeOffPoliciesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListTimeOffPoliciesRequest, HrisListTimeOffPoliciesResponse> operation
              = new HrisListTimeOffPoliciesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Time Off Policy
     * 
     * @return The call builder
     */
    public HrisGetTimeOffPolicyRequestBuilder getTimeOffPolicy() {
        return new HrisGetTimeOffPolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Time Off Policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTimeOffPolicyResponse getTimeOffPolicy(HrisGetTimeOffPolicyRequest request) throws Exception {
        return getTimeOffPolicy(request, Optional.empty());
    }

    /**
     * Get Time Off Policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTimeOffPolicyResponse getTimeOffPolicy(HrisGetTimeOffPolicyRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetTimeOffPolicyRequest, HrisGetTimeOffPolicyResponse> operation
              = new HrisGetTimeOffPolicyOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Assigned Time Off Policies
     * 
     * @return The call builder
     */
    public HrisListEmployeeTimeOffPoliciesRequestBuilder listEmployeeTimeOffPolicies() {
        return new HrisListEmployeeTimeOffPoliciesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Assigned Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTimeOffPoliciesResponse listEmployeeTimeOffPolicies(HrisListEmployeeTimeOffPoliciesRequest request) throws Exception {
        return listEmployeeTimeOffPolicies(request, Optional.empty());
    }

    /**
     * List Assigned Time Off Policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTimeOffPoliciesResponse listEmployeeTimeOffPolicies(HrisListEmployeeTimeOffPoliciesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeTimeOffPoliciesRequest, HrisListEmployeeTimeOffPoliciesResponse> operation
              = new HrisListEmployeeTimeOffPoliciesOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List benefits
     * 
     * @return The call builder
     */
    public HrisListBenefitsRequestBuilder listBenefits() {
        return new HrisListBenefitsRequestBuilder(sdkConfiguration);
    }

    /**
     * List benefits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListBenefitsResponse listBenefits(HrisListBenefitsRequest request) throws Exception {
        return listBenefits(request, Optional.empty());
    }

    /**
     * List benefits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListBenefitsResponse listBenefits(HrisListBenefitsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListBenefitsRequest, HrisListBenefitsResponse> operation
              = new HrisListBenefitsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Benefit
     * 
     * @return The call builder
     */
    public HrisGetBenefitRequestBuilder getBenefit() {
        return new HrisGetBenefitRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Benefit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetBenefitResponse getBenefit(HrisGetBenefitRequest request) throws Exception {
        return getBenefit(request, Optional.empty());
    }

    /**
     * Get Benefit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetBenefitResponse getBenefit(HrisGetBenefitRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetBenefitRequest, HrisGetBenefitResponse> operation
              = new HrisGetBenefitOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Skills
     * 
     * @return The call builder
     */
    public HrisListEmployeeSkillsRequestBuilder listEmployeeSkills() {
        return new HrisListEmployeeSkillsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Skills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeSkillsResponse listEmployeeSkills(HrisListEmployeeSkillsRequest request) throws Exception {
        return listEmployeeSkills(request, Optional.empty());
    }

    /**
     * List Employee Skills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeSkillsResponse listEmployeeSkills(HrisListEmployeeSkillsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeSkillsRequest, HrisListEmployeeSkillsResponse> operation
              = new HrisListEmployeeSkillsOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Employee Skill
     * 
     * @return The call builder
     */
    public HrisCreateEmployeeSkillRequestBuilder createEmployeeSkill() {
        return new HrisCreateEmployeeSkillRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Employee Skill
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param entitySkillsCreateRequestDto 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeSkillResponse createEmployeeSkill(
            String xAccountId, String id,
            EntitySkillsCreateRequestDto entitySkillsCreateRequestDto) throws Exception {
        return createEmployeeSkill(xAccountId, id, entitySkillsCreateRequestDto,
            Optional.empty());
    }

    /**
     * Create Employee Skill
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param entitySkillsCreateRequestDto 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisCreateEmployeeSkillResponse createEmployeeSkill(
            String xAccountId, String id,
            EntitySkillsCreateRequestDto entitySkillsCreateRequestDto, Optional<Options> options) throws Exception {
        HrisCreateEmployeeSkillRequest request =
            HrisCreateEmployeeSkillRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .entitySkillsCreateRequestDto(entitySkillsCreateRequestDto)
                .build();
        RequestOperation<HrisCreateEmployeeSkillRequest, HrisCreateEmployeeSkillResponse> operation
              = new HrisCreateEmployeeSkillOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee Skill
     * 
     * @return The call builder
     */
    public HrisGetEmployeeSkillRequestBuilder getEmployeeSkill() {
        return new HrisGetEmployeeSkillRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Skill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeSkillResponse getEmployeeSkill(HrisGetEmployeeSkillRequest request) throws Exception {
        return getEmployeeSkill(request, Optional.empty());
    }

    /**
     * Get Employee Skill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeSkillResponse getEmployeeSkill(HrisGetEmployeeSkillRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeSkillRequest, HrisGetEmployeeSkillResponse> operation
              = new HrisGetEmployeeSkillOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Employee Tasks
     * 
     * @return The call builder
     */
    public HrisListEmployeeTasksRequestBuilder listEmployeeTasks() {
        return new HrisListEmployeeTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * List Employee Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTasksResponse listEmployeeTasks(HrisListEmployeeTasksRequest request) throws Exception {
        return listEmployeeTasks(request, Optional.empty());
    }

    /**
     * List Employee Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListEmployeeTasksResponse listEmployeeTasks(HrisListEmployeeTasksRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListEmployeeTasksRequest, HrisListEmployeeTasksResponse> operation
              = new HrisListEmployeeTasksOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Employee Task
     * 
     * @return The call builder
     */
    public HrisGetEmployeeTaskRequestBuilder getEmployeeTask() {
        return new HrisGetEmployeeTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Employee Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeTaskResponse getEmployeeTask(HrisGetEmployeeTaskRequest request) throws Exception {
        return getEmployeeTask(request, Optional.empty());
    }

    /**
     * Get Employee Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetEmployeeTaskResponse getEmployeeTask(HrisGetEmployeeTaskRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetEmployeeTaskRequest, HrisGetEmployeeTaskResponse> operation
              = new HrisGetEmployeeTaskOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Tasks
     * 
     * @return The call builder
     */
    public HrisListTasksRequestBuilder listTasks() {
        return new HrisListTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTasksResponse listTasks(HrisListTasksRequest request) throws Exception {
        return listTasks(request, Optional.empty());
    }

    /**
     * List Tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisListTasksResponse listTasks(HrisListTasksRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisListTasksRequest, HrisListTasksResponse> operation
              = new HrisListTasksOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Task
     * 
     * @return The call builder
     */
    public HrisGetTaskRequestBuilder getTask() {
        return new HrisGetTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTaskResponse getTask(HrisGetTaskRequest request) throws Exception {
        return getTask(request, Optional.empty());
    }

    /**
     * Get Task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public HrisGetTaskResponse getTask(HrisGetTaskRequest request, Optional<Options> options) throws Exception {
        RequestOperation<HrisGetTaskRequest, HrisGetTaskResponse> operation
              = new HrisGetTaskOperation(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
