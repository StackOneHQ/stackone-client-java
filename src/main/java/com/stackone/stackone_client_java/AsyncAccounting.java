/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import static com.stackone.stackone_client_java.operations.Operations.AsyncRequestOperation;

import com.stackone.stackone_client_java.models.components.AccountingJournalBatchCreateRequestDto;
import com.stackone.stackone_client_java.models.components.AccountingJournalCreateRequestDto;
import com.stackone.stackone_client_java.models.operations.AccountingBatchCreateCompanyJournalsRequest;
import com.stackone.stackone_client_java.models.operations.AccountingCreateCompanyJournalRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyAccountRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyJournalRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyRequest;
import com.stackone.stackone_client_java.models.operations.AccountingGetCompanyTaxRateRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompaniesRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyAccountsRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyJournalsRequest;
import com.stackone.stackone_client_java.models.operations.AccountingListCompanyTaxRatesRequest;
import com.stackone.stackone_client_java.models.operations.async.AccountingBatchCreateCompanyJournalsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingBatchCreateCompanyJournalsResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingCreateCompanyJournalRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingCreateCompanyJournalResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyAccountRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyAccountResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyJournalRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyJournalResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyTaxRateRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingGetCompanyTaxRateResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompaniesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompaniesResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompanyAccountsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompanyAccountsResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompanyJournalsRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompanyJournalsResponse;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompanyTaxRatesRequestBuilder;
import com.stackone.stackone_client_java.models.operations.async.AccountingListCompanyTaxRatesResponse;
import com.stackone.stackone_client_java.operations.AccountingBatchCreateCompanyJournals;
import com.stackone.stackone_client_java.operations.AccountingCreateCompanyJournal;
import com.stackone.stackone_client_java.operations.AccountingGetCompany;
import com.stackone.stackone_client_java.operations.AccountingGetCompanyAccount;
import com.stackone.stackone_client_java.operations.AccountingGetCompanyJournal;
import com.stackone.stackone_client_java.operations.AccountingGetCompanyTaxRate;
import com.stackone.stackone_client_java.operations.AccountingListCompanies;
import com.stackone.stackone_client_java.operations.AccountingListCompanyAccounts;
import com.stackone.stackone_client_java.operations.AccountingListCompanyJournals;
import com.stackone.stackone_client_java.operations.AccountingListCompanyTaxRates;
import com.stackone.stackone_client_java.utils.Options;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncAccounting {
    private final SDKConfiguration sdkConfiguration;
    private final Accounting syncSDK;

    AsyncAccounting(Accounting syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Accounting sync() {
        return syncSDK;
    }


    /**
     * List Companies
     * 
     * @return The async call builder
     */
    public AccountingListCompaniesRequestBuilder listCompanies() {
        return new AccountingListCompaniesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingListCompaniesResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompaniesResponse> listCompanies(AccountingListCompaniesRequest request) {
        return listCompanies(request, Optional.empty());
    }

    /**
     * List Companies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingListCompaniesResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompaniesResponse> listCompanies(AccountingListCompaniesRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingListCompaniesRequest, AccountingListCompaniesResponse> operation
              = new AccountingListCompanies.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Company
     * 
     * @return The async call builder
     */
    public AccountingGetCompanyRequestBuilder getCompany() {
        return new AccountingGetCompanyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingGetCompanyResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyResponse> getCompany(AccountingGetCompanyRequest request) {
        return getCompany(request, Optional.empty());
    }

    /**
     * Get Company
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingGetCompanyResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyResponse> getCompany(AccountingGetCompanyRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingGetCompanyRequest, AccountingGetCompanyResponse> operation
              = new AccountingGetCompany.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Accounts
     * 
     * @return The async call builder
     */
    public AccountingListCompanyAccountsRequestBuilder listCompanyAccounts() {
        return new AccountingListCompanyAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingListCompanyAccountsResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompanyAccountsResponse> listCompanyAccounts(AccountingListCompanyAccountsRequest request) {
        return listCompanyAccounts(request, Optional.empty());
    }

    /**
     * List Accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingListCompanyAccountsResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompanyAccountsResponse> listCompanyAccounts(AccountingListCompanyAccountsRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingListCompanyAccountsRequest, AccountingListCompanyAccountsResponse> operation
              = new AccountingListCompanyAccounts.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Account
     * 
     * @return The async call builder
     */
    public AccountingGetCompanyAccountRequestBuilder getCompanyAccount() {
        return new AccountingGetCompanyAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingGetCompanyAccountResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyAccountResponse> getCompanyAccount(AccountingGetCompanyAccountRequest request) {
        return getCompanyAccount(request, Optional.empty());
    }

    /**
     * Get Account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingGetCompanyAccountResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyAccountResponse> getCompanyAccount(AccountingGetCompanyAccountRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingGetCompanyAccountRequest, AccountingGetCompanyAccountResponse> operation
              = new AccountingGetCompanyAccount.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Tax Rates
     * 
     * @return The async call builder
     */
    public AccountingListCompanyTaxRatesRequestBuilder listCompanyTaxRates() {
        return new AccountingListCompanyTaxRatesRequestBuilder(sdkConfiguration);
    }

    /**
     * List Tax Rates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingListCompanyTaxRatesResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompanyTaxRatesResponse> listCompanyTaxRates(AccountingListCompanyTaxRatesRequest request) {
        return listCompanyTaxRates(request, Optional.empty());
    }

    /**
     * List Tax Rates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingListCompanyTaxRatesResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompanyTaxRatesResponse> listCompanyTaxRates(AccountingListCompanyTaxRatesRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingListCompanyTaxRatesRequest, AccountingListCompanyTaxRatesResponse> operation
              = new AccountingListCompanyTaxRates.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Tax Rate
     * 
     * @return The async call builder
     */
    public AccountingGetCompanyTaxRateRequestBuilder getCompanyTaxRate() {
        return new AccountingGetCompanyTaxRateRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingGetCompanyTaxRateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyTaxRateResponse> getCompanyTaxRate(AccountingGetCompanyTaxRateRequest request) {
        return getCompanyTaxRate(request, Optional.empty());
    }

    /**
     * Get Tax Rate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingGetCompanyTaxRateResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyTaxRateResponse> getCompanyTaxRate(AccountingGetCompanyTaxRateRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingGetCompanyTaxRateRequest, AccountingGetCompanyTaxRateResponse> operation
              = new AccountingGetCompanyTaxRate.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Batch Create Journals
     * 
     * @return The async call builder
     */
    public AccountingBatchCreateCompanyJournalsRequestBuilder batchCreateCompanyJournals() {
        return new AccountingBatchCreateCompanyJournalsRequestBuilder(sdkConfiguration);
    }

    /**
     * Batch Create Journals
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalBatchCreateRequestDto 
     * @return CompletableFuture&lt;AccountingBatchCreateCompanyJournalsResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBatchCreateCompanyJournalsResponse> batchCreateCompanyJournals(
            String xAccountId, String id,
            AccountingJournalBatchCreateRequestDto accountingJournalBatchCreateRequestDto) {
        return batchCreateCompanyJournals(
                xAccountId, id, accountingJournalBatchCreateRequestDto,
                Optional.empty());
    }

    /**
     * Batch Create Journals
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalBatchCreateRequestDto 
     * @param options additional options
     * @return CompletableFuture&lt;AccountingBatchCreateCompanyJournalsResponse&gt; - The async response
     */
    public CompletableFuture<AccountingBatchCreateCompanyJournalsResponse> batchCreateCompanyJournals(
            String xAccountId, String id,
            AccountingJournalBatchCreateRequestDto accountingJournalBatchCreateRequestDto, Optional<Options> options) {
        AccountingBatchCreateCompanyJournalsRequest request =
            AccountingBatchCreateCompanyJournalsRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .accountingJournalBatchCreateRequestDto(accountingJournalBatchCreateRequestDto)
                .build();
        AsyncRequestOperation<AccountingBatchCreateCompanyJournalsRequest, AccountingBatchCreateCompanyJournalsResponse> operation
              = new AccountingBatchCreateCompanyJournals.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List Journals
     * 
     * @return The async call builder
     */
    public AccountingListCompanyJournalsRequestBuilder listCompanyJournals() {
        return new AccountingListCompanyJournalsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Journals
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingListCompanyJournalsResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompanyJournalsResponse> listCompanyJournals(AccountingListCompanyJournalsRequest request) {
        return listCompanyJournals(request, Optional.empty());
    }

    /**
     * List Journals
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingListCompanyJournalsResponse&gt; - The async response
     */
    public CompletableFuture<AccountingListCompanyJournalsResponse> listCompanyJournals(AccountingListCompanyJournalsRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingListCompanyJournalsRequest, AccountingListCompanyJournalsResponse> operation
              = new AccountingListCompanyJournals.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create Journal
     * 
     * @return The async call builder
     */
    public AccountingCreateCompanyJournalRequestBuilder createCompanyJournal() {
        return new AccountingCreateCompanyJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Journal
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalCreateRequestDto 
     * @return CompletableFuture&lt;AccountingCreateCompanyJournalResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreateCompanyJournalResponse> createCompanyJournal(
            String xAccountId, String id,
            AccountingJournalCreateRequestDto accountingJournalCreateRequestDto) {
        return createCompanyJournal(
                xAccountId, id, accountingJournalCreateRequestDto,
                Optional.empty());
    }

    /**
     * Create Journal
     * 
     * @param xAccountId The account identifier
     * @param id 
     * @param accountingJournalCreateRequestDto 
     * @param options additional options
     * @return CompletableFuture&lt;AccountingCreateCompanyJournalResponse&gt; - The async response
     */
    public CompletableFuture<AccountingCreateCompanyJournalResponse> createCompanyJournal(
            String xAccountId, String id,
            AccountingJournalCreateRequestDto accountingJournalCreateRequestDto, Optional<Options> options) {
        AccountingCreateCompanyJournalRequest request =
            AccountingCreateCompanyJournalRequest
                .builder()
                .xAccountId(xAccountId)
                .id(id)
                .accountingJournalCreateRequestDto(accountingJournalCreateRequestDto)
                .build();
        AsyncRequestOperation<AccountingCreateCompanyJournalRequest, AccountingCreateCompanyJournalResponse> operation
              = new AccountingCreateCompanyJournal.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Journal
     * 
     * @return The async call builder
     */
    public AccountingGetCompanyJournalRequestBuilder getCompanyJournal() {
        return new AccountingGetCompanyJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;AccountingGetCompanyJournalResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyJournalResponse> getCompanyJournal(AccountingGetCompanyJournalRequest request) {
        return getCompanyJournal(request, Optional.empty());
    }

    /**
     * Get Journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return CompletableFuture&lt;AccountingGetCompanyJournalResponse&gt; - The async response
     */
    public CompletableFuture<AccountingGetCompanyJournalResponse> getCompanyJournal(AccountingGetCompanyJournalRequest request, Optional<Options> options) {
        AsyncRequestOperation<AccountingGetCompanyJournalRequest, AccountingGetCompanyJournalResponse> operation
              = new AccountingGetCompanyJournal.Async(sdkConfiguration, options, sdkConfiguration.retryScheduler());
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
