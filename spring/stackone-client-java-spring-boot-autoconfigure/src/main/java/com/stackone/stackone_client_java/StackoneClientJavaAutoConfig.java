/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.stackone.stackone_client_java;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import com.stackone.stackone_client_java.utils.BackoffStrategy;
import com.stackone.stackone_client_java.utils.HTTPClient;
import com.stackone.stackone_client_java.utils.RetryConfig;
import com.stackone.stackone_client_java.utils.SpeakeasyHTTPClient;
import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;


/**
 * Spring Boot Auto Configuration for stackone-client-java SDK
 * This configuration class automatically configures the stackone-client-java SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(StackOne.class)
@EnableConfigurationProperties(StackoneClientJavaAutoConfigProperties.class)
public class StackoneClientJavaAutoConfig {

    /**
     * Constructor.
     */
    public StackoneClientJavaAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "stackoneclientjava.retry-config", name = "strategy")
    public RetryConfig retryConfig(StackoneClientJavaAutoConfigProperties properties) {
        StackoneClientJavaAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            StackoneClientJavaAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(StackoneClientJavaAutoConfigProperties properties, Consumer<String> httpLogger) {
        StackoneClientJavaAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "stackoneclientjava.security")
    public SecuritySource securitySource(StackoneClientJavaAutoConfigProperties properties) {StackoneClientJavaAutoConfigProperties.Security securityProps = properties.getSecurity();
        com.stackone.stackone_client_java.models.components.Security.Builder securityBuilder = com.stackone.stackone_client_java.models.components.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build username security from direct properties (primitive value)
        if (securityProps.getUsername() != null) {
            securityBuilder.username(securityProps.getUsername());
            hasAnySecurityConfiguration = true;
        }
        // Build password security from direct properties (primitive value)
        if (securityProps.getPassword() != null) {
            securityBuilder.password(securityProps.getPassword());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param securitySource the security source bean (optional)
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            StackoneClientJavaAutoConfigProperties properties,
            HTTPClient httpClient,
            com.stackone.stackone_client_java.utils.Hooks hooks,
            com.stackone.stackone_client_java.utils.AsyncHooks asyncHooks,
            SecuritySource securitySource,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        sdkConfiguration.setServerIdx(properties.getServerIdx());
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured StackOne instance
     */
    @Bean
    @ConditionalOnMissingBean
    public StackOne stackOne(SDKConfiguration sdkConfiguration) {
        return new StackOne(sdkConfiguration);
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.stackone.stackone_client_java.utils.AsyncHooks asyncHooks() {
        return new com.stackone.stackone_client_java.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public com.stackone.stackone_client_java.utils.Hooks hooks() {
        return new com.stackone.stackone_client_java.utils.Hooks();
    }
    /**
     * Creates a ConnectSessions sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured ConnectSessions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ConnectSessions connectSessions(StackOne stackOne) {
        return stackOne.connectSessions();
    }
    /**
     * Creates a Accounts sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Accounts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Accounts accounts(StackOne stackOne) {
        return stackOne.accounts();
    }
    /**
     * Creates a RequestLogs sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured RequestLogs instance
     */
    @Bean
    @ConditionalOnMissingBean
    public RequestLogs requestLogs(StackOne stackOne) {
        return stackOne.requestLogs();
    }
    /**
     * Creates a Connectors sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Connectors instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Connectors connectors(StackOne stackOne) {
        return stackOne.connectors();
    }
    /**
     * Creates a Proxy sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Proxy instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Proxy proxy(StackOne stackOne) {
        return stackOne.proxy();
    }
    /**
     * Creates a Mcp sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Mcp instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Mcp mcp(StackOne stackOne) {
        return stackOne.mcp();
    }
    /**
     * Creates a Actions sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Actions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Actions actions(StackOne stackOne) {
        return stackOne.actions();
    }
    /**
     * Creates a Hris sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Hris instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Hris hris(StackOne stackOne) {
        return stackOne.hris();
    }
    /**
     * Creates a Ats sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Ats instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Ats ats(StackOne stackOne) {
        return stackOne.ats();
    }
    /**
     * Creates a Crm sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Crm instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Crm crm(StackOne stackOne) {
        return stackOne.crm();
    }
    /**
     * Creates a Iam sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Iam instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Iam iam(StackOne stackOne) {
        return stackOne.iam();
    }
    /**
     * Creates a Marketing sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Marketing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Marketing marketing(StackOne stackOne) {
        return stackOne.marketing();
    }
    /**
     * Creates a Lms sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Lms instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Lms lms(StackOne stackOne) {
        return stackOne.lms();
    }
    /**
     * Creates a Ticketing sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Ticketing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Ticketing ticketing(StackOne stackOne) {
        return stackOne.ticketing();
    }
    /**
     * Creates a Documents sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Documents instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Documents documents(StackOne stackOne) {
        return stackOne.documents();
    }
    /**
     * Creates a Screening sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Screening instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Screening screening(StackOne stackOne) {
        return stackOne.screening();
    }
    /**
     * Creates a Messaging sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Messaging instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Messaging messaging(StackOne stackOne) {
        return stackOne.messaging();
    }
    /**
     * Creates a Accounting sub-SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @return A configured Accounting instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Accounting accounting(StackOne stackOne) {
        return stackOne.accounting();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param stackOne the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncStackOne instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncStackOne asyncStackOne(StackOne stackOne, SDKConfiguration sdkConfiguration) {
        return new AsyncStackOne(stackOne, sdkConfiguration);
    }
    /**
     * Creates an AsyncConnectSessions sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncConnectSessions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncConnectSessions asyncConnectSessions(AsyncStackOne asyncStackOne) {
        return asyncStackOne.connectSessions();
    }
    /**
     * Creates an AsyncAccounts sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncAccounts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAccounts asyncAccounts(AsyncStackOne asyncStackOne) {
        return asyncStackOne.accounts();
    }
    /**
     * Creates an AsyncRequestLogs sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncRequestLogs instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRequestLogs asyncRequestLogs(AsyncStackOne asyncStackOne) {
        return asyncStackOne.requestLogs();
    }
    /**
     * Creates an AsyncConnectors sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncConnectors instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncConnectors asyncConnectors(AsyncStackOne asyncStackOne) {
        return asyncStackOne.connectors();
    }
    /**
     * Creates an AsyncProxy sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncProxy instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProxy asyncProxy(AsyncStackOne asyncStackOne) {
        return asyncStackOne.proxy();
    }
    /**
     * Creates an AsyncMcp sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncMcp instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMcp asyncMcp(AsyncStackOne asyncStackOne) {
        return asyncStackOne.mcp();
    }
    /**
     * Creates an AsyncActions sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncActions instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncActions asyncActions(AsyncStackOne asyncStackOne) {
        return asyncStackOne.actions();
    }
    /**
     * Creates an AsyncHris sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncHris instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncHris asyncHris(AsyncStackOne asyncStackOne) {
        return asyncStackOne.hris();
    }
    /**
     * Creates an AsyncAts sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncAts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAts asyncAts(AsyncStackOne asyncStackOne) {
        return asyncStackOne.ats();
    }
    /**
     * Creates an AsyncCrm sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncCrm instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCrm asyncCrm(AsyncStackOne asyncStackOne) {
        return asyncStackOne.crm();
    }
    /**
     * Creates an AsyncIam sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncIam instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncIam asyncIam(AsyncStackOne asyncStackOne) {
        return asyncStackOne.iam();
    }
    /**
     * Creates an AsyncMarketing sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncMarketing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMarketing asyncMarketing(AsyncStackOne asyncStackOne) {
        return asyncStackOne.marketing();
    }
    /**
     * Creates an AsyncLms sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncLms instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLms asyncLms(AsyncStackOne asyncStackOne) {
        return asyncStackOne.lms();
    }
    /**
     * Creates an AsyncTicketing sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncTicketing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTicketing asyncTicketing(AsyncStackOne asyncStackOne) {
        return asyncStackOne.ticketing();
    }
    /**
     * Creates an AsyncDocuments sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncDocuments instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDocuments asyncDocuments(AsyncStackOne asyncStackOne) {
        return asyncStackOne.documents();
    }
    /**
     * Creates an AsyncScreening sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncScreening instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncScreening asyncScreening(AsyncStackOne asyncStackOne) {
        return asyncStackOne.screening();
    }
    /**
     * Creates an AsyncMessaging sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncMessaging instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMessaging asyncMessaging(AsyncStackOne asyncStackOne) {
        return asyncStackOne.messaging();
    }
    /**
     * Creates an AsyncAccounting sub-SDK bean if none exists.
     *
     * @param asyncStackOne the async SDK instance
     * @return A configured AsyncAccounting instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAccounting asyncAccounting(AsyncStackOne asyncStackOne) {
        return asyncStackOne.accounting();
    }
}